{"ast":null,"code":"import { Observable, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\n/**\r\n * Base class for in-memory web api back-ends\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n */\n\nvar BackendService =\n/** @class */\nfunction () {\n  function BackendService(inMemDbService, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.inMemDbService = inMemDbService;\n    this.config = new InMemoryBackendConfig();\n    this.requestInfoUtils = this.getRequestInfoUtils();\n    var loc = this.getLocation('/');\n    this.config.host = loc.host; // default to app web server host\n\n    this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n\n    Object.assign(this.config, config);\n  }\n\n  Object.defineProperty(BackendService.prototype, \"dbReady\", {\n    ////  protected /////\n    get: function get() {\n      if (!this.dbReadySubject) {\n        // first time the service is called.\n        this.dbReadySubject = new BehaviorSubject(false);\n        this.resetDb();\n      }\n\n      return this.dbReadySubject.asObservable().pipe(first(function (r) {\n        return r;\n      }));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Process Request and return an Observable of Http Response object\r\n   * in the manner of a RESTy web api.\r\n   *\r\n   * Expect URI pattern in the form :base/:collectionName/:id?\r\n   * Examples:\r\n   *   // for store with a 'customers' collection\r\n   *   GET api/customers          // all customers\r\n   *   GET api/customers/42       // the character with id=42\r\n   *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\r\n   *   GET api/customers.json/42  // ignores the \".json\"\r\n   *\r\n   * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\r\n   * Examples:\r\n   *     POST commands/resetDb,\r\n   *     GET/POST commands/config - get or (re)set the config\r\n   *\r\n   *   HTTP overrides:\r\n   *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n   *     The request is forwarded to that method as in\r\n   *     `inMemDbService.get(requestInfo)`\r\n   *     which must return either an Observable of the response type\r\n   *     for this http library or null|undefined (which means \"keep processing\").\r\n   */\n\n  BackendService.prototype.handleRequest = function (req) {\n    var _this = this; //  handle the request when there is an in-memory database\n\n\n    return this.dbReady.pipe(concatMap(function () {\n      return _this.handleRequest_(req);\n    }));\n  };\n\n  BackendService.prototype.handleRequest_ = function (req) {\n    var _this = this;\n\n    var url = req.urlWithParams ? req.urlWithParams : req.url; // Try override parser\n    // If no override parser or it returns nothing, use default parser\n\n    var parser = this.bind('parseRequestUrl');\n    var parsed = parser && parser(url, this.requestInfoUtils) || this.parseRequestUrl(url);\n    var collectionName = parsed.collectionName;\n    var collection = this.db[collectionName];\n    var reqInfo = {\n      req: req,\n      apiBase: parsed.apiBase,\n      collection: collection,\n      collectionName: collectionName,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      id: this.parseId(collection, collectionName, parsed.id),\n      method: this.getRequestMethod(req),\n      query: parsed.query,\n      resourceUrl: parsed.resourceUrl,\n      url: url,\n      utils: this.requestInfoUtils\n    };\n    var resOptions;\n\n    if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n      return this.commands(reqInfo);\n    }\n\n    var methodInterceptor = this.bind(reqInfo.method);\n\n    if (methodInterceptor) {\n      // InMemoryDbService intercepts this HTTP method.\n      // if interceptor produced a response, return it.\n      // else InMemoryDbService chose not to intercept; continue processing.\n      var interceptorResponse = methodInterceptor(reqInfo);\n\n      if (interceptorResponse) {\n        return interceptorResponse;\n      }\n\n      ;\n    }\n\n    if (this.db[collectionName]) {\n      // request is for a known collection of the InMemoryDbService\n      return this.createResponse$(function () {\n        return _this.collectionHandler(reqInfo);\n      });\n    }\n\n    if (this.config.passThruUnknownUrl) {\n      // unknown collection; pass request thru to a \"real\" backend.\n      return this.getPassThruBackend().handle(req);\n    } // 404 - can't handle this request\n\n\n    resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\n    return this.createResponse$(function () {\n      return resOptions;\n    });\n  };\n  /**\r\n   * Add configured delay to response observable unless delay === 0\r\n   */\n\n\n  BackendService.prototype.addDelay = function (response) {\n    var d = this.config.delay;\n    return d === 0 ? response : delayResponse(response, d || 500);\n  };\n  /**\r\n   * Apply query/search parameters as a filter over the collection\r\n   * This impl only supports RegExp queries on string properties of the collection\r\n   * ANDs the conditions together\r\n   */\n\n\n  BackendService.prototype.applyQuery = function (collection, query) {\n    // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n    var conditions = [];\n    var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n    query.forEach(function (value, name) {\n      value.forEach(function (v) {\n        return conditions.push({\n          name: name,\n          rx: new RegExp(decodeURI(v), caseSensitive)\n        });\n      });\n    });\n    var len = conditions.length;\n\n    if (!len) {\n      return collection;\n    } // AND the RegExp conditions\n\n\n    return collection.filter(function (row) {\n      var ok = true;\n      var i = len;\n\n      while (ok && i) {\n        i -= 1;\n        var cond = conditions[i];\n        ok = cond.rx.test(row[cond.name]);\n      }\n\n      return ok;\n    });\n  };\n  /**\r\n   * Get a method from the `InMemoryDbService` (if it exists), bound to that service\r\n   */\n\n\n  BackendService.prototype.bind = function (methodName) {\n    var fn = this.inMemDbService[methodName];\n    return fn ? fn.bind(this.inMemDbService) : undefined;\n  };\n\n  BackendService.prototype.bodify = function (data) {\n    return this.config.dataEncapsulation ? {\n      data: data\n    } : data;\n  };\n\n  BackendService.prototype.clone = function (data) {\n    return JSON.parse(JSON.stringify(data));\n  };\n\n  BackendService.prototype.collectionHandler = function (reqInfo) {\n    // const req = reqInfo.req;\n    var resOptions;\n\n    switch (reqInfo.method) {\n      case 'get':\n        resOptions = this.get(reqInfo);\n        break;\n\n      case 'post':\n        resOptions = this.post(reqInfo);\n        break;\n\n      case 'put':\n        resOptions = this.put(reqInfo);\n        break;\n\n      case 'delete':\n        resOptions = this.delete(reqInfo);\n        break;\n\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n        break;\n    } // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n\n\n    var interceptor = this.bind('responseInterceptor');\n    return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n  };\n  /**\r\n   * Commands reconfigure the in-memory web api service or extract information from it.\r\n   * Commands ignore the latency delay and respond ASAP.\r\n   *\r\n   * When the last segment of the `apiBase` path is \"commands\",\r\n   * the `collectionName` is the command.\r\n   *\r\n   * Example URLs:\r\n   *   commands/resetdb (POST) // Reset the \"database\" to its original state\r\n   *   commands/config (GET)   // Return this service's config object\r\n   *   commands/config (POST)  // Update the config (e.g. the delay)\r\n   *\r\n   * Usage:\r\n   *   http.post('commands/resetdb', undefined);\r\n   *   http.get('commands/config');\r\n   *   http.post('commands/config', '{\"delay\":1000}');\r\n   */\n\n\n  BackendService.prototype.commands = function (reqInfo) {\n    var _this = this;\n\n    var command = reqInfo.collectionName.toLowerCase();\n    var method = reqInfo.method;\n    var resOptions = {\n      url: reqInfo.url\n    };\n\n    switch (command) {\n      case 'resetdb':\n        resOptions.status = STATUS.NO_CONTENT;\n        return this.resetDb(reqInfo).pipe(concatMap(function () {\n          return _this.createResponse$(function () {\n            return resOptions;\n          }, false\n          /* no latency delay */\n          );\n        }));\n\n      case 'config':\n        if (method === 'get') {\n          resOptions.status = STATUS.OK;\n          resOptions.body = this.clone(this.config); // any other HTTP method is assumed to be a config update\n        } else {\n          var body = this.getJsonBody(reqInfo.req);\n          Object.assign(this.config, body);\n          this.passThruBackend = undefined; // re-create when needed\n\n          resOptions.status = STATUS.NO_CONTENT;\n        }\n\n        break;\n\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\n    }\n\n    return this.createResponse$(function () {\n      return resOptions;\n    }, false\n    /* no latency delay */\n    );\n  };\n\n  BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\n    return {\n      body: {\n        error: \"\" + message\n      },\n      url: url,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      status: status\n    };\n  };\n  /**\r\n   * Create a cold response Observable from a factory for ResponseOptions\r\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n   * @param withDelay - if true (default), add simulated latency delay from configuration\r\n   */\n\n\n  BackendService.prototype.createResponse$ = function (resOptionsFactory, withDelay) {\n    if (withDelay === void 0) {\n      withDelay = true;\n    }\n\n    var resOptions$ = this.createResponseOptions$(resOptionsFactory);\n    var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n    return withDelay ? this.addDelay(resp$) : resp$;\n  };\n  /**\r\n   * Create a cold Observable of ResponseOptions.\r\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n   */\n\n\n  BackendService.prototype.createResponseOptions$ = function (resOptionsFactory) {\n    var _this = this;\n\n    return new Observable(function (responseObserver) {\n      var resOptions;\n\n      try {\n        resOptions = resOptionsFactory();\n      } catch (error) {\n        var err = error.message || error;\n        resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n      }\n\n      var status = resOptions.status;\n\n      try {\n        resOptions.statusText = getStatusText(status);\n      } catch (e) {\n        /* ignore failure */\n      }\n\n      if (isSuccess(status)) {\n        responseObserver.next(resOptions);\n        responseObserver.complete();\n      } else {\n        responseObserver.error(resOptions);\n      }\n\n      return function () {}; // unsubscribe function\n    });\n  };\n\n  BackendService.prototype.delete = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        url = _a.url; // tslint:disable-next-line:triple-equals\n\n    if (id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\n    }\n\n    var exists = this.removeById(collection, id);\n    return {\n      headers: headers,\n      status: exists || !this.config.delete404 ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n    };\n  };\n  /**\r\n   * Find first instance of item in collection by `item.id`\r\n   * @param collection\r\n   * @param id\r\n   */\n\n\n  BackendService.prototype.findById = function (collection, id) {\n    return collection.find(function (item) {\n      return item.id === id;\n    });\n  };\n  /**\r\n   * Generate the next available id for item in this collection\r\n   * Use method from `inMemDbService` if it exists and returns a value,\r\n   * else delegates to `genIdDefault`.\r\n   * @param collection - collection of items with `id` key property\r\n   */\n\n\n  BackendService.prototype.genId = function (collection, collectionName) {\n    var genId = this.bind('genId');\n\n    if (genId) {\n      var id = genId(collection, collectionName); // tslint:disable-next-line:triple-equals\n\n      if (id != undefined) {\n        return id;\n      }\n    }\n\n    return this.genIdDefault(collection, collectionName);\n  };\n  /**\r\n   * Default generator of the next available id for item in this collection\r\n   * This default implementation works only for numeric ids.\r\n   * @param collection - collection of items with `id` key property\r\n   * @param collectionName - name of the collection\r\n   */\n\n\n  BackendService.prototype.genIdDefault = function (collection, collectionName) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\n    }\n\n    var maxId = 0;\n    collection.reduce(function (prev, item) {\n      maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n    }, undefined);\n    return maxId + 1;\n  };\n\n  BackendService.prototype.get = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        query = _a.query,\n        url = _a.url;\n    var data = collection; // tslint:disable-next-line:triple-equals\n\n    if (id != undefined && id !== '') {\n      data = this.findById(collection, id);\n    } else if (query) {\n      data = this.applyQuery(collection, query);\n    }\n\n    if (!data) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\n    }\n\n    return {\n      body: this.bodify(this.clone(data)),\n      headers: headers,\n      status: STATUS.OK\n    };\n  };\n  /**\r\n   * Get location info from a url, even on server where `document` is not defined\r\n   */\n\n\n  BackendService.prototype.getLocation = function (url) {\n    if (!url.startsWith('http')) {\n      // get the document iff running in browser\n      var doc = typeof document === 'undefined' ? undefined : document; // add host info to url before parsing.  Use a fake host when not in browser.\n\n      var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n      url = url.startsWith('/') ? base + url : base + '/' + url;\n    }\n\n    return parseUri(url);\n  };\n\n  ;\n  /**\r\n   * get or create the function that passes unhandled requests\r\n   * through to the \"real\" backend.\r\n   */\n\n  BackendService.prototype.getPassThruBackend = function () {\n    return this.passThruBackend ? this.passThruBackend : this.passThruBackend = this.createPassThruBackend();\n  };\n  /**\r\n   * Get utility methods from this service instance.\r\n   * Useful within an HTTP method override\r\n   */\n\n\n  BackendService.prototype.getRequestInfoUtils = function () {\n    var _this = this;\n\n    return {\n      createResponse$: this.createResponse$.bind(this),\n      findById: this.findById.bind(this),\n      isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n      getConfig: function getConfig() {\n        return _this.config;\n      },\n      getDb: function getDb() {\n        return _this.db;\n      },\n      getJsonBody: this.getJsonBody.bind(this),\n      getLocation: this.getLocation.bind(this),\n      getPassThruBackend: this.getPassThruBackend.bind(this),\n      parseRequestUrl: this.parseRequestUrl.bind(this)\n    };\n  };\n\n  BackendService.prototype.indexOf = function (collection, id) {\n    return collection.findIndex(function (item) {\n      return item.id === id;\n    });\n  };\n  /** Parse the id as a number. Return original value if not a number. */\n\n\n  BackendService.prototype.parseId = function (collection, collectionName, id) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      // Can't confirm that `id` is a numeric type; don't parse as a number\n      // or else `'42'` -> `42` and _get by id_ fails.\n      return id;\n    }\n\n    var idNum = parseFloat(id);\n    return isNaN(idNum) ? id : idNum;\n  };\n  /**\r\n   * return true if can determine that the collection's `item.id` is a number\r\n   * This implementation can't tell if the collection is empty so it assumes NO\r\n   * */\n\n\n  BackendService.prototype.isCollectionIdNumeric = function (collection, collectionName) {\n    // collectionName not used now but override might maintain collection type information\n    // so that it could know the type of the `id` even when the collection is empty.\n    return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n  };\n  /**\r\n   * Parses the request URL into a `ParsedRequestUrl` object.\r\n   * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n   *\r\n   * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\r\n   *   When apiBase=undefined and url='http://localhost/api/collection/42'\r\n   *     {base: 'api/', collectionName: 'collection', id: '42', ...}\r\n   *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\r\n   *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\r\n   *   When apiBase='/' and url='http://localhost/collection'\r\n   *     {base: '/', collectionName: 'collection', id: undefined, ...}\r\n   *\r\n   * The actual api base segment values are ignored. Only the number of segments matters.\r\n   * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\r\n   *\r\n   * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\r\n   */\n\n\n  BackendService.prototype.parseRequestUrl = function (url) {\n    try {\n      var loc = this.getLocation(url);\n      var drop = this.config.rootPath.length;\n      var urlRoot = '';\n\n      if (loc.host !== this.config.host) {\n        // url for a server on a different host!\n        // assume it's collection is actually here too.\n        drop = 1; // the leading slash\n\n        urlRoot = loc.protocol + '//' + loc.host + '/';\n      }\n\n      var path = loc.path.substring(drop);\n      var pathSegments = path.split('/');\n      var segmentIx = 0; // apiBase: the front part of the path devoted to getting to the api route\n      // Assumes first path segment if no config.apiBase\n      // else ignores as many path segments as are in config.apiBase\n      // Does NOT care what the api base chars actually are.\n\n      var apiBase = void 0; // tslint:disable-next-line:triple-equals\n\n      if (this.config.apiBase == undefined) {\n        apiBase = pathSegments[segmentIx++];\n      } else {\n        apiBase = removeTrailingSlash(this.config.apiBase.trim());\n\n        if (apiBase) {\n          segmentIx = apiBase.split('/').length;\n        } else {\n          segmentIx = 0; // no api base at all; unwise but allowed.\n        }\n      }\n\n      apiBase += '/';\n      var collectionName = pathSegments[segmentIx++]; // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n\n      collectionName = collectionName && collectionName.split('.')[0];\n      var id = pathSegments[segmentIx++];\n      var query = this.createQueryMap(loc.query);\n      var resourceUrl = urlRoot + apiBase + collectionName + '/';\n      return {\n        apiBase: apiBase,\n        collectionName: collectionName,\n        id: id,\n        query: query,\n        resourceUrl: resourceUrl\n      };\n    } catch (err) {\n      var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\n      throw new Error(msg);\n    }\n  }; // Create entity\n  // Can update an existing entity too if post409 is false.\n\n\n  BackendService.prototype.post = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        req = _a.req,\n        resourceUrl = _a.resourceUrl,\n        url = _a.url;\n    var item = this.clone(this.getJsonBody(req)); // tslint:disable-next-line:triple-equals\n\n    if (item.id == undefined) {\n      try {\n        item.id = id || this.genId(collection, collectionName);\n      } catch (err) {\n        var emsg = err.message || '';\n\n        if (/id type is non-numeric/.test(emsg)) {\n          return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n        } else {\n          console.error(err);\n          return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\n        }\n      }\n    }\n\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n\n    if (existingIx === -1) {\n      collection.push(item);\n      headers.set('Location', resourceUrl + '/' + id);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    } else if (this.config.post409) {\n      return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\n    } else {\n      collection[existingIx] = item;\n      return this.config.post204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } : // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    }\n  }; // Update existing entity\n  // Can create an entity too if put404 is false.\n\n\n  BackendService.prototype.put = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        req = _a.req,\n        url = _a.url;\n    var item = this.clone(this.getJsonBody(req)); // tslint:disable-next-line:triple-equals\n\n    if (item.id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\n    }\n\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return this.config.put204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } : // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    } else if (this.config.put404) {\n      // item to update not found; use POST to create new item for this id.\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\n    } else {\n      // create new item for id not found\n      collection.push(item);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    }\n  };\n\n  BackendService.prototype.removeById = function (collection, id) {\n    var ix = this.indexOf(collection, id);\n\n    if (ix > -1) {\n      collection.splice(ix, 1);\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Tell your in-mem \"database\" to reset.\r\n   * returns Observable of the database because resetting it could be async\r\n   */\n\n\n  BackendService.prototype.resetDb = function (reqInfo) {\n    var _this = this;\n\n    this.dbReadySubject.next(false);\n    var db = this.inMemDbService.createDb(reqInfo);\n    var db$ = db instanceof Observable ? db : typeof db.then === 'function' ? from(db) : of(db);\n    db$.pipe(first()).subscribe(function (d) {\n      _this.db = d;\n\n      _this.dbReadySubject.next(true);\n    });\n    return this.dbReady;\n  };\n\n  return BackendService;\n}();\n\nexport { BackendService };","map":{"version":3,"sources":["C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/angular-in-memory-web-api/__ivy_ngcc__/backend.service.js"],"names":["Observable","BehaviorSubject","of","from","concatMap","first","getStatusText","isSuccess","STATUS","delayResponse","InMemoryBackendConfig","parseUri","removeTrailingSlash","BackendService","inMemDbService","config","requestInfoUtils","getRequestInfoUtils","loc","getLocation","host","rootPath","path","Object","assign","defineProperty","prototype","get","dbReadySubject","resetDb","asObservable","pipe","r","enumerable","configurable","handleRequest","req","_this","dbReady","handleRequest_","url","urlWithParams","parser","bind","parsed","parseRequestUrl","collectionName","collection","db","reqInfo","apiBase","headers","createHeaders","id","parseId","method","getRequestMethod","query","resourceUrl","utils","resOptions","test","commands","methodInterceptor","interceptorResponse","createResponse$","collectionHandler","passThruUnknownUrl","getPassThruBackend","handle","createErrorResponseOptions","NOT_FOUND","addDelay","response","d","delay","applyQuery","conditions","caseSensitive","caseSensitiveSearch","undefined","forEach","value","name","v","push","rx","RegExp","decodeURI","len","length","filter","row","ok","i","cond","methodName","fn","bodify","data","dataEncapsulation","clone","JSON","parse","stringify","post","put","delete","METHOD_NOT_ALLOWED","interceptor","command","toLowerCase","status","NO_CONTENT","OK","body","getJsonBody","passThruBackend","INTERNAL_SERVER_ERROR","message","error","resOptionsFactory","withDelay","resOptions$","createResponseOptions$","resp$","createResponse$fromResponseOptions$","responseObserver","err","statusText","e","next","complete","_a","exists","removeById","delete404","findById","find","item","genId","genIdDefault","isCollectionIdNumeric","Error","maxId","reduce","prev","Math","max","startsWith","doc","document","base","location","protocol","createPassThruBackend","getConfig","getDb","indexOf","findIndex","idNum","parseFloat","isNaN","drop","urlRoot","substring","pathSegments","split","segmentIx","trim","createQueryMap","msg","emsg","UNPROCESSABLE_ENTRY","console","BAD_REQUEST","existingIx","set","CREATED","post409","CONFLICT","post204","put204","put404","ix","splice","createDb","db$","then","subscribe"],"mappings":"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","sourcesContent":["import { Observable, BehaviorSubject, of, from } from 'rxjs';\r\nimport { concatMap, first } from 'rxjs/operators';\r\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\r\nimport { delayResponse } from './delay-response';\r\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\r\n/**\r\n * Base class for in-memory web api back-ends\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n */\r\nvar BackendService = /** @class */ (function () {\r\n    function BackendService(inMemDbService, config) {\r\n        if (config === void 0) { config = {}; }\r\n        this.inMemDbService = inMemDbService;\r\n        this.config = new InMemoryBackendConfig();\r\n        this.requestInfoUtils = this.getRequestInfoUtils();\r\n        var loc = this.getLocation('/');\r\n        this.config.host = loc.host; // default to app web server host\r\n        this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\r\n        Object.assign(this.config, config);\r\n    }\r\n    Object.defineProperty(BackendService.prototype, \"dbReady\", {\r\n        ////  protected /////\r\n        get: function () {\r\n            if (!this.dbReadySubject) {\r\n                // first time the service is called.\r\n                this.dbReadySubject = new BehaviorSubject(false);\r\n                this.resetDb();\r\n            }\r\n            return this.dbReadySubject.asObservable().pipe(first(function (r) { return r; }));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Process Request and return an Observable of Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'customers' collection\r\n     *   GET api/customers          // all customers\r\n     *   GET api/customers/42       // the character with id=42\r\n     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\r\n     *   GET api/customers.json/42  // ignores the \".json\"\r\n     *\r\n     * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\r\n     * Examples:\r\n     *     POST commands/resetDb,\r\n     *     GET/POST commands/config - get or (re)set the config\r\n     *\r\n     *   HTTP overrides:\r\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n     *     The request is forwarded to that method as in\r\n     *     `inMemDbService.get(requestInfo)`\r\n     *     which must return either an Observable of the response type\r\n     *     for this http library or null|undefined (which means \"keep processing\").\r\n     */\r\n    BackendService.prototype.handleRequest = function (req) {\r\n        var _this = this;\r\n        //  handle the request when there is an in-memory database\r\n        return this.dbReady.pipe(concatMap(function () { return _this.handleRequest_(req); }));\r\n    };\r\n    BackendService.prototype.handleRequest_ = function (req) {\r\n        var _this = this;\r\n        var url = req.urlWithParams ? req.urlWithParams : req.url;\r\n        // Try override parser\r\n        // If no override parser or it returns nothing, use default parser\r\n        var parser = this.bind('parseRequestUrl');\r\n        var parsed = (parser && parser(url, this.requestInfoUtils)) ||\r\n            this.parseRequestUrl(url);\r\n        var collectionName = parsed.collectionName;\r\n        var collection = this.db[collectionName];\r\n        var reqInfo = {\r\n            req: req,\r\n            apiBase: parsed.apiBase,\r\n            collection: collection,\r\n            collectionName: collectionName,\r\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\r\n            id: this.parseId(collection, collectionName, parsed.id),\r\n            method: this.getRequestMethod(req),\r\n            query: parsed.query,\r\n            resourceUrl: parsed.resourceUrl,\r\n            url: url,\r\n            utils: this.requestInfoUtils\r\n        };\r\n        var resOptions;\r\n        if (/commands\\/?$/i.test(reqInfo.apiBase)) {\r\n            return this.commands(reqInfo);\r\n        }\r\n        var methodInterceptor = this.bind(reqInfo.method);\r\n        if (methodInterceptor) {\r\n            // InMemoryDbService intercepts this HTTP method.\r\n            // if interceptor produced a response, return it.\r\n            // else InMemoryDbService chose not to intercept; continue processing.\r\n            var interceptorResponse = methodInterceptor(reqInfo);\r\n            if (interceptorResponse) {\r\n                return interceptorResponse;\r\n            }\r\n            ;\r\n        }\r\n        if (this.db[collectionName]) {\r\n            // request is for a known collection of the InMemoryDbService\r\n            return this.createResponse$(function () { return _this.collectionHandler(reqInfo); });\r\n        }\r\n        if (this.config.passThruUnknownUrl) {\r\n            // unknown collection; pass request thru to a \"real\" backend.\r\n            return this.getPassThruBackend().handle(req);\r\n        }\r\n        // 404 - can't handle this request\r\n        resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n        return this.createResponse$(function () { return resOptions; });\r\n    };\r\n    /**\r\n     * Add configured delay to response observable unless delay === 0\r\n     */\r\n    BackendService.prototype.addDelay = function (response) {\r\n        var d = this.config.delay;\r\n        return d === 0 ? response : delayResponse(response, d || 500);\r\n    };\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    BackendService.prototype.applyQuery = function (collection, query) {\r\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n        var conditions = [];\r\n        var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\r\n        query.forEach(function (value, name) {\r\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), caseSensitive) }); });\r\n        });\r\n        var len = conditions.length;\r\n        if (!len) {\r\n            return collection;\r\n        }\r\n        // AND the RegExp conditions\r\n        return collection.filter(function (row) {\r\n            var ok = true;\r\n            var i = len;\r\n            while (ok && i) {\r\n                i -= 1;\r\n                var cond = conditions[i];\r\n                ok = cond.rx.test(row[cond.name]);\r\n            }\r\n            return ok;\r\n        });\r\n    };\r\n    /**\r\n     * Get a method from the `InMemoryDbService` (if it exists), bound to that service\r\n     */\r\n    BackendService.prototype.bind = function (methodName) {\r\n        var fn = this.inMemDbService[methodName];\r\n        return fn ? fn.bind(this.inMemDbService) : undefined;\r\n    };\r\n    BackendService.prototype.bodify = function (data) {\r\n        return this.config.dataEncapsulation ? { data: data } : data;\r\n    };\r\n    BackendService.prototype.clone = function (data) {\r\n        return JSON.parse(JSON.stringify(data));\r\n    };\r\n    BackendService.prototype.collectionHandler = function (reqInfo) {\r\n        // const req = reqInfo.req;\r\n        var resOptions;\r\n        switch (reqInfo.method) {\r\n            case 'get':\r\n                resOptions = this.get(reqInfo);\r\n                break;\r\n            case 'post':\r\n                resOptions = this.post(reqInfo);\r\n                break;\r\n            case 'put':\r\n                resOptions = this.put(reqInfo);\r\n                break;\r\n            case 'delete':\r\n                resOptions = this.delete(reqInfo);\r\n                break;\r\n            default:\r\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n                break;\r\n        }\r\n        // If `inMemDbService.responseInterceptor` exists, let it morph the response options\r\n        var interceptor = this.bind('responseInterceptor');\r\n        return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\r\n    };\r\n    /**\r\n     * Commands reconfigure the in-memory web api service or extract information from it.\r\n     * Commands ignore the latency delay and respond ASAP.\r\n     *\r\n     * When the last segment of the `apiBase` path is \"commands\",\r\n     * the `collectionName` is the command.\r\n     *\r\n     * Example URLs:\r\n     *   commands/resetdb (POST) // Reset the \"database\" to its original state\r\n     *   commands/config (GET)   // Return this service's config object\r\n     *   commands/config (POST)  // Update the config (e.g. the delay)\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', undefined);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    BackendService.prototype.commands = function (reqInfo) {\r\n        var _this = this;\r\n        var command = reqInfo.collectionName.toLowerCase();\r\n        var method = reqInfo.method;\r\n        var resOptions = {\r\n            url: reqInfo.url\r\n        };\r\n        switch (command) {\r\n            case 'resetdb':\r\n                resOptions.status = STATUS.NO_CONTENT;\r\n                return this.resetDb(reqInfo).pipe(concatMap(function () { return _this.createResponse$(function () { return resOptions; }, false /* no latency delay */); }));\r\n            case 'config':\r\n                if (method === 'get') {\r\n                    resOptions.status = STATUS.OK;\r\n                    resOptions.body = this.clone(this.config);\r\n                    // any other HTTP method is assumed to be a config update\r\n                }\r\n                else {\r\n                    var body = this.getJsonBody(reqInfo.req);\r\n                    Object.assign(this.config, body);\r\n                    this.passThruBackend = undefined; // re-create when needed\r\n                    resOptions.status = STATUS.NO_CONTENT;\r\n                }\r\n                break;\r\n            default:\r\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n        }\r\n        return this.createResponse$(function () { return resOptions; }, false /* no latency delay */);\r\n    };\r\n    BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\r\n        return {\r\n            body: { error: \"\" + message },\r\n            url: url,\r\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\r\n            status: status\r\n        };\r\n    };\r\n    /**\r\n     * Create a cold response Observable from a factory for ResponseOptions\r\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n     * @param withDelay - if true (default), add simulated latency delay from configuration\r\n     */\r\n    BackendService.prototype.createResponse$ = function (resOptionsFactory, withDelay) {\r\n        if (withDelay === void 0) { withDelay = true; }\r\n        var resOptions$ = this.createResponseOptions$(resOptionsFactory);\r\n        var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\r\n        return withDelay ? this.addDelay(resp$) : resp$;\r\n    };\r\n    /**\r\n     * Create a cold Observable of ResponseOptions.\r\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n     */\r\n    BackendService.prototype.createResponseOptions$ = function (resOptionsFactory) {\r\n        var _this = this;\r\n        return new Observable(function (responseObserver) {\r\n            var resOptions;\r\n            try {\r\n                resOptions = resOptionsFactory();\r\n            }\r\n            catch (error) {\r\n                var err = error.message || error;\r\n                resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n            }\r\n            var status = resOptions.status;\r\n            try {\r\n                resOptions.statusText = getStatusText(status);\r\n            }\r\n            catch (e) { /* ignore failure */ }\r\n            if (isSuccess(status)) {\r\n                responseObserver.next(resOptions);\r\n                responseObserver.complete();\r\n            }\r\n            else {\r\n                responseObserver.error(resOptions);\r\n            }\r\n            return function () { }; // unsubscribe function\r\n        });\r\n    };\r\n    BackendService.prototype.delete = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, url = _a.url;\r\n        // tslint:disable-next-line:triple-equals\r\n        if (id == undefined) {\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n        }\r\n        var exists = this.removeById(collection, id);\r\n        return {\r\n            headers: headers,\r\n            status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\r\n        };\r\n    };\r\n    /**\r\n     * Find first instance of item in collection by `item.id`\r\n     * @param collection\r\n     * @param id\r\n     */\r\n    BackendService.prototype.findById = function (collection, id) {\r\n        return collection.find(function (item) { return item.id === id; });\r\n    };\r\n    /**\r\n     * Generate the next available id for item in this collection\r\n     * Use method from `inMemDbService` if it exists and returns a value,\r\n     * else delegates to `genIdDefault`.\r\n     * @param collection - collection of items with `id` key property\r\n     */\r\n    BackendService.prototype.genId = function (collection, collectionName) {\r\n        var genId = this.bind('genId');\r\n        if (genId) {\r\n            var id = genId(collection, collectionName);\r\n            // tslint:disable-next-line:triple-equals\r\n            if (id != undefined) {\r\n                return id;\r\n            }\r\n        }\r\n        return this.genIdDefault(collection, collectionName);\r\n    };\r\n    /**\r\n     * Default generator of the next available id for item in this collection\r\n     * This default implementation works only for numeric ids.\r\n     * @param collection - collection of items with `id` key property\r\n     * @param collectionName - name of the collection\r\n     */\r\n    BackendService.prototype.genIdDefault = function (collection, collectionName) {\r\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\r\n            throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\r\n        }\r\n        var maxId = 0;\r\n        collection.reduce(function (prev, item) {\r\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n        }, undefined);\r\n        return maxId + 1;\r\n    };\r\n    BackendService.prototype.get = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, query = _a.query, url = _a.url;\r\n        var data = collection;\r\n        // tslint:disable-next-line:triple-equals\r\n        if (id != undefined && id !== '') {\r\n            data = this.findById(collection, id);\r\n        }\r\n        else if (query) {\r\n            data = this.applyQuery(collection, query);\r\n        }\r\n        if (!data) {\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n        }\r\n        return {\r\n            body: this.bodify(this.clone(data)),\r\n            headers: headers,\r\n            status: STATUS.OK\r\n        };\r\n    };\r\n    /**\r\n     * Get location info from a url, even on server where `document` is not defined\r\n     */\r\n    BackendService.prototype.getLocation = function (url) {\r\n        if (!url.startsWith('http')) {\r\n            // get the document iff running in browser\r\n            var doc = (typeof document === 'undefined') ? undefined : document;\r\n            // add host info to url before parsing.  Use a fake host when not in browser.\r\n            var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\r\n            url = url.startsWith('/') ? base + url : base + '/' + url;\r\n        }\r\n        return parseUri(url);\r\n    };\r\n    ;\r\n    /**\r\n     * get or create the function that passes unhandled requests\r\n     * through to the \"real\" backend.\r\n     */\r\n    BackendService.prototype.getPassThruBackend = function () {\r\n        return this.passThruBackend ?\r\n            this.passThruBackend :\r\n            this.passThruBackend = this.createPassThruBackend();\r\n    };\r\n    /**\r\n     * Get utility methods from this service instance.\r\n     * Useful within an HTTP method override\r\n     */\r\n    BackendService.prototype.getRequestInfoUtils = function () {\r\n        var _this = this;\r\n        return {\r\n            createResponse$: this.createResponse$.bind(this),\r\n            findById: this.findById.bind(this),\r\n            isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\r\n            getConfig: function () { return _this.config; },\r\n            getDb: function () { return _this.db; },\r\n            getJsonBody: this.getJsonBody.bind(this),\r\n            getLocation: this.getLocation.bind(this),\r\n            getPassThruBackend: this.getPassThruBackend.bind(this),\r\n            parseRequestUrl: this.parseRequestUrl.bind(this),\r\n        };\r\n    };\r\n    BackendService.prototype.indexOf = function (collection, id) {\r\n        return collection.findIndex(function (item) { return item.id === id; });\r\n    };\r\n    /** Parse the id as a number. Return original value if not a number. */\r\n    BackendService.prototype.parseId = function (collection, collectionName, id) {\r\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\r\n            // Can't confirm that `id` is a numeric type; don't parse as a number\r\n            // or else `'42'` -> `42` and _get by id_ fails.\r\n            return id;\r\n        }\r\n        var idNum = parseFloat(id);\r\n        return isNaN(idNum) ? id : idNum;\r\n    };\r\n    /**\r\n     * return true if can determine that the collection's `item.id` is a number\r\n     * This implementation can't tell if the collection is empty so it assumes NO\r\n     * */\r\n    BackendService.prototype.isCollectionIdNumeric = function (collection, collectionName) {\r\n        // collectionName not used now but override might maintain collection type information\r\n        // so that it could know the type of the `id` even when the collection is empty.\r\n        return !!(collection && collection[0]) && typeof collection[0].id === 'number';\r\n    };\r\n    /**\r\n     * Parses the request URL into a `ParsedRequestUrl` object.\r\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n     *\r\n     * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\r\n     *   When apiBase=undefined and url='http://localhost/api/collection/42'\r\n     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\r\n     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\r\n     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\r\n     *   When apiBase='/' and url='http://localhost/collection'\r\n     *     {base: '/', collectionName: 'collection', id: undefined, ...}\r\n     *\r\n     * The actual api base segment values are ignored. Only the number of segments matters.\r\n     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\r\n     *\r\n     * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\r\n     */\r\n    BackendService.prototype.parseRequestUrl = function (url) {\r\n        try {\r\n            var loc = this.getLocation(url);\r\n            var drop = this.config.rootPath.length;\r\n            var urlRoot = '';\r\n            if (loc.host !== this.config.host) {\r\n                // url for a server on a different host!\r\n                // assume it's collection is actually here too.\r\n                drop = 1; // the leading slash\r\n                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n            }\r\n            var path = loc.path.substring(drop);\r\n            var pathSegments = path.split('/');\r\n            var segmentIx = 0;\r\n            // apiBase: the front part of the path devoted to getting to the api route\r\n            // Assumes first path segment if no config.apiBase\r\n            // else ignores as many path segments as are in config.apiBase\r\n            // Does NOT care what the api base chars actually are.\r\n            var apiBase = void 0;\r\n            // tslint:disable-next-line:triple-equals\r\n            if (this.config.apiBase == undefined) {\r\n                apiBase = pathSegments[segmentIx++];\r\n            }\r\n            else {\r\n                apiBase = removeTrailingSlash(this.config.apiBase.trim());\r\n                if (apiBase) {\r\n                    segmentIx = apiBase.split('/').length;\r\n                }\r\n                else {\r\n                    segmentIx = 0; // no api base at all; unwise but allowed.\r\n                }\r\n            }\r\n            apiBase += '/';\r\n            var collectionName = pathSegments[segmentIx++];\r\n            // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\r\n            collectionName = collectionName && collectionName.split('.')[0];\r\n            var id = pathSegments[segmentIx++];\r\n            var query = this.createQueryMap(loc.query);\r\n            var resourceUrl = urlRoot + apiBase + collectionName + '/';\r\n            return { apiBase: apiBase, collectionName: collectionName, id: id, query: query, resourceUrl: resourceUrl };\r\n        }\r\n        catch (err) {\r\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n            throw new Error(msg);\r\n        }\r\n    };\r\n    // Create entity\r\n    // Can update an existing entity too if post409 is false.\r\n    BackendService.prototype.post = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl, url = _a.url;\r\n        var item = this.clone(this.getJsonBody(req));\r\n        // tslint:disable-next-line:triple-equals\r\n        if (item.id == undefined) {\r\n            try {\r\n                item.id = id || this.genId(collection, collectionName);\r\n            }\r\n            catch (err) {\r\n                var emsg = err.message || '';\r\n                if (/id type is non-numeric/.test(emsg)) {\r\n                    return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\r\n                }\r\n                else {\r\n                    console.error(err);\r\n                    return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\r\n                }\r\n            }\r\n        }\r\n        if (id && id !== item.id) {\r\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\r\n        }\r\n        else {\r\n            id = item.id;\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        var body = this.bodify(item);\r\n        if (existingIx === -1) {\r\n            collection.push(item);\r\n            headers.set('Location', resourceUrl + '/' + id);\r\n            return { headers: headers, body: body, status: STATUS.CREATED };\r\n        }\r\n        else if (this.config.post409) {\r\n            return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\r\n        }\r\n        else {\r\n            collection[existingIx] = item;\r\n            return this.config.post204 ?\r\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\r\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n        }\r\n    };\r\n    // Update existing entity\r\n    // Can create an entity too if put404 is false.\r\n    BackendService.prototype.put = function (_a) {\r\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, url = _a.url;\r\n        var item = this.clone(this.getJsonBody(req));\r\n        // tslint:disable-next-line:triple-equals\r\n        if (item.id == undefined) {\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n        }\r\n        if (id && id !== item.id) {\r\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\r\n        }\r\n        else {\r\n            id = item.id;\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        var body = this.bodify(item);\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            return this.config.put204 ?\r\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\r\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n        }\r\n        else if (this.config.put404) {\r\n            // item to update not found; use POST to create new item for this id.\r\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\r\n        }\r\n        else {\r\n            // create new item for id not found\r\n            collection.push(item);\r\n            return { headers: headers, body: body, status: STATUS.CREATED };\r\n        }\r\n    };\r\n    BackendService.prototype.removeById = function (collection, id) {\r\n        var ix = this.indexOf(collection, id);\r\n        if (ix > -1) {\r\n            collection.splice(ix, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Tell your in-mem \"database\" to reset.\r\n     * returns Observable of the database because resetting it could be async\r\n     */\r\n    BackendService.prototype.resetDb = function (reqInfo) {\r\n        var _this = this;\r\n        this.dbReadySubject.next(false);\r\n        var db = this.inMemDbService.createDb(reqInfo);\r\n        var db$ = db instanceof Observable ? db :\r\n            typeof db.then === 'function' ? from(db) :\r\n                of(db);\r\n        db$.pipe(first()).subscribe(function (d) {\r\n            _this.db = d;\r\n            _this.dbReadySubject.next(true);\r\n        });\r\n        return this.dbReady;\r\n    };\r\n    return BackendService;\r\n}());\r\nexport { BackendService };\r\n"]},"metadata":{},"sourceType":"module"}