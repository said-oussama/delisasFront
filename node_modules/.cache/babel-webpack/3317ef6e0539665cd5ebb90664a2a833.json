{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport parseDate from './parseDate'; // https://hexdocs.pm/xlsxir/number_styles.html\n\nvar BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 36, 45, 46, 47, 50, 57];\nexport default function getCellValue(value, type, _ref) {\n  var getInlineStringValue = _ref.getInlineStringValue,\n      getStyleId = _ref.getStyleId,\n      styles = _ref.styles,\n      values = _ref.values,\n      properties = _ref.properties,\n      options = _ref.options;\n\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n';\n  } // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n\n\n  switch (type) {\n    // If the cell contains formula string.\n    case 'str':\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n    // If the cell contains an \"inline\" (not \"shared\") string.\n\n    case 'inlineStr':\n      value = getInlineStringValue();\n\n      if (value === undefined) {\n        throw new Error(\"Unsupported \\\"inline string\\\" cell value structure\"); // : ${cellNode.textContent}`)\n      }\n\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n    // If the cell contains a \"shared\" string.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      value = values[parseInt(value)];\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n\n    case 'b':\n      value = value === '1' ? true : false;\n      break;\n    // Stub: blank stub cell that is ignored by data processing utilities.\n\n    case 'z':\n      value = undefined;\n      break;\n    // Error: `value` is a numeric code.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n\n    case 'e':\n      value = decodeError(value);\n      break;\n    // Date: a string to be parsed as a date.\n    // (usually a string in \"ISO 8601\" format)\n\n    case 'd':\n      if (value === undefined) {\n        break;\n      }\n\n      value = new Date(value);\n      break;\n\n    case 'n':\n      if (value === undefined) {\n        break;\n      }\n\n      value = parseFloat(value); // XLSX does have \"d\" type for dates, but it's not commonly used.\n      // Instead, spreadsheets prefer using \"n\" type for dates for some reason.\n      //\n      // In such cases, sometimes a \"date\" type could be heuristically detected\n      // by looking at such numeric value \"format\" and seeing if it's a date-specific one.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      //\n      // The list of generic numeric value \"formats\":\n      // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\n      //\n\n      var styleId = getStyleId();\n\n      if (styleId) {\n        // styleId = parseInt(styleId)\n        var style = styles[styleId];\n\n        if (!style) {\n          throw new Error(\"Cell style not found: \".concat(styleId));\n        }\n\n        if (BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 || options.dateFormat && style.numberFormat.template === options.dateFormat || options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template)) {\n          value = parseDate(value, properties);\n        }\n      }\n\n      break;\n\n    default:\n      throw new TypeError(\"Cell type not supported: \".concat(type));\n  } // Convert empty values to `null`.\n\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  return value;\n} // Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!';\n\n    case 0x07:\n      return '#DIV/0!';\n\n    case 0x0F:\n      return '#VALUE!';\n\n    case 0x17:\n      return '#REF!';\n\n    case 0x1D:\n      return '#NAME?';\n\n    case 0x24:\n      return '#NUM!';\n\n    case 0x2A:\n      return '#N/A';\n\n    case 0x2B:\n      return '#GETTING_DATA';\n\n    default:\n      // Such error code doesn't exist. I made it up.\n      return \"#ERROR_\".concat(errorCode);\n  }\n}\n\nfunction isDateTemplate(template) {\n  // Date format tokens could be in upper case or in lower case.\n  // There seems to be no single standard.\n  // So lowercase the template first.\n  template = template.toLowerCase();\n  var tokens = template.split(/\\W+/);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n    var token = _step.value;\n\n    if (DATE_TEMPLATE_TOKENS.indexOf(token) < 0) {\n      return false;\n    }\n  }\n\n  return true;\n} // These tokens could be in upper case or in lower case.\n// There seems to be no single standard, so using lower case.\n\n\nvar DATE_TEMPLATE_TOKENS = [// Seconds (min two digits). Example: \"05\".\n'ss', // Minutes (min two digits). Example: \"05\". Could also be \"Months\". Weird.\n'mm', // Hours. Example: \"1\".\n'h', // Hours (min two digits). Example: \"01\".\n'hh', // \"AM\" part of \"AM/PM\". Lowercased just in case.\n'am', // \"PM\" part of \"AM/PM\". Lowercased just in case.\n'pm', // Day. Example: \"1\"\n'd', // Day (min two digits). Example: \"01\"\n'dd', // Month (numeric). Example: \"1\".\n'm', // Month (numeric, min two digits). Example: \"01\". Could also be \"Minutes\". Weird.\n'mm', // Month (shortened month name). Example: \"Jan\".\n'mmm', // Month (full month name). Example: \"January\".\n'mmmm', // Two-digit year. Example: \"20\".\n'yy', // Full year. Example: \"2020\".\n'yyyy'];","map":{"version":3,"sources":["C:/Users/user/Desktop/fgs/front/fgs/node_modules/read-excel-file/modules/read/parseCellValue.js"],"names":["_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","parseDate","BUILT_IN_DATE_NUMBER_FORMAT_IDS","getCellValue","type","_ref","getInlineStringValue","getStyleId","styles","values","properties","options","trim","undefined","Error","parseInt","decodeError","Date","parseFloat","styleId","style","concat","indexOf","numberFormat","id","dateFormat","template","smartDateParser","isDateTemplate","errorCode","toLowerCase","tokens","split","_iterator","_step","token","DATE_TEMPLATE_TOKENS"],"mappings":"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","sourcesContent":["function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport parseDate from './parseDate'; // https://hexdocs.pm/xlsxir/number_styles.html\n\nvar BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 36, 45, 46, 47, 50, 57];\nexport default function getCellValue(value, type, _ref) {\n  var getInlineStringValue = _ref.getInlineStringValue,\n      getStyleId = _ref.getStyleId,\n      styles = _ref.styles,\n      values = _ref.values,\n      properties = _ref.properties,\n      options = _ref.options;\n\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n';\n  } // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n\n\n  switch (type) {\n    // If the cell contains formula string.\n    case 'str':\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n    // If the cell contains an \"inline\" (not \"shared\") string.\n\n    case 'inlineStr':\n      value = getInlineStringValue();\n\n      if (value === undefined) {\n        throw new Error(\"Unsupported \\\"inline string\\\" cell value structure\"); // : ${cellNode.textContent}`)\n      }\n\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n    // If the cell contains a \"shared\" string.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      value = values[parseInt(value)];\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n\n    case 'b':\n      value = value === '1' ? true : false;\n      break;\n    // Stub: blank stub cell that is ignored by data processing utilities.\n\n    case 'z':\n      value = undefined;\n      break;\n    // Error: `value` is a numeric code.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n\n    case 'e':\n      value = decodeError(value);\n      break;\n    // Date: a string to be parsed as a date.\n    // (usually a string in \"ISO 8601\" format)\n\n    case 'd':\n      if (value === undefined) {\n        break;\n      }\n\n      value = new Date(value);\n      break;\n\n    case 'n':\n      if (value === undefined) {\n        break;\n      }\n\n      value = parseFloat(value); // XLSX does have \"d\" type for dates, but it's not commonly used.\n      // Instead, spreadsheets prefer using \"n\" type for dates for some reason.\n      //\n      // In such cases, sometimes a \"date\" type could be heuristically detected\n      // by looking at such numeric value \"format\" and seeing if it's a date-specific one.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      //\n      // The list of generic numeric value \"formats\":\n      // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\n      //\n\n      var styleId = getStyleId();\n\n      if (styleId) {\n        // styleId = parseInt(styleId)\n        var style = styles[styleId];\n\n        if (!style) {\n          throw new Error(\"Cell style not found: \".concat(styleId));\n        }\n\n        if (BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 || options.dateFormat && style.numberFormat.template === options.dateFormat || options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template)) {\n          value = parseDate(value, properties);\n        }\n      }\n\n      break;\n\n    default:\n      throw new TypeError(\"Cell type not supported: \".concat(type));\n  } // Convert empty values to `null`.\n\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  return value;\n} // Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!';\n\n    case 0x07:\n      return '#DIV/0!';\n\n    case 0x0F:\n      return '#VALUE!';\n\n    case 0x17:\n      return '#REF!';\n\n    case 0x1D:\n      return '#NAME?';\n\n    case 0x24:\n      return '#NUM!';\n\n    case 0x2A:\n      return '#N/A';\n\n    case 0x2B:\n      return '#GETTING_DATA';\n\n    default:\n      // Such error code doesn't exist. I made it up.\n      return \"#ERROR_\".concat(errorCode);\n  }\n}\n\nfunction isDateTemplate(template) {\n  // Date format tokens could be in upper case or in lower case.\n  // There seems to be no single standard.\n  // So lowercase the template first.\n  template = template.toLowerCase();\n  var tokens = template.split(/\\W+/);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n    var token = _step.value;\n\n    if (DATE_TEMPLATE_TOKENS.indexOf(token) < 0) {\n      return false;\n    }\n  }\n\n  return true;\n} // These tokens could be in upper case or in lower case.\n// There seems to be no single standard, so using lower case.\n\n\nvar DATE_TEMPLATE_TOKENS = [// Seconds (min two digits). Example: \"05\".\n'ss', // Minutes (min two digits). Example: \"05\". Could also be \"Months\". Weird.\n'mm', // Hours. Example: \"1\".\n'h', // Hours (min two digits). Example: \"01\".\n'hh', // \"AM\" part of \"AM/PM\". Lowercased just in case.\n'am', // \"PM\" part of \"AM/PM\". Lowercased just in case.\n'pm', // Day. Example: \"1\"\n'd', // Day (min two digits). Example: \"01\"\n'dd', // Month (numeric). Example: \"1\".\n'm', // Month (numeric, min two digits). Example: \"01\". Could also be \"Minutes\". Weird.\n'mm', // Month (shortened month name). Example: \"Jan\".\n'mmm', // Month (full month name). Example: \"January\".\n'mmmm', // Two-digit year. Example: \"20\".\n'yy', // Full year. Example: \"2020\".\n'yyyy'];\n"]},"metadata":{},"sourceType":"module"}