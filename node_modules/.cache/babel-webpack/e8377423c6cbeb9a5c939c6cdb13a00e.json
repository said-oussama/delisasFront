{"ast":null,"code":"// Parses an Excel Date (\"serial\") into a\n// corresponding javascript Date in UTC+0 timezone.\n// (with time equal to 00:00)\n//\n// Doesn't account for leap seconds.\n// Therefore is not 100% correct.\n// But will do, I guess, since we're\n// not doing rocket science here.\n//\n// https://www.pcworld.com/article/3063622/software/mastering-excel-date-time-serial-numbers-networkdays-datevalue-and-more.html\n// \"If you need to calculate dates in your spreadsheets,\n//  Excel uses its own unique system, which it calls Serial Numbers\".\n//\nexport default function parseExcelDate(excelSerialDate, options) {\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\n  if (options && options.epoch1904) {\n    excelSerialDate += 1462;\n  } // \"Excel serial date\" is just\n  // the count of days since `01/01/1900`\n  // (seems that it may be even fractional).\n  //\n  // The count of days elapsed\n  // since `01/01/1900` (Excel epoch)\n  // till `01/01/1970` (Unix epoch).\n  // Accounts for leap years\n  // (19 of them, yielding 19 extra days).\n\n\n  var daysBeforeUnixEpoch = 70 * 365 + 19; // An hour, approximately, because a minute\n  // may be longer than 60 seconds, see \"leap seconds\".\n\n  var hour = 60 * 60 * 1000;\n  return new Date(Math.round((excelSerialDate - daysBeforeUnixEpoch) * 24 * hour));\n}","map":{"version":3,"sources":["C:/Users/NESRINE/Desktop/f/fgs/node_modules/read-excel-file/modules/read/parseDate.js"],"names":["parseExcelDate","excelSerialDate","options","epoch1904","daysBeforeUnixEpoch","hour","Date","Math","round"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,cAAT,CAAwBC,eAAxB,EAAyCC,OAAzC,EAAkD;AAC/D;AACA,MAAIA,OAAO,IAAIA,OAAO,CAACC,SAAvB,EAAkC;AAChCF,IAAAA,eAAe,IAAI,IAAnB;AACD,GAJ8D,CAI7D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAIG,mBAAmB,GAAG,KAAK,GAAL,GAAW,EAArC,CAf+D,CAetB;AACzC;;AAEA,MAAIC,IAAI,GAAG,KAAK,EAAL,GAAU,IAArB;AACA,SAAO,IAAIC,IAAJ,CAASC,IAAI,CAACC,KAAL,CAAW,CAACP,eAAe,GAAGG,mBAAnB,IAA0C,EAA1C,GAA+CC,IAA1D,CAAT,CAAP;AACD","sourcesContent":["// Parses an Excel Date (\"serial\") into a\n// corresponding javascript Date in UTC+0 timezone.\n// (with time equal to 00:00)\n//\n// Doesn't account for leap seconds.\n// Therefore is not 100% correct.\n// But will do, I guess, since we're\n// not doing rocket science here.\n//\n// https://www.pcworld.com/article/3063622/software/mastering-excel-date-time-serial-numbers-networkdays-datevalue-and-more.html\n// \"If you need to calculate dates in your spreadsheets,\n//  Excel uses its own unique system, which it calls Serial Numbers\".\n//\nexport default function parseExcelDate(excelSerialDate, options) {\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\n  if (options && options.epoch1904) {\n    excelSerialDate += 1462;\n  } // \"Excel serial date\" is just\n  // the count of days since `01/01/1900`\n  // (seems that it may be even fractional).\n  //\n  // The count of days elapsed\n  // since `01/01/1900` (Excel epoch)\n  // till `01/01/1970` (Unix epoch).\n  // Accounts for leap years\n  // (19 of them, yielding 19 extra days).\n\n\n  var daysBeforeUnixEpoch = 70 * 365 + 19; // An hour, approximately, because a minute\n  // may be longer than 60 seconds, see \"leap seconds\".\n\n  var hour = 60 * 60 * 1000;\n  return new Date(Math.round((excelSerialDate - daysBeforeUnixEpoch) * 24 * hour));\n}\n"]},"metadata":{},"sourceType":"module"}