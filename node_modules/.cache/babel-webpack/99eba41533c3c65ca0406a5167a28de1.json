{"ast":null,"code":"import JSZip from 'jszip';\n/**\r\n * Reads XLSX file in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\n\nexport default function unpackXlsxFile(file) {\n  var files = {};\n  return JSZip.loadAsync(file).then(function (zip) {\n    var files = [];\n    zip.forEach(function (relativePath, zipEntry) {\n      if (!zipEntry.dir) {\n        files.push(zipEntry.name);\n      }\n    });\n    var entries = {};\n    return Promise.all(files.map(function (file) {\n      return zip.file(file).async('string').then(function (content) {\n        return entries[file] = content;\n      });\n    })).then(function () {\n      return entries;\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/read-excel-file/modules/read/unpackXlsxFileBrowser.js"],"names":["JSZip","unpackXlsxFile","file","files","loadAsync","then","zip","forEach","relativePath","zipEntry","dir","push","name","entries","Promise","all","map","async","content"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC3C,MAAIC,KAAK,GAAG,EAAZ;AACA,SAAOH,KAAK,CAACI,SAAN,CAAgBF,IAAhB,EAAsBG,IAAtB,CAA2B,UAAUC,GAAV,EAAe;AAC/C,QAAIH,KAAK,GAAG,EAAZ;AACAG,IAAAA,GAAG,CAACC,OAAJ,CAAY,UAAUC,YAAV,EAAwBC,QAAxB,EAAkC;AAC5C,UAAI,CAACA,QAAQ,CAACC,GAAd,EAAmB;AACjBP,QAAAA,KAAK,CAACQ,IAAN,CAAWF,QAAQ,CAACG,IAApB;AACD;AACF,KAJD;AAKA,QAAIC,OAAO,GAAG,EAAd;AACA,WAAOC,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACa,GAAN,CAAU,UAAUd,IAAV,EAAgB;AAC3C,aAAOI,GAAG,CAACJ,IAAJ,CAASA,IAAT,EAAee,KAAf,CAAqB,QAArB,EAA+BZ,IAA/B,CAAoC,UAAUa,OAAV,EAAmB;AAC5D,eAAOL,OAAO,CAACX,IAAD,CAAP,GAAgBgB,OAAvB;AACD,OAFM,CAAP;AAGD,KAJkB,CAAZ,EAIHb,IAJG,CAIE,YAAY;AACnB,aAAOQ,OAAP;AACD,KANM,CAAP;AAOD,GAfM,CAAP;AAgBD","sourcesContent":["import JSZip from 'jszip';\n/**\r\n * Reads XLSX file in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\n\nexport default function unpackXlsxFile(file) {\n  var files = {};\n  return JSZip.loadAsync(file).then(function (zip) {\n    var files = [];\n    zip.forEach(function (relativePath, zipEntry) {\n      if (!zipEntry.dir) {\n        files.push(zipEntry.name);\n      }\n    });\n    var entries = {};\n    return Promise.all(files.map(function (file) {\n      return zip.file(file).async('string').then(function (content) {\n        return entries[file] = content;\n      });\n    })).then(function () {\n      return entries;\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}