{"ast":null,"code":"import xml from '../xml/xmlBrowser';\nimport unpackXlsxFile from './unpackXlsxFileBrowser';\nimport readXlsxFileContents from './readXlsxFileContents';\n/**\r\n * Reads XLSX file into a 2D array of cells in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @param  {object?} options\r\n * @param  {(number|string)?} options.sheet - Excel document sheet to read. Defaults to `1`. Will only read this sheet and skip others.\r\n * @return {Promise} Resolves to a 2D array of cells: an array of rows, each row being an array of cells.\r\n */\n\nexport default function readXlsxFile(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return unpackXlsxFile(file).then(function (entries) {\n    return readXlsxFileContents(entries, xml, options);\n  });\n}","map":{"version":3,"sources":["C:/Users/NESRINE/Desktop/f/fgs/node_modules/read-excel-file/modules/read/readXlsxFileBrowser.js"],"names":["xml","unpackXlsxFile","readXlsxFileContents","readXlsxFile","file","options","arguments","length","undefined","then","entries"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,mBAAhB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACzC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,SAAOL,cAAc,CAACG,IAAD,CAAd,CAAqBK,IAArB,CAA0B,UAAUC,OAAV,EAAmB;AAClD,WAAOR,oBAAoB,CAACQ,OAAD,EAAUV,GAAV,EAAeK,OAAf,CAA3B;AACD,GAFM,CAAP;AAGD","sourcesContent":["import xml from '../xml/xmlBrowser';\nimport unpackXlsxFile from './unpackXlsxFileBrowser';\nimport readXlsxFileContents from './readXlsxFileContents';\n/**\r\n * Reads XLSX file into a 2D array of cells in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @param  {object?} options\r\n * @param  {(number|string)?} options.sheet - Excel document sheet to read. Defaults to `1`. Will only read this sheet and skip others.\r\n * @return {Promise} Resolves to a 2D array of cells: an array of rows, each row being an array of cells.\r\n */\n\nexport default function readXlsxFile(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return unpackXlsxFile(file).then(function (entries) {\n    return readXlsxFileContents(entries, xml, options);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}