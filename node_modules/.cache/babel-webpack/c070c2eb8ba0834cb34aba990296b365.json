{"ast":null,"code":"import parseCellValue from './parseCellValue';\nimport { parseCellCoordinates } from './coordinates';\nimport { getCellValue, getCellInlineStringValue } from '../xml/xlsx'; // Example of a `<c/>`ell element:\n//\n// <c>\n//    <f>string</f> — formula.\n//    <v>string</v> — formula pre-computed value.\n//    <is>\n//       <t>string</t> — an `inlineStr` string (rather than a \"common string\" from a dictionary).\n//       <r>\n//          <rPr>\n//            ...\n//          </rPr>\n//          <t>string</t>\n//       </r>\n//       <rPh sb=\"1\" eb=\"1\">\n//          <t>string</t>\n//       </rPh>\n//       <phoneticPr fontId=\"1\"/>\n//    </is>\n//    <extLst>\n//       <ext>\n//          <!--any element-->\n//       </ext>\n//    </extLst>\n// </c>\n//\n\nexport default function parseCell(node, sheet, xml, values, styles, properties, options) {\n  var coords = parseCellCoordinates(node.getAttribute('r'));\n  var valueElement = getCellValue(sheet, node); // For `xpath`, `value` can be `undefined` while for native `DOMParser` it's `null`.\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here\n  // for uniform compatibility with both `xpath` and native `DOMParser`.\n\n  var value = valueElement && valueElement.textContent;\n  var type;\n\n  if (node.hasAttribute('t')) {\n    type = node.getAttribute('t');\n  }\n\n  return {\n    row: coords[0],\n    column: coords[1],\n    value: parseCellValue(value, type, {\n      getInlineStringValue: function getInlineStringValue() {\n        return getCellInlineStringValue(sheet, node);\n      },\n      getStyleId: function getStyleId() {\n        return node.getAttribute('s');\n      },\n      styles: styles,\n      values: values,\n      properties: properties,\n      options: options\n    })\n  };\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/fgs/front/fgs/node_modules/read-excel-file/modules/read/parseCell.js"],"names":["parseCellValue","parseCellCoordinates","getCellValue","getCellInlineStringValue","parseCell","node","sheet","xml","values","styles","properties","options","coords","getAttribute","valueElement","value","textContent","type","hasAttribute","row","column","getInlineStringValue","getStyleId"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,YAAT,EAAuBC,wBAAvB,QAAuD,aAAvD,C,CAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCC,MAArC,EAA6CC,MAA7C,EAAqDC,UAArD,EAAiEC,OAAjE,EAA0E;AACvF,MAAIC,MAAM,GAAGX,oBAAoB,CAACI,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAD,CAAjC;AACA,MAAIC,YAAY,GAAGZ,YAAY,CAACI,KAAD,EAAQD,IAAR,CAA/B,CAFuF,CAEzC;AAC9C;AACA;;AAEA,MAAIU,KAAK,GAAGD,YAAY,IAAIA,YAAY,CAACE,WAAzC;AACA,MAAIC,IAAJ;;AAEA,MAAIZ,IAAI,CAACa,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BD,IAAAA,IAAI,GAAGZ,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAP;AACD;;AAED,SAAO;AACLM,IAAAA,GAAG,EAAEP,MAAM,CAAC,CAAD,CADN;AAELQ,IAAAA,MAAM,EAAER,MAAM,CAAC,CAAD,CAFT;AAGLG,IAAAA,KAAK,EAAEf,cAAc,CAACe,KAAD,EAAQE,IAAR,EAAc;AACjCI,MAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,eAAOlB,wBAAwB,CAACG,KAAD,EAAQD,IAAR,CAA/B;AACD,OAHgC;AAIjCiB,MAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,eAAOjB,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAP;AACD,OANgC;AAOjCJ,MAAAA,MAAM,EAAEA,MAPyB;AAQjCD,MAAAA,MAAM,EAAEA,MARyB;AASjCE,MAAAA,UAAU,EAAEA,UATqB;AAUjCC,MAAAA,OAAO,EAAEA;AAVwB,KAAd;AAHhB,GAAP;AAgBD","sourcesContent":["import parseCellValue from './parseCellValue';\nimport { parseCellCoordinates } from './coordinates';\nimport { getCellValue, getCellInlineStringValue } from '../xml/xlsx'; // Example of a `<c/>`ell element:\n//\n// <c>\n//    <f>string</f> — formula.\n//    <v>string</v> — formula pre-computed value.\n//    <is>\n//       <t>string</t> — an `inlineStr` string (rather than a \"common string\" from a dictionary).\n//       <r>\n//          <rPr>\n//            ...\n//          </rPr>\n//          <t>string</t>\n//       </r>\n//       <rPh sb=\"1\" eb=\"1\">\n//          <t>string</t>\n//       </rPh>\n//       <phoneticPr fontId=\"1\"/>\n//    </is>\n//    <extLst>\n//       <ext>\n//          <!--any element-->\n//       </ext>\n//    </extLst>\n// </c>\n//\n\nexport default function parseCell(node, sheet, xml, values, styles, properties, options) {\n  var coords = parseCellCoordinates(node.getAttribute('r'));\n  var valueElement = getCellValue(sheet, node); // For `xpath`, `value` can be `undefined` while for native `DOMParser` it's `null`.\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here\n  // for uniform compatibility with both `xpath` and native `DOMParser`.\n\n  var value = valueElement && valueElement.textContent;\n  var type;\n\n  if (node.hasAttribute('t')) {\n    type = node.getAttribute('t');\n  }\n\n  return {\n    row: coords[0],\n    column: coords[1],\n    value: parseCellValue(value, type, {\n      getInlineStringValue: function getInlineStringValue() {\n        return getCellInlineStringValue(sheet, node);\n      },\n      getStyleId: function getStyleId() {\n        return node.getAttribute('s');\n      },\n      styles: styles,\n      values: values,\n      properties: properties,\n      options: options\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}