{"ast":null,"code":"import _get from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/regenerator\";\nimport { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar config = new InjectionToken('config');\nvar NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nvar INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nvar initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nvar timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nvar withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\n\nvar MaskApplierService = /*#__PURE__*/function () {\n  function MaskApplierService(_config) {\n    var _this = this;\n\n    _classCallCheck(this, MaskApplierService);\n\n    this._config = _config;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n\n    this._formatWithSeparators = function (str, thousandSeparatorChar, decimalChar, precision) {\n      var x = str.split(decimalChar);\n      var decimals = x.length > 1 ? \"\".concat(decimalChar).concat(x[1]) : '';\n      var res = x[0];\n\n      var separatorLimit = _this.separatorLimit.replace(/\\s/g, '');\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = \"-\".concat(res.slice(1, res.length).slice(0, separatorLimit.length));\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substr(0, precision + 1);\n    };\n\n    this.percentage = function (str) {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    this.getPrecision = function (maskExpression) {\n      var x = maskExpression.split('.');\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = function (inputValue) {\n      var _a, _b, _c;\n\n      for (var i = ((_a = _this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n        var substr = _this.suffix.substr(i, (_b = _this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(_this.suffix.substr(i - 1, (_c = _this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = function (inputValue, precision, decimalMarker) {\n      if (precision < Infinity) {\n        var precisionRegEx = new RegExp(_this._charToRegExpExpression(decimalMarker) + \"\\\\d{\".concat(precision, \"}.*$\"));\n        var precisionMatch = inputValue.match(precisionRegEx);\n\n        if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n          var diff = precisionMatch[0].length - 1 - precision;\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n\n  _createClass(MaskApplierService, [{\n    key: \"applyMaskWithPattern\",\n    value: function applyMaskWithPattern(inputValue, maskAndPattern) {\n      var _maskAndPattern = _slicedToArray(maskAndPattern, 2),\n          mask = _maskAndPattern[0],\n          customPattern = _maskAndPattern[1];\n\n      this.customPattern = customPattern;\n      return this.applyMask(inputValue, mask);\n    }\n  }, {\n    key: \"applyMask\",\n    value: function applyMask(inputValue, maskExpression) {\n      var _this2 = this;\n\n      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};\n\n      if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n        return '';\n      }\n\n      var cursor = 0;\n      var result = '';\n      var multi = false;\n      var backspaceShift = false;\n      var shift = 1;\n      var stepBack = false;\n\n      if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n        inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n      }\n\n      if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n        inputValue = this.checkAndRemoveSuffix(inputValue);\n      }\n\n      var inputArray = inputValue.toString().split('');\n\n      if (maskExpression === 'IP') {\n        this.ipError = !!(inputArray.filter(function (i) {\n          return i === '.';\n        }).length < 3 && inputArray.length < 7);\n        maskExpression = '099.099.099.099';\n      }\n\n      var arr = [];\n\n      for (var i = 0; i < inputValue.length; i++) {\n        if (inputValue[i].match('\\\\d')) {\n          arr.push(inputValue[i]);\n        }\n      }\n\n      if (maskExpression === 'CPF_CNPJ') {\n        this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n\n        if (arr.length > 11) {\n          maskExpression = '00.000.000/0000-00';\n        } else {\n          maskExpression = '000.000.000-00';\n        }\n      }\n\n      if (maskExpression.startsWith('percent')) {\n        if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n          inputValue = this._stripToDecimal(inputValue);\n          var precision = this.getPrecision(maskExpression);\n          inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n        }\n\n        if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n          var base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n          inputValue = \"\".concat(base).concat(inputValue.substring(inputValue.indexOf('.'), inputValue.length));\n        }\n\n        if (this.percentage(inputValue)) {\n          result = inputValue;\n        } else {\n          result = inputValue.substring(0, inputValue.length - 1);\n        }\n      } else if (maskExpression.startsWith('separator')) {\n        if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n          inputValue = this._stripToDecimal(inputValue);\n        }\n\n        inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker && !backspaced ? inputValue.slice(1, inputValue.length) : inputValue; // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n        //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n        var thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n        var decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n\n        var invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeperatorCharEscaped, '').replace(decimalMarkerEscaped, '');\n        var invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n        if (inputValue.match(invalidCharRegexp)) {\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n\n        var _precision = this.getPrecision(maskExpression);\n\n        inputValue = this.checkInputPrecision(inputValue, _precision, this.decimalMarker);\n        var strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n        result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, _precision);\n        var commaShift = result.indexOf(',') - inputValue.indexOf(',');\n        var shiftStep = result.length - inputValue.length;\n\n        if (shiftStep > 0 && result[position] !== ',') {\n          backspaceShift = true;\n          var _shift = 0;\n\n          do {\n            this._shift.add(position + _shift);\n\n            _shift++;\n          } while (_shift < shiftStep);\n        } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n          this._shift.clear();\n\n          backspaceShift = true;\n          shift = shiftStep;\n          position += shiftStep;\n\n          this._shift.add(position);\n        } else {\n          this._shift.clear();\n        }\n      } else {\n        for ( // tslint:disable-next-line\n        var _i = 0, inputSymbol = inputArray[0]; _i < inputArray.length; _i++, inputSymbol = inputArray[_i]) {\n          if (cursor === maskExpression.length) {\n            break;\n          }\n\n          if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n            result += inputSymbol;\n            cursor += 2;\n          } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n            result += inputSymbol;\n            cursor += 3;\n            multi = false;\n          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n            result += inputSymbol;\n            multi = true;\n          } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n            result += inputSymbol;\n            cursor += 3;\n          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n            if (maskExpression[cursor] === 'H') {\n              if (Number(inputSymbol) > 2) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 'h') {\n              if (result === '2' && Number(inputSymbol) > 3) {\n                cursor += 1;\n                _i--;\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 'm') {\n              if (Number(inputSymbol) > 5) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 's') {\n              if (Number(inputSymbol) > 5) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            var daysCount = 31;\n\n            if (maskExpression[cursor] === 'd') {\n              if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 'M') {\n              var monthsCount = 12; // mask without day\n\n              var withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input\n\n              var day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input\n\n              var day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data\n\n              var day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n              var day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n              if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            result += inputSymbol;\n            cursor++;\n          } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n            result += maskExpression[cursor];\n            cursor++;\n\n            this._shiftStep(maskExpression, cursor, inputArray.length);\n\n            _i--;\n          } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n            if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00') {\n              result += inputArray[cursor];\n            }\n\n            cursor++;\n            _i--;\n          } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n            cursor += 3;\n            result += inputSymbol;\n          } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n            cursor += 3;\n            result += inputSymbol;\n          } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n            stepBack = true;\n          }\n        }\n      }\n\n      if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n        result += maskExpression[maskExpression.length - 1];\n      }\n\n      var newPosition = position + 1;\n\n      while (this._shift.has(newPosition)) {\n        shift++;\n        newPosition++;\n      }\n\n      var actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n\n      if (stepBack) {\n        actualShift--;\n      }\n\n      cb(actualShift, backspaceShift);\n\n      if (shift < 0) {\n        this._shift.clear();\n      }\n\n      var onlySpecial = false;\n\n      if (backspaced) {\n        onlySpecial = inputArray.every(function (char) {\n          return _this2.maskSpecialCharacters.includes(char);\n        });\n      }\n\n      var res = \"\".concat(this.prefix).concat(onlySpecial ? '' : result).concat(this.suffix);\n\n      if (result.length === 0) {\n        res = \"\".concat(this.prefix).concat(result);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"_findSpecialChar\",\n    value: function _findSpecialChar(inputSymbol) {\n      return this.maskSpecialCharacters.find(function (val) {\n        return val === inputSymbol;\n      });\n    }\n  }, {\n    key: \"_checkSymbolMask\",\n    value: function _checkSymbolMask(inputSymbol, maskSymbol) {\n      this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n      return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n  }, {\n    key: \"_stripToDecimal\",\n    value: function _stripToDecimal(str) {\n      var _this3 = this;\n\n      return str.split('').filter(function (i, idx) {\n        return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && _this3.allowNegativeNumbers;\n      }).join('');\n    }\n  }, {\n    key: \"_charToRegExpExpression\",\n    value: function _charToRegExpExpression(char) {\n      if (char) {\n        var charsToEscape = '[\\\\^$.|?*+()';\n        return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n      }\n\n      return char;\n    }\n  }, {\n    key: \"_shiftStep\",\n    value: function _shiftStep(maskExpression, cursor, inputLength) {\n      var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n      this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n  }]);\n\n  return MaskApplierService;\n}();\n\nMaskApplierService.ɵfac = function MaskApplierService_Factory(t) {\n  return new (t || MaskApplierService)(ɵngcc0.ɵɵinject(config));\n};\n\nMaskApplierService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MaskApplierService,\n  factory: MaskApplierService.ɵfac\n});\n\nMaskApplierService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [config]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskApplierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, null);\n})();\n\nvar MaskService = /*#__PURE__*/function (_MaskApplierService) {\n  _inherits(MaskService, _MaskApplierService);\n\n  var _super = _createSuper(MaskService);\n\n  function MaskService(document, _config, _elementRef, _renderer) {\n    var _this4;\n\n    _classCallCheck(this, MaskService);\n\n    _this4 = _super.call(this, _config);\n    _this4.document = document;\n    _this4._config = _config;\n    _this4._elementRef = _elementRef;\n    _this4._renderer = _renderer;\n    _this4.maskExpression = '';\n    _this4.isNumberValue = false;\n    _this4.placeHolderCharacter = '_';\n    _this4.maskIsShown = '';\n    _this4.selStart = null;\n    _this4.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    _this4.writingValue = false;\n    _this4.maskChanged = false;\n\n    _this4.onChange = function (_) {};\n\n    return _this4;\n  } // tslint:disable-next-line:cyclomatic-complexity\n\n\n  _createClass(MaskService, [{\n    key: \"applyMask\",\n    value: function applyMask(inputValue, maskExpression) {\n      var _this5 = this;\n\n      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};\n\n      if (!maskExpression) {\n        return inputValue;\n      }\n\n      this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\n      if (this.maskExpression === 'IP' && this.showMaskTyped) {\n        this.maskIsShown = this.showMaskInInput(inputValue || '#');\n      }\n\n      if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n        this.maskIsShown = this.showMaskInInput(inputValue || '#');\n      }\n\n      if (!inputValue && this.showMaskTyped) {\n        this.formControlResult(this.prefix);\n        return this.prefix + this.maskIsShown;\n      }\n\n      var getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n      var newInputValue = '';\n\n      if (this.hiddenInput && !this.writingValue) {\n        var actualResult = this.actualValue.split(''); // tslint:disable no-unused-expression\n\n        inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = []; // tslint:enable no-unused-expression\n\n        newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n      }\n\n      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n\n      var result = _get(_getPrototypeOf(MaskService.prototype), \"applyMask\", this).call(this, newInputValue, maskExpression, position, justPasted, backspaced, cb);\n\n      this.actualValue = this.getActualValue(result); // handle some separator implications:\n      // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n      if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n        this.decimalMarker = ',';\n      } // b) remove decimal marker from list of special characters to mask\n\n\n      if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n        this.maskSpecialCharacters = this.maskSpecialCharacters.filter(function (item) {\n          return item !== _this5.decimalMarker;\n        });\n      }\n\n      this.formControlResult(result);\n\n      if (!this.showMaskTyped) {\n        if (this.hiddenInput) {\n          return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n        }\n\n        return result;\n      }\n\n      var resLen = result.length;\n      var prefNmask = this.prefix + this.maskIsShown;\n\n      if (this.maskExpression.includes('H')) {\n        var countSkipedSymbol = this._numberSkipedSymbols(result);\n\n        return result + prefNmask.slice(resLen + countSkipedSymbol);\n      } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n        return result + prefNmask;\n      }\n\n      return result + prefNmask.slice(resLen);\n    } // get the number of characters that were shifted\n\n  }, {\n    key: \"_numberSkipedSymbols\",\n    value: function _numberSkipedSymbols(value) {\n      var regex = /(^|\\D)(\\d\\D)/g;\n      var match = regex.exec(value);\n      var countSkipedSymbol = 0;\n\n      while (match != null) {\n        countSkipedSymbol += 1;\n        match = regex.exec(value);\n      }\n\n      return countSkipedSymbol;\n    }\n  }, {\n    key: \"applyValueChanges\",\n    value: function applyValueChanges() {\n      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var justPasted = arguments.length > 1 ? arguments[1] : undefined;\n      var backspaced = arguments.length > 2 ? arguments[2] : undefined;\n      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n      var formElement = this._elementRef.nativeElement;\n      formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n      if (formElement === this.document.activeElement) {\n        return;\n      }\n\n      this.clearIfNotMatchFn();\n    }\n  }, {\n    key: \"hideInput\",\n    value: function hideInput(inputValue, maskExpression) {\n      var _this6 = this;\n\n      return inputValue.split('').map(function (curr, index) {\n        if (_this6.maskAvailablePatterns && _this6.maskAvailablePatterns[maskExpression[index]] && _this6.maskAvailablePatterns[maskExpression[index]].symbol) {\n          return _this6.maskAvailablePatterns[maskExpression[index]].symbol;\n        }\n\n        return curr;\n      }).join('');\n    } // this function is not necessary, it checks result against maskExpression\n\n  }, {\n    key: \"getActualValue\",\n    value: function getActualValue(res) {\n      var _this7 = this;\n\n      var compare = res.split('').filter(function (symbol, i) {\n        return _this7._checkSymbolMask(symbol, _this7.maskExpression[i]) || _this7.maskSpecialCharacters.includes(_this7.maskExpression[i]) && symbol === _this7.maskExpression[i];\n      });\n\n      if (compare.join('') === res) {\n        return compare.join('');\n      }\n\n      return res;\n    }\n  }, {\n    key: \"shiftTypedSymbols\",\n    value: function shiftTypedSymbols(inputValue) {\n      var _this8 = this;\n\n      var symbolToReplace = '';\n      var newInputValue = inputValue && inputValue.split('').map(function (currSymbol, index) {\n        if (_this8.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== _this8.maskExpression[index + 1]) {\n          symbolToReplace = currSymbol;\n          return inputValue[index + 1];\n        }\n\n        if (symbolToReplace.length) {\n          var replaceSymbol = symbolToReplace;\n          symbolToReplace = '';\n          return replaceSymbol;\n        }\n\n        return currSymbol;\n      }) || [];\n      return newInputValue.join('');\n    }\n  }, {\n    key: \"showMaskInInput\",\n    value: function showMaskInInput(inputVal) {\n      if (this.showMaskTyped && !!this.shownMaskExpression) {\n        if (this.maskExpression.length !== this.shownMaskExpression.length) {\n          throw new Error('Mask expression must match mask placeholder length');\n        } else {\n          return this.shownMaskExpression;\n        }\n      } else if (this.showMaskTyped) {\n        if (inputVal) {\n          if (this.maskExpression === 'IP') {\n            return this._checkForIp(inputVal);\n          }\n\n          if (this.maskExpression === 'CPF_CNPJ') {\n            return this._checkForCpfCnpj(inputVal);\n          }\n        }\n\n        return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n      }\n\n      return '';\n    }\n  }, {\n    key: \"clearIfNotMatchFn\",\n    value: function clearIfNotMatchFn() {\n      var formElement = this._elementRef.nativeElement;\n\n      if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n        this.formElementProperty = ['value', ''];\n        this.applyMask(formElement.value, this.maskExpression);\n      }\n    }\n  }, {\n    key: \"formElementProperty\",\n    set: function set(_ref) {\n      var _this9 = this;\n\n      var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          value = _ref2[1];\n\n      Promise.resolve().then(function () {\n        return _this9._renderer.setProperty(_this9._elementRef.nativeElement, name, value);\n      });\n    }\n  }, {\n    key: \"checkSpecialCharAmount\",\n    value: function checkSpecialCharAmount(mask) {\n      var _this10 = this;\n\n      var chars = mask.split('').filter(function (item) {\n        return _this10._findSpecialChar(item);\n      });\n      return chars.length;\n    }\n  }, {\n    key: \"removeMask\",\n    value: function removeMask(inputValue) {\n      return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n  }, {\n    key: \"_checkForIp\",\n    value: function _checkForIp(inputVal) {\n      if (inputVal === '#') {\n        return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n      }\n\n      var arr = [];\n\n      for (var i = 0; i < inputVal.length; i++) {\n        if (inputVal[i].match('\\\\d')) {\n          arr.push(inputVal[i]);\n        }\n      }\n\n      if (arr.length <= 3) {\n        return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n      }\n\n      if (arr.length > 3 && arr.length <= 6) {\n        return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n      }\n\n      if (arr.length > 6 && arr.length <= 9) {\n        return this.placeHolderCharacter;\n      }\n\n      if (arr.length > 9 && arr.length <= 12) {\n        return '';\n      }\n\n      return '';\n    }\n  }, {\n    key: \"_checkForCpfCnpj\",\n    value: function _checkForCpfCnpj(inputVal) {\n      var cpf = \"\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"-\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);\n      var cnpj = \"\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"/\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"-\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);\n\n      if (inputVal === '#') {\n        return cpf;\n      }\n\n      var arr = [];\n\n      for (var i = 0; i < inputVal.length; i++) {\n        if (inputVal[i].match('\\\\d')) {\n          arr.push(inputVal[i]);\n        }\n      }\n\n      if (arr.length <= 3) {\n        return cpf.slice(arr.length, cpf.length);\n      }\n\n      if (arr.length > 3 && arr.length <= 6) {\n        return cpf.slice(arr.length + 1, cpf.length);\n      }\n\n      if (arr.length > 6 && arr.length <= 9) {\n        return cpf.slice(arr.length + 2, cpf.length);\n      }\n\n      if (arr.length > 9 && arr.length < 11) {\n        return cpf.slice(arr.length + 3, cpf.length);\n      }\n\n      if (arr.length === 11) {\n        return '';\n      }\n\n      if (arr.length === 12) {\n        if (inputVal.length === 17) {\n          return cnpj.slice(16, cnpj.length);\n        }\n\n        return cnpj.slice(15, cnpj.length);\n      }\n\n      if (arr.length > 12 && arr.length <= 14) {\n        return cnpj.slice(arr.length + 4, cnpj.length);\n      }\n\n      return '';\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n\n  }, {\n    key: \"formControlResult\",\n    value: function formControlResult(inputValue) {\n      if (this.writingValue || this.maskChanged) {\n        this.maskChanged = false;\n        return;\n      }\n\n      if (Array.isArray(this.dropSpecialCharacters)) {\n        this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n      } else if (this.dropSpecialCharacters) {\n        this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n      } else {\n        this.onChange(this._removeSuffix(inputValue));\n      }\n    }\n  }, {\n    key: \"_toNumber\",\n    value: function _toNumber(value) {\n      if (!this.isNumberValue || value === '') {\n        return value;\n      }\n\n      var num = Number(value);\n      return Number.isNaN(num) ? value : num;\n    }\n  }, {\n    key: \"_removeMask\",\n    value: function _removeMask(value, specialCharactersForRemove) {\n      return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n  }, {\n    key: \"_removePrefix\",\n    value: function _removePrefix(value) {\n      if (!this.prefix) {\n        return value;\n      }\n\n      return value ? value.replace(this.prefix, '') : value;\n    }\n  }, {\n    key: \"_removeSuffix\",\n    value: function _removeSuffix(value) {\n      if (!this.suffix) {\n        return value;\n      }\n\n      return value ? value.replace(this.suffix, '') : value;\n    }\n  }, {\n    key: \"_retrieveSeparatorValue\",\n    value: function _retrieveSeparatorValue(result) {\n      return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n  }, {\n    key: \"_regExpForRemove\",\n    value: function _regExpForRemove(specialCharactersForRemove) {\n      return new RegExp(specialCharactersForRemove.map(function (item) {\n        return \"\\\\\".concat(item);\n      }).join('|'), 'gi');\n    }\n  }, {\n    key: \"_checkSymbols\",\n    value: function _checkSymbols(result) {\n      if (result === '') {\n        return result;\n      }\n\n      var separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n      var separatorValue = this._retrieveSeparatorValue(result);\n\n      if (this.decimalMarker !== '.') {\n        separatorValue = separatorValue.replace(this.decimalMarker, '.');\n      }\n\n      if (!this.isNumberValue) {\n        return separatorValue;\n      }\n\n      if (separatorPrecision) {\n        if (result === this.decimalMarker) {\n          return null;\n        }\n\n        return this._checkPrecision(this.maskExpression, separatorValue);\n      } else {\n        return Number(separatorValue);\n      }\n    } // TODO should think about helpers or separting decimal precision to own property\n\n  }, {\n    key: \"_retrieveSeparatorPrecision\",\n    value: function _retrieveSeparatorPrecision(maskExpretion) {\n      var matcher = maskExpretion.match(new RegExp(\"^separator\\\\.([^d]*)\"));\n      return matcher ? Number(matcher[1]) : null;\n    }\n  }, {\n    key: \"_checkPrecision\",\n    value: function _checkPrecision(separatorExpression, separatorValue) {\n      if (separatorExpression.indexOf('2') > 0) {\n        return Number(separatorValue).toFixed(2);\n      }\n\n      return Number(separatorValue);\n    }\n  }]);\n\n  return MaskService;\n}(MaskApplierService);\n\nMaskService.ɵfac = function MaskService_Factory(t) {\n  return new (t || MaskService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(config), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2));\n};\n\nMaskService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MaskService,\n  factory: MaskService.ɵfac\n});\n\nMaskService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [config]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, null);\n})(); // tslint:disable deprecation\n// tslint:disable no-input-rename\n\n\nvar MaskDirective = /*#__PURE__*/function () {\n  function MaskDirective(document, _maskService, _config) {\n    _classCallCheck(this, MaskDirective);\n\n    this.document = document;\n    this._maskService = _maskService;\n    this._config = _config;\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n\n    this.onChange = function (_) {};\n\n    this.onTouch = function () {};\n  }\n\n  _createClass(MaskDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var maskExpression = changes.maskExpression,\n          specialCharacters = changes.specialCharacters,\n          patterns = changes.patterns,\n          prefix = changes.prefix,\n          suffix = changes.suffix,\n          thousandSeparator = changes.thousandSeparator,\n          decimalMarker = changes.decimalMarker,\n          dropSpecialCharacters = changes.dropSpecialCharacters,\n          hiddenInput = changes.hiddenInput,\n          showMaskTyped = changes.showMaskTyped,\n          placeHolderCharacter = changes.placeHolderCharacter,\n          shownMaskExpression = changes.shownMaskExpression,\n          showTemplate = changes.showTemplate,\n          clearIfNotMatch = changes.clearIfNotMatch,\n          validation = changes.validation,\n          separatorLimit = changes.separatorLimit,\n          allowNegativeNumbers = changes.allowNegativeNumbers,\n          leadZeroDateTime = changes.leadZeroDateTime;\n\n      if (maskExpression) {\n        if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n          this._maskService.maskChanged = true;\n        }\n\n        this._maskValue = maskExpression.currentValue || '';\n\n        if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n          this._maskExpressionArray = maskExpression.currentValue.split('||').sort(function (a, b) {\n            return a.length - b.length;\n          });\n          this._maskValue = this._maskExpressionArray[0];\n          this.maskExpression = this._maskExpressionArray[0];\n          this._maskService.maskExpression = this._maskExpressionArray[0];\n        }\n      }\n\n      if (specialCharacters) {\n        if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n          return;\n        } else {\n          this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n        }\n      } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n      if (patterns && patterns.currentValue) {\n        this._maskService.maskAvailablePatterns = patterns.currentValue;\n      }\n\n      if (prefix) {\n        this._maskService.prefix = prefix.currentValue;\n      }\n\n      if (suffix) {\n        this._maskService.suffix = suffix.currentValue;\n      }\n\n      if (thousandSeparator) {\n        this._maskService.thousandSeparator = thousandSeparator.currentValue;\n      }\n\n      if (decimalMarker) {\n        this._maskService.decimalMarker = decimalMarker.currentValue;\n      }\n\n      if (dropSpecialCharacters) {\n        this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n      }\n\n      if (hiddenInput) {\n        this._maskService.hiddenInput = hiddenInput.currentValue;\n      }\n\n      if (showMaskTyped) {\n        this._maskService.showMaskTyped = showMaskTyped.currentValue;\n      }\n\n      if (placeHolderCharacter) {\n        this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n      }\n\n      if (shownMaskExpression) {\n        this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n      }\n\n      if (showTemplate) {\n        this._maskService.showTemplate = showTemplate.currentValue;\n      }\n\n      if (clearIfNotMatch) {\n        this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n      }\n\n      if (validation) {\n        this._maskService.validation = validation.currentValue;\n      }\n\n      if (separatorLimit) {\n        this._maskService.separatorLimit = separatorLimit.currentValue;\n      }\n\n      if (allowNegativeNumbers) {\n        this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n        if (this._maskService.allowNegativeNumbers) {\n          this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(function (c) {\n            return c !== '-';\n          });\n        }\n      }\n\n      if (leadZeroDateTime) {\n        this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n      }\n\n      this._applyMask();\n    } // tslint:disable-next-line: cyclomatic-complexity\n\n  }, {\n    key: \"validate\",\n    value: function validate(_ref3) {\n      var _this11 = this;\n\n      var value = _ref3.value;\n\n      if (!this._maskService.validation || !this._maskValue) {\n        return null;\n      }\n\n      if (this._maskService.ipError) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskService.cpfCnpjError) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.startsWith('separator')) {\n        return null;\n      }\n\n      if (withoutValidation.includes(this._maskValue)) {\n        return null;\n      }\n\n      if (this._maskService.clearIfNotMatch) {\n        return null;\n      }\n\n      if (timeMasks.includes(this._maskValue)) {\n        return this._validateTime(value);\n      }\n\n      if (value && value.toString().length >= 1) {\n        var counterOfOpt = 0;\n\n        var _loop = function _loop(key) {\n          if (_this11._maskService.maskAvailablePatterns[key].optional && _this11._maskService.maskAvailablePatterns[key].optional === true) {\n            if (_this11._maskValue.indexOf(key) !== _this11._maskValue.lastIndexOf(key)) {\n              var opt = _this11._maskValue.split('').filter(function (i) {\n                return i === key;\n              }).join('');\n\n              counterOfOpt += opt.length;\n            } else if (_this11._maskValue.indexOf(key) !== -1) {\n              counterOfOpt++;\n            }\n\n            if (_this11._maskValue.indexOf(key) !== -1 && value.toString().length >= _this11._maskValue.indexOf(key)) {\n              return {\n                v: null\n              };\n            }\n\n            if (counterOfOpt === _this11._maskValue.length) {\n              return {\n                v: null\n              };\n            }\n          }\n        };\n\n        for (var key in this._maskService.maskAvailablePatterns) {\n          var _ret = _loop(key);\n\n          if (typeof _ret === \"object\") return _ret.v;\n        }\n\n        if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n          return null;\n        }\n\n        if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n          return null;\n        } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n          return this._createValidationError(value);\n        }\n\n        if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n          var length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n          if (value.toString().length < length) {\n            return this._createValidationError(value);\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onPaste\",\n    value: function onPaste() {\n      this._justPasted = true;\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(e) {\n      var _this12 = this;\n\n      var el = e.target;\n      this._inputValue = el.value;\n\n      this._setMask();\n\n      if (!this._maskValue) {\n        this.onChange(el.value);\n        return;\n      }\n\n      var position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n      var caretShift = 0;\n      var backspaceShift = false;\n\n      this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', function (shift, _backspaceShift) {\n        _this12._justPasted = false;\n        caretShift = shift;\n        backspaceShift = _backspaceShift;\n      }); // only set the selection if the element is active\n\n\n      if (this.document.activeElement !== el) {\n        return;\n      }\n\n      this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n      var positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n      if (positionToApply > this._getActualInputLength()) {\n        positionToApply = this._getActualInputLength();\n      }\n\n      if (positionToApply < 0) {\n        positionToApply = 0;\n      }\n\n      el.setSelectionRange(positionToApply, positionToApply);\n      this._position = null;\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      if (this._maskValue) {\n        this._maskService.clearIfNotMatchFn();\n      }\n\n      this.onTouch();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      if (!this._maskValue) {\n        return;\n      }\n\n      var el = e.target;\n      var posStart = 0;\n      var posEnd = 0;\n\n      if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // tslint:disable-next-line\n      e.keyCode !== 38) {\n        if (this._maskService.showMaskTyped) {\n          // We are showing the mask in the input\n          this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n          if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n            // the input ONLY contains the mask, so position the cursor at the start\n            el.focus();\n            el.setSelectionRange(posStart, posEnd);\n          } else {\n            // the input contains some characters already\n            if (el.selectionStart > this._maskService.actualValue.length) {\n              // if the user clicked beyond our value's length, position the cursor at the end of our value\n              el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n            }\n          }\n        }\n      }\n\n      var nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n      /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n      if (el.value !== nextValue) {\n        el.value = nextValue;\n      }\n      /** fix of cursor position with prefix when mouse click occur */\n\n\n      if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n        el.selectionStart = this._maskService.prefix.length;\n        return;\n      }\n      /** select only inserted text */\n\n\n      if (el.selectionEnd > this._getActualInputLength()) {\n        el.selectionEnd = this._getActualInputLength();\n      }\n    } // tslint:disable-next-line: cyclomatic-complexity\n\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(e) {\n      var _a;\n\n      if (!this._maskValue) {\n        return;\n      }\n\n      this._code = e.code ? e.code : e.key;\n      var el = e.target;\n      this._inputValue = el.value;\n\n      this._setMask();\n\n      if (e.keyCode === 38) {\n        e.preventDefault();\n      }\n\n      if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n        if (e.keyCode === 8 && el.value.length === 0) {\n          el.selectionStart = el.selectionEnd;\n        }\n\n        if (e.keyCode === 8 && el.selectionStart !== 0) {\n          // If specialChars is false, (shouldn't ever happen) then set to the defaults\n          this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n\n          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n            el.setSelectionRange(this.prefix.length, this.prefix.length);\n          } else {\n            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n              while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n              }\n            }\n\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n          }\n        }\n\n        this.suffixCheckOnPressDelete(e.keyCode, el);\n\n        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n          e.preventDefault();\n        }\n\n        var cursorStart = el.selectionStart; // this.onFocus(e);\n\n        if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n        }\n      }\n\n      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      } else if (e.keyCode === 65 && e.ctrlKey === true || // Ctrl+ A\n      e.keyCode === 65 && e.metaKey === true // Cmd + A (Mac)\n      ) {\n        el.setSelectionRange(0, this._getActualInputLength());\n        e.preventDefault();\n      }\n\n      this._maskService.selStart = el.selectionStart;\n      this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(inputValue) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n                  if ('disable' in inputValue) {\n                    this.setDisabledState(Boolean(inputValue.disable));\n                  }\n\n                  inputValue = inputValue.value;\n                }\n\n                if (inputValue === undefined) {\n                  inputValue = '';\n                }\n\n                if (typeof inputValue === 'number') {\n                  inputValue = String(inputValue);\n                  inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                  this._maskService.isNumberValue = true;\n                }\n\n                this._inputValue = inputValue;\n\n                this._setMask();\n\n                if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n                  // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n                  this._maskService.writingValue = true;\n                  this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n                  this._maskService.writingValue = false;\n                } else {\n                  this._maskService.formElementProperty = ['value', inputValue];\n                }\n\n                this._inputValue = inputValue;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n      this._maskService.onChange = this.onChange;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouch = fn;\n    }\n  }, {\n    key: \"suffixCheckOnPressDelete\",\n    value: function suffixCheckOnPressDelete(keyCode, el) {\n      if (keyCode === 46 && this.suffix.length > 0) {\n        if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n      }\n\n      if (keyCode === 8) {\n        if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n\n        if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n          el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n        }\n      }\n    }\n    /** It disables the input element */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n  }, {\n    key: \"_repeatPatternSymbols\",\n    value: function _repeatPatternSymbols(maskExp) {\n      var _this13 = this;\n\n      return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce(function (accum, currval, index) {\n        _this13._start = currval === '{' ? index : _this13._start;\n\n        if (currval !== '}') {\n          return _this13._maskService._findSpecialChar(currval) ? accum + currval : accum;\n        }\n\n        _this13._end = index;\n        var repeatNumber = Number(maskExp.slice(_this13._start + 1, _this13._end));\n        var replaceWith = new Array(repeatNumber + 1).join(maskExp[_this13._start - 1]);\n        return accum + replaceWith;\n      }, '') || maskExp;\n    } // tslint:disable-next-line:no-any\n\n  }, {\n    key: \"_applyMask\",\n    value: function _applyMask() {\n      this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n      this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n    }\n  }, {\n    key: \"_validateTime\",\n    value: function _validateTime(value) {\n      var rowMaskLen = this._maskValue.split('').filter(function (s) {\n        return s !== ':';\n      }).length;\n\n      if (!value) {\n        return null; // Don't validate empty values to allow for optional form control\n      }\n\n      if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n        return this._createValidationError(value);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getActualInputLength\",\n    value: function _getActualInputLength() {\n      return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n    }\n  }, {\n    key: \"_createValidationError\",\n    value: function _createValidationError(actualValue) {\n      return {\n        mask: {\n          requiredMask: this._maskValue,\n          actualValue: actualValue\n        }\n      };\n    }\n  }, {\n    key: \"_setMask\",\n    value: function _setMask() {\n      var _this14 = this;\n\n      if (this._maskExpressionArray.length > 0) {\n        this._maskExpressionArray.some(function (mask) {\n          var _a, _b;\n\n          var test = ((_a = _this14._maskService.removeMask(_this14._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = _this14._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n\n          if (_this14._inputValue && test) {\n            _this14._maskValue = mask;\n            _this14.maskExpression = mask;\n            _this14._maskService.maskExpression = mask;\n            return test;\n          } else {\n            _this14._maskValue = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n            _this14.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n            _this14._maskService.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n          }\n        });\n      }\n    }\n  }]);\n\n  return MaskDirective;\n}();\n\nMaskDirective.ɵfac = function MaskDirective_Factory(t) {\n  return new (t || MaskDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MaskService), ɵngcc0.ɵɵdirectiveInject(config));\n};\n\nMaskDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"blur\", function MaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function MaskDirective_click_HostBindingHandler($event) {\n        return ctx.onFocus($event);\n      })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return MaskDirective;\n    }),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () {\n      return MaskDirective;\n    }),\n    multi: true\n  }, MaskService]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMaskDirective.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MaskService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [config]\n    }]\n  }];\n};\n\nMaskDirective.propDecorators = {\n  maskExpression: [{\n    type: Input,\n    args: ['mask']\n  }],\n  specialCharacters: [{\n    type: Input\n  }],\n  patterns: [{\n    type: Input\n  }],\n  prefix: [{\n    type: Input\n  }],\n  suffix: [{\n    type: Input\n  }],\n  thousandSeparator: [{\n    type: Input\n  }],\n  decimalMarker: [{\n    type: Input\n  }],\n  dropSpecialCharacters: [{\n    type: Input\n  }],\n  hiddenInput: [{\n    type: Input\n  }],\n  showMaskTyped: [{\n    type: Input\n  }],\n  placeHolderCharacter: [{\n    type: Input\n  }],\n  shownMaskExpression: [{\n    type: Input\n  }],\n  showTemplate: [{\n    type: Input\n  }],\n  clearIfNotMatch: [{\n    type: Input\n  }],\n  validation: [{\n    type: Input\n  }],\n  separatorLimit: [{\n    type: Input\n  }],\n  allowNegativeNumbers: [{\n    type: Input\n  }],\n  leadZeroDateTime: [{\n    type: Input\n  }],\n  onPaste: [{\n    type: HostListener,\n    args: ['paste']\n  }],\n  onInput: [{\n    type: HostListener,\n    args: ['input', ['$event']]\n  }],\n  onBlur: [{\n    type: HostListener,\n    args: ['blur']\n  }],\n  onFocus: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  onKeyDown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return MaskDirective;\n        }),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(function () {\n          return MaskDirective;\n        }),\n        multi: true\n      }, MaskService]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MaskService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nvar MaskPipe = /*#__PURE__*/function () {\n  function MaskPipe(_maskService) {\n    _classCallCheck(this, MaskPipe);\n\n    this._maskService = _maskService;\n  }\n\n  _createClass(MaskPipe, [{\n    key: \"transform\",\n    value: function transform(value, mask) {\n      var thousandSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (!value && typeof value !== 'number') {\n        return '';\n      }\n\n      if (thousandSeparator) {\n        this._maskService.thousandSeparator = thousandSeparator;\n      }\n\n      if (typeof mask === 'string') {\n        return this._maskService.applyMask(\"\".concat(value), mask);\n      }\n\n      return this._maskService.applyMaskWithPattern(\"\".concat(value), mask);\n    }\n  }]);\n\n  return MaskPipe;\n}();\n\nMaskPipe.ɵfac = function MaskPipe_Factory(t) {\n  return new (t || MaskPipe)(ɵngcc0.ɵɵdirectiveInject(MaskApplierService, 16));\n};\n\nMaskPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: MaskPipe,\n  pure: true\n});\n\nMaskPipe.ctorParameters = function () {\n  return [{\n    type: MaskApplierService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: MaskApplierService\n    }];\n  }, null);\n})();\n\nvar NgxMaskModule = /*#__PURE__*/function () {\n  function NgxMaskModule() {\n    _classCallCheck(this, NgxMaskModule);\n  }\n\n  _createClass(NgxMaskModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(configValue) {\n      return {\n        ngModule: NgxMaskModule,\n        providers: [{\n          provide: NEW_CONFIG,\n          useValue: configValue\n        }, {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        }, {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        }, MaskApplierService]\n      };\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      return {\n        ngModule: NgxMaskModule\n      };\n    }\n  }]);\n\n  return NgxMaskModule;\n}();\n\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n  return new (t || NgxMaskModule)();\n};\n\nNgxMaskModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgxMaskModule\n});\nNgxMaskModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMaskModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MaskDirective, MaskPipe],\n      declarations: [MaskDirective, MaskPipe]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMaskModule, {\n    declarations: [MaskDirective, MaskPipe],\n    exports: [MaskDirective, MaskPipe]\n  });\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"sources":["C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/ngx-mask/__ivy_ngcc__/fesm2015/ngx-mask.js"],"names":["InjectionToken","Injectable","Inject","ElementRef","Renderer2","Directive","forwardRef","Input","HostListener","Pipe","NgModule","__awaiter","NG_VALUE_ACCESSOR","NG_VALIDATORS","DOCUMENT","ɵngcc0","config","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","patterns","pattern","RegExp","optional","X","symbol","A","S","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","_config","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChar","precision","x","split","decimals","length","res","replace","slice","rgx","test","substr","percentage","Number","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","_a","_b","_c","i","includes","checkInputPrecision","precisionRegEx","_charToRegExpExpression","precisionMatch","match","diff","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","ipError","filter","arr","push","cpfCnpjError","startsWith","_stripToDecimal","indexOf","base","thousandSeperatorCharEscaped","decimalMarkerEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","monthsCount","withoutDays","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","find","val","maskSymbol","idx","join","charsToEscape","inputLength","ɵfac","MaskApplierService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","MaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","value","regex","exec","formElement","nativeElement","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","Array","isArray","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_retrieveSeparatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","MaskService_Factory","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","onTouch","changes","currentValue","previousValue","firstChange","sort","a","b","c","_applyMask","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","opt","checkSpecialCharAmount","e","el","target","_inputValue","_setMask","selectionStart","caretShift","applyValueChanges","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","code","preventDefault","suffixCheckOnPressDelete","cursorStart","readOnly","ctrlKey","metaKey","setDisabledState","disable","String","fn","isDisabled","maskExp","reduce","accum","currval","_start","_end","repeatNumber","replaceWith","_repeatPatternSymbols","rowMaskLen","requiredMask","some","removeMask","MaskDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","MaskDirective_HostBindings","rf","ctx","ɵɵlistener","MaskDirective_paste_HostBindingHandler","onPaste","MaskDirective_input_HostBindingHandler","$event","onInput","MaskDirective_blur_HostBindingHandler","onBlur","MaskDirective_click_HostBindingHandler","onFocus","MaskDirective_keydown_HostBindingHandler","onKeyDown","inputs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","propDecorators","selector","providers","MaskPipe","applyMaskWithPattern","MaskPipe_Factory","ɵpipe","ɵɵdefinePipe","pure","NgxMaskModule","configValue","ngModule","useValue","useFactory","_configFactory","deps","NgxMaskModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","initConfig","Function","Object","assign","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init"],"mappings":";;;;;;;;AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,UAA7C,EAAyDC,SAAzD,EAAoEC,SAApE,EAA+EC,UAA/E,EAA2FC,KAA3F,EAAkGC,YAAlG,EAAgHC,IAAhH,EAAsHC,QAAtH,QAAsI,eAAtI;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,gBAAjD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,IAAMC,MAAM,GAAG,IAAIhB,cAAJ,CAAmB,QAAnB,CAAf;AACA,IAAMiB,UAAU,GAAG,IAAIjB,cAAJ,CAAmB,YAAnB,CAAnB;AACA,IAAMkB,cAAc,GAAG,IAAIlB,cAAJ,CAAmB,gBAAnB,CAAvB;AACA,IAAMmB,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,EADU;AAElBC,EAAAA,MAAM,EAAE,EAFU;AAGlBC,EAAAA,iBAAiB,EAAE,GAHD;AAIlBC,EAAAA,aAAa,EAAE,GAJG;AAKlBC,EAAAA,eAAe,EAAE,KALC;AAMlBC,EAAAA,YAAY,EAAE,KANI;AAOlBC,EAAAA,aAAa,EAAE,KAPG;AAQlBC,EAAAA,oBAAoB,EAAE,GARJ;AASlBC,EAAAA,qBAAqB,EAAE,IATL;AAUlBC,EAAAA,WAAW,EAAEC,SAVK;AAWlBC,EAAAA,mBAAmB,EAAE,EAXH;AAYlBC,EAAAA,cAAc,EAAE,EAZE;AAalBC,EAAAA,oBAAoB,EAAE,KAbJ;AAclBC,EAAAA,UAAU,EAAE,IAdM;AAelB;AACAC,EAAAA,iBAAiB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,CAhBD;AAiBlBC,EAAAA,gBAAgB,EAAE,KAjBA;AAkBlBC,EAAAA,QAAQ,EAAE;AACN,SAAK;AACDC,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;AADR,KADC;AAIN,SAAK;AACDD,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX,CADR;AAEDC,MAAAA,QAAQ,EAAE;AAFT,KAJC;AAQNC,IAAAA,CAAC,EAAE;AACCH,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX,CADV;AAECG,MAAAA,MAAM,EAAE;AAFT,KARG;AAYNC,IAAAA,CAAC,EAAE;AACCL,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,aAAX;AADV,KAZG;AAeNK,IAAAA,CAAC,EAAE;AACCN,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,UAAX;AADV,KAfG;AAkBNM,IAAAA,CAAC,EAAE;AACCP,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;AADV,KAlBG;AAqBNO,IAAAA,CAAC,EAAE;AACCR,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;AADV,KArBG;AAwBNQ,IAAAA,CAAC,EAAE;AACCT,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;AADV,KAxBG;AA2BNS,IAAAA,CAAC,EAAE;AACCV,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;AADV,KA3BG;AA8BNU,IAAAA,CAAC,EAAE;AACCX,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;AADV,KA9BG;AAiCNW,IAAAA,CAAC,EAAE;AACCZ,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;AADV;AAjCG;AAlBQ,CAAtB;AAwDA,IAAMY,SAAS,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,OAAtB,CAAlB;AACA,IAAMC,iBAAiB,GAAG,CACtB,SADsB,EAEtB,IAFsB,EAGtB,IAHsB,EAItB,IAJsB,EAKtB,WALsB,EAMtB,YANsB,EAOtB,OAPsB,EAQtB,IARsB,EAStB,IATsB,CAA1B;;IAYMC,kB;AACF,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKzB,mBAAL,GAA2B,EAA3B;;AACA,SAAK0B,qBAAL,GAA6B,UAACC,GAAD,EAAMC,qBAAN,EAA6BC,WAA7B,EAA0CC,SAA1C,EAAwD;AACjF,UAAMC,CAAC,GAAGJ,GAAG,CAACK,KAAJ,CAAUH,WAAV,CAAV;AACA,UAAMI,QAAQ,GAAGF,CAAC,CAACG,MAAF,GAAW,CAAX,aAAkBL,WAAlB,SAAgCE,CAAC,CAAC,CAAD,CAAjC,IAAyC,EAA1D;AACA,UAAII,GAAG,GAAGJ,CAAC,CAAC,CAAD,CAAX;;AACA,UAAM9B,cAAc,GAAG,KAAI,CAACA,cAAL,CAAoBmC,OAApB,CAA4B,KAA5B,EAAmC,EAAnC,CAAvB;;AACA,UAAInC,cAAc,IAAI,CAACA,cAAvB,EAAuC;AACnC,YAAIkC,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAChBA,UAAAA,GAAG,cAAOA,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAaF,GAAG,CAACD,MAAjB,EAAyBG,KAAzB,CAA+B,CAA/B,EAAkCpC,cAAc,CAACiC,MAAjD,CAAP,CAAH;AACH,SAFD,MAGK;AACDC,UAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAapC,cAAc,CAACiC,MAA5B,CAAN;AACH;AACJ;;AACD,UAAMI,GAAG,GAAG,cAAZ;;AACA,aAAOV,qBAAqB,IAAIU,GAAG,CAACC,IAAJ,CAASJ,GAAT,CAAhC,EAA+C;AAC3CA,QAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAYE,GAAZ,EAAiB,OAAOV,qBAAP,GAA+B,IAAhD,CAAN;AACH;;AACD,UAAIE,SAAS,KAAK/B,SAAlB,EAA6B;AACzB,eAAOoC,GAAG,GAAGF,QAAb;AACH,OAFD,MAGK,IAAIH,SAAS,KAAK,CAAlB,EAAqB;AACtB,eAAOK,GAAP;AACH;;AACD,aAAOA,GAAG,GAAGF,QAAQ,CAACO,MAAT,CAAgB,CAAhB,EAAmBV,SAAS,GAAG,CAA/B,CAAb;AACH,KAxBD;;AAyBA,SAAKW,UAAL,GAAkB,UAACd,GAAD,EAAS;AACvB,aAAOe,MAAM,CAACf,GAAD,CAAN,IAAe,CAAf,IAAoBe,MAAM,CAACf,GAAD,CAAN,IAAe,GAA1C;AACH,KAFD;;AAGA,SAAKgB,YAAL,GAAoB,UAACnB,cAAD,EAAoB;AACpC,UAAMO,CAAC,GAAGP,cAAc,CAACQ,KAAf,CAAqB,GAArB,CAAV;;AACA,UAAID,CAAC,CAACG,MAAF,GAAW,CAAf,EAAkB;AACd,eAAOQ,MAAM,CAACX,CAAC,CAACA,CAAC,CAACG,MAAF,GAAW,CAAZ,CAAF,CAAb;AACH;;AACD,aAAOU,QAAP;AACH,KAND;;AAOA,SAAKC,oBAAL,GAA4B,UAACC,UAAD,EAAgB;AACxC,UAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAC,CAACH,EAAE,GAAG,KAAI,CAAC1D,MAAX,MAAuB,IAAvB,IAA+B0D,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACb,MAA5D,IAAsE,CAAnF,EAAsFgB,CAAC,IAAI,CAA3F,EAA8FA,CAAC,EAA/F,EAAmG;AAC/F,YAAMV,MAAM,GAAG,KAAI,CAACnD,MAAL,CAAYmD,MAAZ,CAAmBU,CAAnB,EAAsB,CAACF,EAAE,GAAG,KAAI,CAAC3D,MAAX,MAAuB,IAAvB,IAA+B2D,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACd,MAAjF,CAAf;;AACA,YAAIY,UAAU,CAACK,QAAX,CAAoBX,MAApB,MACCU,CAAC,GAAG,CAAJ,GAAQ,CAAR,IAAa,CAACJ,UAAU,CAACK,QAAX,CAAoB,KAAI,CAAC9D,MAAL,CAAYmD,MAAZ,CAAmBU,CAAC,GAAG,CAAvB,EAA0B,CAACD,EAAE,GAAG,KAAI,CAAC5D,MAAX,MAAuB,IAAvB,IAA+B4D,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACf,MAArF,CAApB,CADf,CAAJ,EACuI;AACnI,iBAAOY,UAAU,CAACV,OAAX,CAAmBI,MAAnB,EAA2B,EAA3B,CAAP;AACH;AACJ;;AACD,aAAOM,UAAP;AACH,KAVD;;AAWA,SAAKM,mBAAL,GAA2B,UAACN,UAAD,EAAahB,SAAb,EAAwBtC,aAAxB,EAA0C;AACjE,UAAIsC,SAAS,GAAGc,QAAhB,EAA0B;AACtB,YAAMS,cAAc,GAAG,IAAI7C,MAAJ,CAAW,KAAI,CAAC8C,uBAAL,CAA6B9D,aAA7B,kBAAqDsC,SAArD,SAAX,CAAvB;AACA,YAAMyB,cAAc,GAAGT,UAAU,CAACU,KAAX,CAAiBH,cAAjB,CAAvB;;AACA,YAAIE,cAAc,IAAIA,cAAc,CAAC,CAAD,CAAd,CAAkBrB,MAAlB,GAA2B,CAA3B,GAA+BJ,SAArD,EAAgE;AAC5D,cAAM2B,IAAI,GAAGF,cAAc,CAAC,CAAD,CAAd,CAAkBrB,MAAlB,GAA2B,CAA3B,GAA+BJ,SAA5C;AACAgB,UAAAA,UAAU,GAAGA,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwBZ,UAAU,CAACZ,MAAX,GAAoBuB,IAA5C,CAAb;AACH;;AACD,YAAI3B,SAAS,KAAK,CAAd,IAAmBgB,UAAU,CAACa,QAAX,CAAoBnE,aAApB,CAAvB,EAA2D;AACvDsD,UAAAA,UAAU,GAAGA,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwBZ,UAAU,CAACZ,MAAX,GAAoB,CAA5C,CAAb;AACH;AACJ;;AACD,aAAOY,UAAP;AACH,KAbD;;AAcA,SAAKc,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA,SAAKpE,eAAL,GAAuB,KAAK8B,OAAL,CAAa9B,eAApC;AACA,SAAKI,qBAAL,GAA6B,KAAK0B,OAAL,CAAa1B,qBAA1C;AACA,SAAKiE,qBAAL,GAA6B,KAAKvC,OAAL,CAAanB,iBAA1C;AACA,SAAK2D,qBAAL,GAA6B,KAAKxC,OAAL,CAAajB,QAA1C;AACA,SAAKhB,MAAL,GAAc,KAAKiC,OAAL,CAAajC,MAA3B;AACA,SAAKD,MAAL,GAAc,KAAKkC,OAAL,CAAalC,MAA3B;AACA,SAAKE,iBAAL,GAAyB,KAAKgC,OAAL,CAAahC,iBAAtC;AACA,SAAKC,aAAL,GAAqB,KAAK+B,OAAL,CAAa/B,aAAlC;AACA,SAAKM,WAAL,GAAmB,KAAKyB,OAAL,CAAazB,WAAhC;AACA,SAAKH,aAAL,GAAqB,KAAK4B,OAAL,CAAa5B,aAAlC;AACA,SAAKC,oBAAL,GAA4B,KAAK2B,OAAL,CAAa3B,oBAAzC;AACA,SAAKO,UAAL,GAAkB,KAAKoB,OAAL,CAAapB,UAA/B;AACA,SAAKF,cAAL,GAAsB,KAAKsB,OAAL,CAAatB,cAAnC;AACA,SAAKC,oBAAL,GAA4B,KAAKqB,OAAL,CAAarB,oBAAzC;AACA,SAAKG,gBAAL,GAAwB,KAAKkB,OAAL,CAAalB,gBAArC;AACH;;;;WACD,8BAAqByC,UAArB,EAAiCkB,cAAjC,EAAiD;AAC7C,2CAA8BA,cAA9B;AAAA,UAAOC,IAAP;AAAA,UAAaC,aAAb;;AACA,WAAKA,aAAL,GAAqBA,aAArB;AACA,aAAO,KAAKC,SAAL,CAAerB,UAAf,EAA2BmB,IAA3B,CAAP;AACH;;;WACD,mBAAUnB,UAAV,EAAsBtB,cAAtB,EAA4G;AAAA;;AAAA,UAAtE4C,QAAsE,uEAA3D,CAA2D;AAAA,UAAxDC,UAAwD,uEAA3C,KAA2C;AAAA,UAApCC,UAAoC,uEAAvB,KAAuB;AAAA,UAAhBC,EAAgB,uEAAX,YAAM,CAAG,CAAE;;AACxG,UAAIzB,UAAU,KAAK/C,SAAf,IAA4B+C,UAAU,KAAK,IAA3C,IAAmDtB,cAAc,KAAKzB,SAA1E,EAAqF;AACjF,eAAO,EAAP;AACH;;AACD,UAAIyE,MAAM,GAAG,CAAb;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,KAAK,GAAG,KAAZ;AACA,UAAIC,cAAc,GAAG,KAArB;AACA,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAIC,QAAQ,GAAG,KAAf;;AACA,UAAI/B,UAAU,CAACT,KAAX,CAAiB,CAAjB,EAAoB,KAAK/C,MAAL,CAAY4C,MAAhC,MAA4C,KAAK5C,MAArD,EAA6D;AACzDwD,QAAAA,UAAU,GAAGA,UAAU,CAACT,KAAX,CAAiB,KAAK/C,MAAL,CAAY4C,MAA7B,EAAqCY,UAAU,CAACZ,MAAhD,CAAb;AACH;;AACD,UAAI,CAAC,CAAC,KAAK7C,MAAP,IAAiB,CAACyD,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACZ,MAApE,IAA8E,CAAnG,EAAsG;AAClGY,QAAAA,UAAU,GAAG,KAAKD,oBAAL,CAA0BC,UAA1B,CAAb;AACH;;AACD,UAAMgC,UAAU,GAAGhC,UAAU,CAACiC,QAAX,GAAsB/C,KAAtB,CAA4B,EAA5B,CAAnB;;AACA,UAAIR,cAAc,KAAK,IAAvB,EAA6B;AACzB,aAAKwD,OAAL,GAAe,CAAC,EAAEF,UAAU,CAACG,MAAX,CAAkB,UAAC/B,CAAD;AAAA,iBAAOA,CAAC,KAAK,GAAb;AAAA,SAAlB,EAAoChB,MAApC,GAA6C,CAA7C,IAAkD4C,UAAU,CAAC5C,MAAX,GAAoB,CAAxE,CAAhB;AACAV,QAAAA,cAAc,GAAG,iBAAjB;AACH;;AACD,UAAM0D,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACZ,MAA/B,EAAuCgB,CAAC,EAAxC,EAA4C;AACxC,YAAIJ,UAAU,CAACI,CAAD,CAAV,CAAcM,KAAd,CAAoB,KAApB,CAAJ,EAAgC;AAC5B0B,UAAAA,GAAG,CAACC,IAAJ,CAASrC,UAAU,CAACI,CAAD,CAAnB;AACH;AACJ;;AACD,UAAI1B,cAAc,KAAK,UAAvB,EAAmC;AAC/B,aAAK4D,YAAL,GAAoB,CAAC,EAAEF,GAAG,CAAChD,MAAJ,KAAe,EAAf,IAAqBgD,GAAG,CAAChD,MAAJ,KAAe,EAAtC,CAArB;;AACA,YAAIgD,GAAG,CAAChD,MAAJ,GAAa,EAAjB,EAAqB;AACjBV,UAAAA,cAAc,GAAG,oBAAjB;AACH,SAFD,MAGK;AACDA,UAAAA,cAAc,GAAG,gBAAjB;AACH;AACJ;;AACD,UAAIA,cAAc,CAAC6D,UAAf,CAA0B,SAA1B,CAAJ,EAA0C;AACtC,YAAIvC,UAAU,CAACU,KAAX,CAAiB,aAAjB,KAAmCV,UAAU,CAACU,KAAX,CAAiB,oCAAjB,CAAvC,EAA+F;AAC3FV,UAAAA,UAAU,GAAG,KAAKwC,eAAL,CAAqBxC,UAArB,CAAb;AACA,cAAMhB,SAAS,GAAG,KAAKa,YAAL,CAAkBnB,cAAlB,CAAlB;AACAsB,UAAAA,UAAU,GAAG,KAAKM,mBAAL,CAAyBN,UAAzB,EAAqChB,SAArC,EAAgD,KAAKtC,aAArD,CAAb;AACH;;AACD,YAAIsD,UAAU,CAACyC,OAAX,CAAmB,GAAnB,IAA0B,CAA1B,IAA+B,CAAC,KAAK9C,UAAL,CAAgBK,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwBZ,UAAU,CAACyC,OAAX,CAAmB,GAAnB,CAAxB,CAAhB,CAApC,EAAuG;AACnG,cAAMC,IAAI,GAAG1C,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwBZ,UAAU,CAACyC,OAAX,CAAmB,GAAnB,IAA0B,CAAlD,CAAb;AACAzC,UAAAA,UAAU,aAAM0C,IAAN,SAAa1C,UAAU,CAACY,SAAX,CAAqBZ,UAAU,CAACyC,OAAX,CAAmB,GAAnB,CAArB,EAA8CzC,UAAU,CAACZ,MAAzD,CAAb,CAAV;AACH;;AACD,YAAI,KAAKO,UAAL,CAAgBK,UAAhB,CAAJ,EAAiC;AAC7B2B,UAAAA,MAAM,GAAG3B,UAAT;AACH,SAFD,MAGK;AACD2B,UAAAA,MAAM,GAAG3B,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwBZ,UAAU,CAACZ,MAAX,GAAoB,CAA5C,CAAT;AACH;AACJ,OAhBD,MAiBK,IAAIV,cAAc,CAAC6D,UAAf,CAA0B,WAA1B,CAAJ,EAA4C;AAC7C,YAAIvC,UAAU,CAACU,KAAX,CAAiB,WAAjB,KACAV,UAAU,CAACU,KAAX,CAAiB,SAAjB,CADA,IAEAV,UAAU,CAACU,KAAX,CAAiB,aAAjB,CAFA,IAGAV,UAAU,CAACU,KAAX,CAAiB,yCAAjB,CAHA,IAIAV,UAAU,CAACU,KAAX,CAAiB,eAAjB,CAJJ,EAIuC;AACnCV,UAAAA,UAAU,GAAG,KAAKwC,eAAL,CAAqBxC,UAArB,CAAb;AACH;;AACDA,QAAAA,UAAU,GACNA,UAAU,CAACZ,MAAX,GAAoB,CAApB,IAAyBY,UAAU,CAAC,CAAD,CAAV,KAAkB,GAA3C,IAAkDA,UAAU,CAAC,CAAD,CAAV,KAAkB,KAAKtD,aAAzE,IAA0F,CAAC8E,UAA3F,GACMxB,UAAU,CAACT,KAAX,CAAiB,CAAjB,EAAoBS,UAAU,CAACZ,MAA/B,CADN,GAEMY,UAHV,CAR6C,CAY7C;AACA;;AACA,YAAM2C,4BAA4B,GAAG,KAAKnC,uBAAL,CAA6B,KAAK/D,iBAAlC,CAArC;;AACA,YAAMmG,oBAAoB,GAAG,KAAKpC,uBAAL,CAA6B,KAAK9D,aAAlC,CAA7B;;AACA,YAAMmG,YAAY,GAAG,2CAChBvD,OADgB,CACRqD,4BADQ,EACsB,EADtB,EAEhBrD,OAFgB,CAERsD,oBAFQ,EAEc,EAFd,CAArB;AAGA,YAAME,iBAAiB,GAAG,IAAIpF,MAAJ,CAAW,MAAMmF,YAAN,GAAqB,GAAhC,CAA1B;;AACA,YAAI7C,UAAU,CAACU,KAAX,CAAiBoC,iBAAjB,CAAJ,EAAyC;AACrC9C,UAAAA,UAAU,GAAGA,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwBZ,UAAU,CAACZ,MAAX,GAAoB,CAA5C,CAAb;AACH;;AACD,YAAMJ,UAAS,GAAG,KAAKa,YAAL,CAAkBnB,cAAlB,CAAlB;;AACAsB,QAAAA,UAAU,GAAG,KAAKM,mBAAL,CAAyBN,UAAzB,EAAqChB,UAArC,EAAgD,KAAKtC,aAArD,CAAb;AACA,YAAMqG,SAAS,GAAG/C,UAAU,CAACV,OAAX,CAAmB,IAAI5B,MAAJ,CAAWiF,4BAAX,EAAyC,GAAzC,CAAnB,EAAkE,EAAlE,CAAlB;AACAhB,QAAAA,MAAM,GAAG,KAAK/C,qBAAL,CAA2BmE,SAA3B,EAAsC,KAAKtG,iBAA3C,EAA8D,KAAKC,aAAnE,EAAkFsC,UAAlF,CAAT;AACA,YAAMgE,UAAU,GAAGrB,MAAM,CAACc,OAAP,CAAe,GAAf,IAAsBzC,UAAU,CAACyC,OAAX,CAAmB,GAAnB,CAAzC;AACA,YAAMQ,SAAS,GAAGtB,MAAM,CAACvC,MAAP,GAAgBY,UAAU,CAACZ,MAA7C;;AACA,YAAI6D,SAAS,GAAG,CAAZ,IAAiBtB,MAAM,CAACL,QAAD,CAAN,KAAqB,GAA1C,EAA+C;AAC3CO,UAAAA,cAAc,GAAG,IAAjB;AACA,cAAIf,MAAM,GAAG,CAAb;;AACA,aAAG;AACC,iBAAKA,MAAL,CAAYoC,GAAZ,CAAgB5B,QAAQ,GAAGR,MAA3B;;AACAA,YAAAA,MAAM;AACT,WAHD,QAGSA,MAAM,GAAGmC,SAHlB;AAIH,SAPD,MAQK,IAAKD,UAAU,KAAK,CAAf,IAAoB1B,QAAQ,GAAG,CAA/B,IAAoC,EAAEK,MAAM,CAACc,OAAP,CAAe,GAAf,KAAuBnB,QAAvB,IAAmCA,QAAQ,GAAG,CAAhD,CAArC,IACJ,EAAEK,MAAM,CAACc,OAAP,CAAe,GAAf,KAAuBnB,QAAvB,IAAmCA,QAAQ,GAAG,CAAhD,KAAsD2B,SAAS,IAAI,CADnE,EACuE;AACxE,eAAKnC,MAAL,CAAYqC,KAAZ;;AACAtB,UAAAA,cAAc,GAAG,IAAjB;AACAC,UAAAA,KAAK,GAAGmB,SAAR;AACA3B,UAAAA,QAAQ,IAAI2B,SAAZ;;AACA,eAAKnC,MAAL,CAAYoC,GAAZ,CAAgB5B,QAAhB;AACH,SAPI,MAQA;AACD,eAAKR,MAAL,CAAYqC,KAAZ;AACH;AACJ,OAhDI,MAiDA;AACD,cACA;AACA,YAAI/C,EAAC,GAAG,CAAR,EAAWgD,WAAW,GAAGpB,UAAU,CAAC,CAAD,CAFnC,EAEwC5B,EAAC,GAAG4B,UAAU,CAAC5C,MAFvD,EAE+DgB,EAAC,IAAIgD,WAAW,GAAGpB,UAAU,CAAC5B,EAAD,CAF5F,EAEiG;AAC7F,cAAIsB,MAAM,KAAKhD,cAAc,CAACU,MAA9B,EAAsC;AAClC;AACH;;AACD,cAAI,KAAKiE,gBAAL,CAAsBD,WAAtB,EAAmC1E,cAAc,CAACgD,MAAD,CAAjD,KAA8DhD,cAAc,CAACgD,MAAM,GAAG,CAAV,CAAd,KAA+B,GAAjG,EAAsG;AAClGC,YAAAA,MAAM,IAAIyB,WAAV;AACA1B,YAAAA,MAAM,IAAI,CAAV;AACH,WAHD,MAIK,IAAIhD,cAAc,CAACgD,MAAM,GAAG,CAAV,CAAd,KAA+B,GAA/B,IACLE,KADK,IAEL,KAAKyB,gBAAL,CAAsBD,WAAtB,EAAmC1E,cAAc,CAACgD,MAAM,GAAG,CAAV,CAAjD,CAFC,EAE+D;AAChEC,YAAAA,MAAM,IAAIyB,WAAV;AACA1B,YAAAA,MAAM,IAAI,CAAV;AACAE,YAAAA,KAAK,GAAG,KAAR;AACH,WANI,MAOA,IAAI,KAAKyB,gBAAL,CAAsBD,WAAtB,EAAmC1E,cAAc,CAACgD,MAAD,CAAjD,KAA8DhD,cAAc,CAACgD,MAAM,GAAG,CAAV,CAAd,KAA+B,GAAjG,EAAsG;AACvGC,YAAAA,MAAM,IAAIyB,WAAV;AACAxB,YAAAA,KAAK,GAAG,IAAR;AACH,WAHI,MAIA,IAAIlD,cAAc,CAACgD,MAAM,GAAG,CAAV,CAAd,KAA+B,GAA/B,IACL,KAAK2B,gBAAL,CAAsBD,WAAtB,EAAmC1E,cAAc,CAACgD,MAAM,GAAG,CAAV,CAAjD,CADC,EAC+D;AAChEC,YAAAA,MAAM,IAAIyB,WAAV;AACA1B,YAAAA,MAAM,IAAI,CAAV;AACH,WAJI,MAKA,IAAI,KAAK2B,gBAAL,CAAsBD,WAAtB,EAAmC1E,cAAc,CAACgD,MAAD,CAAjD,CAAJ,EAAgE;AACjE,gBAAIhD,cAAc,CAACgD,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAChC,kBAAI9B,MAAM,CAACwD,WAAD,CAAN,GAAsB,CAA1B,EAA6B;AACzB1B,gBAAAA,MAAM,IAAI,CAAV;;AACA,qBAAK4B,UAAL,CAAgB5E,cAAhB,EAAgCgD,MAAhC,EAAwCM,UAAU,CAAC5C,MAAnD;;AACAgB,gBAAAA,EAAC;;AACD,oBAAI,KAAK7C,gBAAT,EAA2B;AACvBoE,kBAAAA,MAAM,IAAI,GAAV;AACH;;AACD;AACH;AACJ;;AACD,gBAAIjD,cAAc,CAACgD,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAChC,kBAAIC,MAAM,KAAK,GAAX,IAAkB/B,MAAM,CAACwD,WAAD,CAAN,GAAsB,CAA5C,EAA+C;AAC3C1B,gBAAAA,MAAM,IAAI,CAAV;AACAtB,gBAAAA,EAAC;AACD;AACH;AACJ;;AACD,gBAAI1B,cAAc,CAACgD,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAChC,kBAAI9B,MAAM,CAACwD,WAAD,CAAN,GAAsB,CAA1B,EAA6B;AACzB1B,gBAAAA,MAAM,IAAI,CAAV;;AACA,qBAAK4B,UAAL,CAAgB5E,cAAhB,EAAgCgD,MAAhC,EAAwCM,UAAU,CAAC5C,MAAnD;;AACAgB,gBAAAA,EAAC;;AACD,oBAAI,KAAK7C,gBAAT,EAA2B;AACvBoE,kBAAAA,MAAM,IAAI,GAAV;AACH;;AACD;AACH;AACJ;;AACD,gBAAIjD,cAAc,CAACgD,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAChC,kBAAI9B,MAAM,CAACwD,WAAD,CAAN,GAAsB,CAA1B,EAA6B;AACzB1B,gBAAAA,MAAM,IAAI,CAAV;;AACA,qBAAK4B,UAAL,CAAgB5E,cAAhB,EAAgCgD,MAAhC,EAAwCM,UAAU,CAAC5C,MAAnD;;AACAgB,gBAAAA,EAAC;;AACD,oBAAI,KAAK7C,gBAAT,EAA2B;AACvBoE,kBAAAA,MAAM,IAAI,GAAV;AACH;;AACD;AACH;AACJ;;AACD,gBAAM4B,SAAS,GAAG,EAAlB;;AACA,gBAAI7E,cAAc,CAACgD,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAChC,kBAAK9B,MAAM,CAACwD,WAAD,CAAN,GAAsB,CAAtB,IAA2B,KAAK7F,gBAAjC,IACAqC,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAjB,EAAyBA,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C6B,SAD/C,IAEAvD,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GAF/B,EAEoC;AAChCA,gBAAAA,MAAM,IAAI,CAAV;;AACA,qBAAK4B,UAAL,CAAgB5E,cAAhB,EAAgCgD,MAAhC,EAAwCM,UAAU,CAAC5C,MAAnD;;AACAgB,gBAAAA,EAAC;;AACD,oBAAI,KAAK7C,gBAAT,EAA2B;AACvBoE,kBAAAA,MAAM,IAAI,GAAV;AACH;;AACD;AACH;AACJ;;AACD,gBAAIjD,cAAc,CAACgD,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAChC,kBAAM8B,WAAW,GAAG,EAApB,CADgC,CAEhC;;AACA,kBAAMC,WAAW,GAAG/B,MAAM,KAAK,CAAX,KACf9B,MAAM,CAACwD,WAAD,CAAN,GAAsB,CAAtB,IACGxD,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAjB,EAAyBA,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C8B,WADlD,IAEGxD,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GAHf,CAApB,CAHgC,CAOhC;;AACA,kBAAMgC,cAAc,GAAG1D,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCrB,QAAzC,CAAkD,GAAlD,MACjBL,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GAA3B,IACE9B,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD8B,WADrD,IAEExD,UAAU,CAAC0B,MAAD,CAAV,KAAuB,GAF1B,IAGG1B,UAAU,CAAC0B,MAAD,CAAV,KAAuB,GAH1B,IAII1B,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GAA3B,IACG9B,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAA7B,CAAD,CAAN,GAA+C8B,WADlD,IAEGxD,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GANlC,IAOG1B,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GARZ,CAAvB,CARgC,CAiBhC;;AACA,kBAAMiC,cAAc,GAAG/D,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,IAAoD6B,SAApD,IACnB,CAACvD,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCrB,QAAzC,CAAkD,GAAlD,CADkB,IAEnBL,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GAFR,KAGlB9B,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAjB,EAAyBA,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C8B,WAA/C,IAA8DxD,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GAHvE,CAAvB,CAlBgC,CAsBhC;;AACA,kBAAMkC,cAAc,GAAGhE,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD6B,SAAnD,IACnB,CAACvD,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCrB,QAAzC,CAAkD,GAAlD,CADkB,IAEnB,CAACL,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAA7B,EAAqCrB,QAArC,CAA8C,GAA9C,CAFkB,IAGnBT,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAA7B,CAAD,CAAN,GAA+C8B,WAHnD,CAvBgC,CA2BhC;;AACA,kBAAMK,cAAc,GAAGjE,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,IAAoD6B,SAApD,IACnB,CAACvD,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCrB,QAAzC,CAAkD,GAAlD,CADkB,IAEnBL,UAAU,CAAC0B,MAAM,GAAG,CAAV,CAAV,KAA2B,GAFR,IAGnB9B,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBmC,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD8B,WAHvD;;AAIA,kBAAK5D,MAAM,CAACwD,WAAD,CAAN,GAAsB,CAAtB,IAA2B,KAAK7F,gBAAjC,IACAkG,WADA,IAEAC,cAFA,IAGAC,cAHA,IAIAC,cAJA,IAKAC,cALJ,EAKoB;AAChBnC,gBAAAA,MAAM,IAAI,CAAV;;AACA,qBAAK4B,UAAL,CAAgB5E,cAAhB,EAAgCgD,MAAhC,EAAwCM,UAAU,CAAC5C,MAAnD;;AACAgB,gBAAAA,EAAC;;AACD,oBAAI,KAAK7C,gBAAT,EAA2B;AACvBoE,kBAAAA,MAAM,IAAI,GAAV;AACH;;AACD;AACH;AACJ;;AACDA,YAAAA,MAAM,IAAIyB,WAAV;AACA1B,YAAAA,MAAM;AACT,WAxGI,MAyGA,IAAI,KAAKV,qBAAL,CAA2ByB,OAA3B,CAAmC/D,cAAc,CAACgD,MAAD,CAAjD,MAA+D,CAAC,CAApE,EAAuE;AACxEC,YAAAA,MAAM,IAAIjD,cAAc,CAACgD,MAAD,CAAxB;AACAA,YAAAA,MAAM;;AACN,iBAAK4B,UAAL,CAAgB5E,cAAhB,EAAgCgD,MAAhC,EAAwCM,UAAU,CAAC5C,MAAnD;;AACAgB,YAAAA,EAAC;AACJ,WALI,MAMA,IAAI,KAAKY,qBAAL,CAA2ByB,OAA3B,CAAmCW,WAAnC,IAAkD,CAAC,CAAnD,IACL,KAAKnC,qBAAL,CAA2BvC,cAAc,CAACgD,MAAD,CAAzC,CADK,IAEL,KAAKT,qBAAL,CAA2BvC,cAAc,CAACgD,MAAD,CAAzC,EAAmD/D,QAFlD,EAE4D;AAC7D,gBAAI,CAAC,CAACqE,UAAU,CAACN,MAAD,CAAZ,IACAhD,cAAc,KAAK,iBADnB,IAEAA,cAAc,KAAK,gBAFnB,IAGAA,cAAc,KAAK,oBAHvB,EAG6C;AACzCiD,cAAAA,MAAM,IAAIK,UAAU,CAACN,MAAD,CAApB;AACH;;AACDA,YAAAA,MAAM;AACNtB,YAAAA,EAAC;AACJ,WAXI,MAYA,IAAI,KAAK1B,cAAL,CAAoBgD,MAAM,GAAG,CAA7B,MAAoC,GAApC,IACL,KAAKoC,gBAAL,CAAsB,KAAKpF,cAAL,CAAoBgD,MAAM,GAAG,CAA7B,CAAtB,CADK,IAEL,KAAKoC,gBAAL,CAAsBV,WAAtB,MAAuC,KAAK1E,cAAL,CAAoBgD,MAAM,GAAG,CAA7B,CAFlC,IAGLE,KAHC,EAGM;AACPF,YAAAA,MAAM,IAAI,CAAV;AACAC,YAAAA,MAAM,IAAIyB,WAAV;AACH,WANI,MAOA,IAAI,KAAK1E,cAAL,CAAoBgD,MAAM,GAAG,CAA7B,MAAoC,GAApC,IACL,KAAKoC,gBAAL,CAAsB,KAAKpF,cAAL,CAAoBgD,MAAM,GAAG,CAA7B,CAAtB,CADK,IAEL,KAAKoC,gBAAL,CAAsBV,WAAtB,MAAuC,KAAK1E,cAAL,CAAoBgD,MAAM,GAAG,CAA7B,CAFlC,IAGLE,KAHC,EAGM;AACPF,YAAAA,MAAM,IAAI,CAAV;AACAC,YAAAA,MAAM,IAAIyB,WAAV;AACH,WANI,MAOA,IAAI,KAAKvG,aAAL,IACL,KAAKmE,qBAAL,CAA2ByB,OAA3B,CAAmCW,WAAnC,IAAkD,CAD7C,IAELA,WAAW,KAAK,KAAKtG,oBAFpB,EAE0C;AAC3CiF,YAAAA,QAAQ,GAAG,IAAX;AACH;AACJ;AACJ;;AACD,UAAIJ,MAAM,CAACvC,MAAP,GAAgB,CAAhB,KAAsBV,cAAc,CAACU,MAArC,IACA,KAAK4B,qBAAL,CAA2ByB,OAA3B,CAAmC/D,cAAc,CAACA,cAAc,CAACU,MAAf,GAAwB,CAAzB,CAAjD,MAAkF,CAAC,CADvF,EAC0F;AACtFuC,QAAAA,MAAM,IAAIjD,cAAc,CAACA,cAAc,CAACU,MAAf,GAAwB,CAAzB,CAAxB;AACH;;AACD,UAAI2E,WAAW,GAAGzC,QAAQ,GAAG,CAA7B;;AACA,aAAO,KAAKR,MAAL,CAAYkD,GAAZ,CAAgBD,WAAhB,CAAP,EAAqC;AACjCjC,QAAAA,KAAK;AACLiC,QAAAA,WAAW;AACd;;AACD,UAAIE,WAAW,GAAG1C,UAAU,GAAGG,MAAH,GAAY,KAAKZ,MAAL,CAAYkD,GAAZ,CAAgB1C,QAAhB,IAA4BQ,KAA5B,GAAoC,CAA5E;;AACA,UAAIC,QAAJ,EAAc;AACVkC,QAAAA,WAAW;AACd;;AACDxC,MAAAA,EAAE,CAACwC,WAAD,EAAcpC,cAAd,CAAF;;AACA,UAAIC,KAAK,GAAG,CAAZ,EAAe;AACX,aAAKhB,MAAL,CAAYqC,KAAZ;AACH;;AACD,UAAIe,WAAW,GAAG,KAAlB;;AACA,UAAI1C,UAAJ,EAAgB;AACZ0C,QAAAA,WAAW,GAAGlC,UAAU,CAACmC,KAAX,CAAiB,UAACC,IAAD;AAAA,iBAAU,MAAI,CAACpD,qBAAL,CAA2BX,QAA3B,CAAoC+D,IAApC,CAAV;AAAA,SAAjB,CAAd;AACH;;AACD,UAAI/E,GAAG,aAAM,KAAK7C,MAAX,SAAoB0H,WAAW,GAAG,EAAH,GAAQvC,MAAvC,SAAgD,KAAKpF,MAArD,CAAP;;AACA,UAAIoF,MAAM,CAACvC,MAAP,KAAkB,CAAtB,EAAyB;AACrBC,QAAAA,GAAG,aAAM,KAAK7C,MAAX,SAAoBmF,MAApB,CAAH;AACH;;AACD,aAAOtC,GAAP;AACH;;;WACD,0BAAiB+D,WAAjB,EAA8B;AAC1B,aAAO,KAAKpC,qBAAL,CAA2BqD,IAA3B,CAAgC,UAACC,GAAD;AAAA,eAASA,GAAG,KAAKlB,WAAjB;AAAA,OAAhC,CAAP;AACH;;;WACD,0BAAiBA,WAAjB,EAA8BmB,UAA9B,EAA0C;AACtC,WAAKtD,qBAAL,GAA6B,KAAKG,aAAL,GAAqB,KAAKA,aAA1B,GAA0C,KAAKH,qBAA5E;AACA,aAAQ,KAAKA,qBAAL,CAA2BsD,UAA3B,KACJ,KAAKtD,qBAAL,CAA2BsD,UAA3B,EAAuC9G,OADnC,IAEJ,KAAKwD,qBAAL,CAA2BsD,UAA3B,EAAuC9G,OAAvC,CAA+CgC,IAA/C,CAAoD2D,WAApD,CAFJ;AAGH;;;WACD,yBAAgBvE,GAAhB,EAAqB;AAAA;;AACjB,aAAOA,GAAG,CACLK,KADE,CACI,EADJ,EAEFiD,MAFE,CAEK,UAAC/B,CAAD,EAAIoE,GAAJ,EAAY;AACpB,eAAQpE,CAAC,CAACM,KAAF,CAAQ,QAAR,KACJN,CAAC,CAACM,KAAF,CAAQ,KAAR,CADI,IAEJN,CAAC,KAAK,GAFF,IAGJA,CAAC,KAAK,GAHF,IAIHA,CAAC,KAAK,GAAN,IAAaoE,GAAG,KAAK,CAArB,IAA0B,MAAI,CAACpH,oBAJpC;AAKH,OARM,EASFqH,IATE,CASG,EATH,CAAP;AAUH;;;WACD,iCAAwBL,IAAxB,EAA8B;AAC1B,UAAIA,IAAJ,EAAU;AACN,YAAMM,aAAa,GAAG,cAAtB;AACA,eAAON,IAAI,KAAK,GAAT,GAAe,KAAf,GAAuBM,aAAa,CAACjC,OAAd,CAAsB2B,IAAtB,KAA+B,CAA/B,GAAmC,OAAOA,IAA1C,GAAiDA,IAA/E;AACH;;AACD,aAAOA,IAAP;AACH;;;WACD,oBAAW1F,cAAX,EAA2BgD,MAA3B,EAAmCiD,WAAnC,EAAgD;AAC5C,UAAM1B,SAAS,GAAG,QAAQxD,IAAR,CAAaf,cAAc,CAACa,KAAf,CAAqB,CAArB,EAAwBmC,MAAxB,CAAb,IAAgDiD,WAAhD,GAA8DjD,MAAhF;;AACA,WAAKZ,MAAL,CAAYoC,GAAZ,CAAgBD,SAAS,GAAG,KAAKzG,MAAL,CAAY4C,MAAxB,IAAkC,CAAlD;AACH;;;;;;AAELZ,kBAAkB,CAACoG,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAItG,kBAAV,EAA8BtC,MAAM,CAAC6I,QAAP,CAAgB5I,MAAhB,CAA9B,CAAP;AAAgE,CAAnI;;AACAqC,kBAAkB,CAACwG,KAAnB,GAA2B,aAAc9I,MAAM,CAAC+I,kBAAP,CAA0B;AAAEC,EAAAA,KAAK,EAAE1G,kBAAT;AAA6B2G,EAAAA,OAAO,EAAE3G,kBAAkB,CAACoG;AAAzD,CAA1B,CAAzC;;AACApG,kBAAkB,CAAC4G,cAAnB,GAAoC;AAAA,SAAM,CACtC;AAAEC,IAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,IAAAA,UAAU,EAAE,CAAC;AAAED,MAAAA,IAAI,EAAEhK,MAAR;AAAgBkK,MAAAA,IAAI,EAAE,CAACpJ,MAAD;AAAtB,KAAD;AAA/B,GADsC,CAAN;AAAA,CAApC;;AAGA,CAAC,YAAY;AAAE,GAAC,OAAOqJ,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtJ,MAAM,CAACuJ,iBAAP,CAAyBjH,kBAAzB,EAA6C,CAAC;AACxG6G,IAAAA,IAAI,EAAEjK;AADkG,GAAD,CAA7C,EAE1D,YAAY;AAAE,WAAO,CAAC;AAAEiK,MAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,MAAAA,UAAU,EAAE,CAAC;AAC9CD,QAAAA,IAAI,EAAEhK,MADwC;AAE9CkK,QAAAA,IAAI,EAAE,CAACpJ,MAAD;AAFwC,OAAD;AAA/B,KAAD,CAAP;AAGF,GAL8C,EAK5C,IAL4C,CAAnD;AAKe,CAL9B;;IAOMuJ,W;;;;;AACF,uBAAYC,QAAZ,EAAsBlH,OAAtB,EAA+BmH,WAA/B,EAA4CC,SAA5C,EAAuD;AAAA;;AAAA;;AACnD,+BAAMpH,OAAN;AACA,WAAKkH,QAAL,GAAgBA,QAAhB;AACA,WAAKlH,OAAL,GAAeA,OAAf;AACA,WAAKmH,WAAL,GAAmBA,WAAnB;AACA,WAAKC,SAAL,GAAiBA,SAAjB;AACA,WAAKnH,cAAL,GAAsB,EAAtB;AACA,WAAKoH,aAAL,GAAqB,KAArB;AACA,WAAKhJ,oBAAL,GAA4B,GAA5B;AACA,WAAKiJ,WAAL,GAAmB,EAAnB;AACA,WAAKC,QAAL,GAAgB,IAAhB;AACA,WAAKC,MAAL,GAAc,IAAd;AACA;AACR;AACA;AACA;;AACQ,WAAKC,YAAL,GAAoB,KAApB;AACA,WAAKC,WAAL,GAAmB,KAAnB;;AACA,WAAKC,QAAL,GAAgB,UAACC,CAAD,EAAO,CAAG,CAA1B;;AAlBmD;AAmBtD,G,CACD;;;;;WACA,mBAAUrG,UAAV,EAAsBtB,cAAtB,EAA4G;AAAA;;AAAA,UAAtE4C,QAAsE,uEAA3D,CAA2D;AAAA,UAAxDC,UAAwD,uEAA3C,KAA2C;AAAA,UAApCC,UAAoC,uEAAvB,KAAuB;AAAA,UAAhBC,EAAgB,uEAAX,YAAM,CAAG,CAAE;;AACxG,UAAI,CAAC/C,cAAL,EAAqB;AACjB,eAAOsB,UAAP;AACH;;AACD,WAAK+F,WAAL,GAAmB,KAAKlJ,aAAL,GAAqB,KAAKyJ,eAAL,EAArB,GAA8C,EAAjE;;AACA,UAAI,KAAK5H,cAAL,KAAwB,IAAxB,IAAgC,KAAK7B,aAAzC,EAAwD;AACpD,aAAKkJ,WAAL,GAAmB,KAAKO,eAAL,CAAqBtG,UAAU,IAAI,GAAnC,CAAnB;AACH;;AACD,UAAI,KAAKtB,cAAL,KAAwB,UAAxB,IAAsC,KAAK7B,aAA/C,EAA8D;AAC1D,aAAKkJ,WAAL,GAAmB,KAAKO,eAAL,CAAqBtG,UAAU,IAAI,GAAnC,CAAnB;AACH;;AACD,UAAI,CAACA,UAAD,IAAe,KAAKnD,aAAxB,EAAuC;AACnC,aAAK0J,iBAAL,CAAuB,KAAK/J,MAA5B;AACA,eAAO,KAAKA,MAAL,GAAc,KAAKuJ,WAA1B;AACH;;AACD,UAAMS,SAAS,GAAG,CAAC,CAACxG,UAAF,IAAgB,OAAO,KAAKgG,QAAZ,KAAyB,QAAzC,GAAoDhG,UAAU,CAAC,KAAKgG,QAAN,CAA9D,GAAgF,EAAlG;AACA,UAAIS,aAAa,GAAG,EAApB;;AACA,UAAI,KAAKzJ,WAAL,IAAoB,CAAC,KAAKkJ,YAA9B,EAA4C;AACxC,YAAIQ,YAAY,GAAG,KAAK/H,WAAL,CAAiBO,KAAjB,CAAuB,EAAvB,CAAnB,CADwC,CAExC;;AACAc,QAAAA,UAAU,KAAK,EAAf,IAAqB0G,YAAY,CAACtH,MAAlC,GACM,OAAO,KAAK4G,QAAZ,KAAyB,QAAzB,IAAqC,OAAO,KAAKC,MAAZ,KAAuB,QAA5D,GACIjG,UAAU,CAACZ,MAAX,GAAoBsH,YAAY,CAACtH,MAAjC,GACIsH,YAAY,CAACC,MAAb,CAAoB,KAAKX,QAAzB,EAAmC,CAAnC,EAAsCQ,SAAtC,CADJ,GAEIxG,UAAU,CAACZ,MAAX,GAAoBsH,YAAY,CAACtH,MAAjC,GACIsH,YAAY,CAACtH,MAAb,GAAsBY,UAAU,CAACZ,MAAjC,KAA4C,CAA5C,GACIsH,YAAY,CAACC,MAAb,CAAoB,KAAKX,QAAL,GAAgB,CAApC,EAAuC,CAAvC,CADJ,GAEIU,YAAY,CAACC,MAAb,CAAoB,KAAKX,QAAzB,EAAmC,KAAKC,MAAL,GAAc,KAAKD,QAAtD,CAHR,GAII,IAPZ,GAQI,IATV,GAUOU,YAAY,GAAG,EAVtB,CAHwC,CAcxC;;AACAD,QAAAA,aAAa,GACT,KAAK9H,WAAL,CAAiBS,MAAjB,IAA2BsH,YAAY,CAACtH,MAAb,IAAuBY,UAAU,CAACZ,MAA7D,GACM,KAAKwH,iBAAL,CAAuBF,YAAY,CAACjC,IAAb,CAAkB,EAAlB,CAAvB,CADN,GAEMzE,UAHV;AAIH;;AACDyG,MAAAA,aAAa,GAAGI,OAAO,CAACJ,aAAD,CAAP,IAA0BA,aAAa,CAACrH,MAAxC,GAAiDqH,aAAjD,GAAiEzG,UAAjF;;AACA,UAAM2B,MAAM,8EAAmB8E,aAAnB,EAAkC/H,cAAlC,EAAkD4C,QAAlD,EAA4DC,UAA5D,EAAwEC,UAAxE,EAAoFC,EAApF,CAAZ;;AACA,WAAK9C,WAAL,GAAmB,KAAKmI,cAAL,CAAoBnF,MAApB,CAAnB,CAvCwG,CAwCxG;AACA;;AACA,UAAI,KAAKlF,iBAAL,KAA2B,GAA3B,IAAkC,KAAKC,aAAL,KAAuB,GAA7D,EAAkE;AAC9D,aAAKA,aAAL,GAAqB,GAArB;AACH,OA5CuG,CA6CxG;;;AACA,UAAI,KAAKgC,cAAL,CAAoB6D,UAApB,CAA+B,WAA/B,KAA+C,KAAKxF,qBAAL,KAA+B,IAAlF,EAAwF;AACpF,aAAKiE,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BmB,MAA3B,CAAkC,UAAC4E,IAAD;AAAA,iBAAUA,IAAI,KAAK,MAAI,CAACrK,aAAxB;AAAA,SAAlC,CAA7B;AACH;;AACD,WAAK6J,iBAAL,CAAuB5E,MAAvB;;AACA,UAAI,CAAC,KAAK9E,aAAV,EAAyB;AACrB,YAAI,KAAKG,WAAT,EAAsB;AAClB,iBAAO2E,MAAM,IAAIA,MAAM,CAACvC,MAAjB,GAA0B,KAAK4H,SAAL,CAAerF,MAAf,EAAuB,KAAKjD,cAA5B,CAA1B,GAAwEiD,MAA/E;AACH;;AACD,eAAOA,MAAP;AACH;;AACD,UAAMsF,MAAM,GAAGtF,MAAM,CAACvC,MAAtB;AACA,UAAM8H,SAAS,GAAG,KAAK1K,MAAL,GAAc,KAAKuJ,WAArC;;AACA,UAAI,KAAKrH,cAAL,CAAoB2B,QAApB,CAA6B,GAA7B,CAAJ,EAAuC;AACnC,YAAM8G,iBAAiB,GAAG,KAAKC,oBAAL,CAA0BzF,MAA1B,CAA1B;;AACA,eAAOA,MAAM,GAAGuF,SAAS,CAAC3H,KAAV,CAAgB0H,MAAM,GAAGE,iBAAzB,CAAhB;AACH,OAHD,MAIK,IAAI,KAAKzI,cAAL,KAAwB,IAAxB,IAAgC,KAAKA,cAAL,KAAwB,UAA5D,EAAwE;AACzE,eAAOiD,MAAM,GAAGuF,SAAhB;AACH;;AACD,aAAOvF,MAAM,GAAGuF,SAAS,CAAC3H,KAAV,CAAgB0H,MAAhB,CAAhB;AACH,K,CACD;;;;WACA,8BAAqBI,KAArB,EAA4B;AACxB,UAAMC,KAAK,GAAG,eAAd;AACA,UAAI5G,KAAK,GAAG4G,KAAK,CAACC,IAAN,CAAWF,KAAX,CAAZ;AACA,UAAIF,iBAAiB,GAAG,CAAxB;;AACA,aAAOzG,KAAK,IAAI,IAAhB,EAAsB;AAClByG,QAAAA,iBAAiB,IAAI,CAArB;AACAzG,QAAAA,KAAK,GAAG4G,KAAK,CAACC,IAAN,CAAWF,KAAX,CAAR;AACH;;AACD,aAAOF,iBAAP;AACH;;;WACD,6BAAwE;AAAA,UAAtD7F,QAAsD,uEAA3C,CAA2C;AAAA,UAAxCC,UAAwC;AAAA,UAA5BC,UAA4B;AAAA,UAAhBC,EAAgB,uEAAX,YAAM,CAAG,CAAE;AACpE,UAAM+F,WAAW,GAAG,KAAK5B,WAAL,CAAiB6B,aAArC;AACAD,MAAAA,WAAW,CAACH,KAAZ,GAAoB,KAAKhG,SAAL,CAAemG,WAAW,CAACH,KAA3B,EAAkC,KAAK3I,cAAvC,EAAuD4C,QAAvD,EAAiEC,UAAjE,EAA6EC,UAA7E,EAAyFC,EAAzF,CAApB;;AACA,UAAI+F,WAAW,KAAK,KAAK7B,QAAL,CAAc+B,aAAlC,EAAiD;AAC7C;AACH;;AACD,WAAKC,iBAAL;AACH;;;WACD,mBAAU3H,UAAV,EAAsBtB,cAAtB,EAAsC;AAAA;;AAClC,aAAOsB,UAAU,CACZd,KADE,CACI,EADJ,EAEF0I,GAFE,CAEE,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACtB,YAAI,MAAI,CAAC7G,qBAAL,IACA,MAAI,CAACA,qBAAL,CAA2BvC,cAAc,CAACoJ,KAAD,CAAzC,CADA,IAEA,MAAI,CAAC7G,qBAAL,CAA2BvC,cAAc,CAACoJ,KAAD,CAAzC,EAAkDjK,MAFtD,EAE8D;AAC1D,iBAAO,MAAI,CAACoD,qBAAL,CAA2BvC,cAAc,CAACoJ,KAAD,CAAzC,EAAkDjK,MAAzD;AACH;;AACD,eAAOgK,IAAP;AACH,OATM,EAUFpD,IAVE,CAUG,EAVH,CAAP;AAWH,K,CACD;;;;WACA,wBAAepF,GAAf,EAAoB;AAAA;;AAChB,UAAM0I,OAAO,GAAG1I,GAAG,CACdH,KADW,CACL,EADK,EAEXiD,MAFW,CAEJ,UAACtE,MAAD,EAASuC,CAAT;AAAA,eAAe,MAAI,CAACiD,gBAAL,CAAsBxF,MAAtB,EAA8B,MAAI,CAACa,cAAL,CAAoB0B,CAApB,CAA9B,KACtB,MAAI,CAACY,qBAAL,CAA2BX,QAA3B,CAAoC,MAAI,CAAC3B,cAAL,CAAoB0B,CAApB,CAApC,KAA+DvC,MAAM,KAAK,MAAI,CAACa,cAAL,CAAoB0B,CAApB,CADnE;AAAA,OAFI,CAAhB;;AAIA,UAAI2H,OAAO,CAACtD,IAAR,CAAa,EAAb,MAAqBpF,GAAzB,EAA8B;AAC1B,eAAO0I,OAAO,CAACtD,IAAR,CAAa,EAAb,CAAP;AACH;;AACD,aAAOpF,GAAP;AACH;;;WACD,2BAAkBW,UAAlB,EAA8B;AAAA;;AAC1B,UAAIgI,eAAe,GAAG,EAAtB;AACA,UAAMvB,aAAa,GAAIzG,UAAU,IAC7BA,UAAU,CAACd,KAAX,CAAiB,EAAjB,EAAqB0I,GAArB,CAAyB,UAACK,UAAD,EAAaH,KAAb,EAAuB;AAC5C,YAAI,MAAI,CAAC9G,qBAAL,CAA2BX,QAA3B,CAAoCL,UAAU,CAAC8H,KAAK,GAAG,CAAT,CAA9C,KACA9H,UAAU,CAAC8H,KAAK,GAAG,CAAT,CAAV,KAA0B,MAAI,CAACpJ,cAAL,CAAoBoJ,KAAK,GAAG,CAA5B,CAD9B,EAC8D;AAC1DE,UAAAA,eAAe,GAAGC,UAAlB;AACA,iBAAOjI,UAAU,CAAC8H,KAAK,GAAG,CAAT,CAAjB;AACH;;AACD,YAAIE,eAAe,CAAC5I,MAApB,EAA4B;AACxB,cAAM8I,aAAa,GAAGF,eAAtB;AACAA,UAAAA,eAAe,GAAG,EAAlB;AACA,iBAAOE,aAAP;AACH;;AACD,eAAOD,UAAP;AACH,OAZD,CADkB,IAclB,EAdJ;AAeA,aAAOxB,aAAa,CAAChC,IAAd,CAAmB,EAAnB,CAAP;AACH;;;WACD,yBAAgB0D,QAAhB,EAA0B;AACtB,UAAI,KAAKtL,aAAL,IAAsB,CAAC,CAAC,KAAKK,mBAAjC,EAAsD;AAClD,YAAI,KAAKwB,cAAL,CAAoBU,MAApB,KAA+B,KAAKlC,mBAAL,CAAyBkC,MAA5D,EAAoE;AAChE,gBAAM,IAAIgJ,KAAJ,CAAU,oDAAV,CAAN;AACH,SAFD,MAGK;AACD,iBAAO,KAAKlL,mBAAZ;AACH;AACJ,OAPD,MAQK,IAAI,KAAKL,aAAT,EAAwB;AACzB,YAAIsL,QAAJ,EAAc;AACV,cAAI,KAAKzJ,cAAL,KAAwB,IAA5B,EAAkC;AAC9B,mBAAO,KAAK2J,WAAL,CAAiBF,QAAjB,CAAP;AACH;;AACD,cAAI,KAAKzJ,cAAL,KAAwB,UAA5B,EAAwC;AACpC,mBAAO,KAAK4J,gBAAL,CAAsBH,QAAtB,CAAP;AACH;AACJ;;AACD,eAAO,KAAKzJ,cAAL,CAAoBY,OAApB,CAA4B,KAA5B,EAAmC,KAAKxC,oBAAxC,CAAP;AACH;;AACD,aAAO,EAAP;AACH;;;WACD,6BAAoB;AAChB,UAAM0K,WAAW,GAAG,KAAK5B,WAAL,CAAiB6B,aAArC;;AACA,UAAI,KAAK9K,eAAL,IACA,KAAKH,MAAL,CAAY4C,MAAZ,GAAqB,KAAKV,cAAL,CAAoBU,MAAzC,GAAkD,KAAK7C,MAAL,CAAY6C,MAA9D,KACIoI,WAAW,CAACH,KAAZ,CAAkB/H,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,EAAoCF,MAF5C,EAEoD;AAChD,aAAKmJ,mBAAL,GAA2B,CAAC,OAAD,EAAU,EAAV,CAA3B;AACA,aAAKlH,SAAL,CAAemG,WAAW,CAACH,KAA3B,EAAkC,KAAK3I,cAAvC;AACH;AACJ;;;SACD,mBAAuC;AAAA;;AAAA;AAAA,UAAd8J,IAAc;AAAA,UAARnB,KAAQ;;AACnCoB,MAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB;AAAA,eAAM,MAAI,CAAC9C,SAAL,CAAe+C,WAAf,CAA2B,MAAI,CAAChD,WAAL,CAAiB6B,aAA5C,EAA2De,IAA3D,EAAiEnB,KAAjE,CAAN;AAAA,OAAvB;AACH;;;WACD,gCAAuBlG,IAAvB,EAA6B;AAAA;;AACzB,UAAM0H,KAAK,GAAG1H,IAAI,CAACjC,KAAL,CAAW,EAAX,EAAeiD,MAAf,CAAsB,UAAC4E,IAAD;AAAA,eAAU,OAAI,CAACjD,gBAAL,CAAsBiD,IAAtB,CAAV;AAAA,OAAtB,CAAd;AACA,aAAO8B,KAAK,CAACzJ,MAAb;AACH;;;WACD,oBAAWY,UAAX,EAAuB;AACnB,aAAO,KAAK8I,WAAL,CAAiB,KAAKC,aAAL,CAAmB,KAAKC,aAAL,CAAmBhJ,UAAnB,CAAnB,CAAjB,EAAqE,KAAKgB,qBAAL,CAA2BiI,MAA3B,CAAkC,GAAlC,EAAuCA,MAAvC,CAA8C,KAAKnM,oBAAnD,CAArE,CAAP;AACH;;;WACD,qBAAYqL,QAAZ,EAAsB;AAClB,UAAIA,QAAQ,KAAK,GAAjB,EAAsB;AAClB,yBAAU,KAAKrL,oBAAf,cAAuC,KAAKA,oBAA5C,cAAoE,KAAKA,oBAAzE,cAAiG,KAAKA,oBAAtG;AACH;;AACD,UAAMsF,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+H,QAAQ,CAAC/I,MAA7B,EAAqCgB,CAAC,EAAtC,EAA0C;AACtC,YAAI+H,QAAQ,CAAC/H,CAAD,CAAR,CAAYM,KAAZ,CAAkB,KAAlB,CAAJ,EAA8B;AAC1B0B,UAAAA,GAAG,CAACC,IAAJ,CAAS8F,QAAQ,CAAC/H,CAAD,CAAjB;AACH;AACJ;;AACD,UAAIgC,GAAG,CAAChD,MAAJ,IAAc,CAAlB,EAAqB;AACjB,yBAAU,KAAKtC,oBAAf,cAAuC,KAAKA,oBAA5C,cAAoE,KAAKA,oBAAzE;AACH;;AACD,UAAIsF,GAAG,CAAChD,MAAJ,GAAa,CAAb,IAAkBgD,GAAG,CAAChD,MAAJ,IAAc,CAApC,EAAuC;AACnC,yBAAU,KAAKtC,oBAAf,cAAuC,KAAKA,oBAA5C;AACH;;AACD,UAAIsF,GAAG,CAAChD,MAAJ,GAAa,CAAb,IAAkBgD,GAAG,CAAChD,MAAJ,IAAc,CAApC,EAAuC;AACnC,eAAO,KAAKtC,oBAAZ;AACH;;AACD,UAAIsF,GAAG,CAAChD,MAAJ,GAAa,CAAb,IAAkBgD,GAAG,CAAChD,MAAJ,IAAc,EAApC,EAAwC;AACpC,eAAO,EAAP;AACH;;AACD,aAAO,EAAP;AACH;;;WACD,0BAAiB+I,QAAjB,EAA2B;AACvB,UAAMe,GAAG,GAAG,UAAG,KAAKpM,oBAAR,SAA+B,KAAKA,oBAApC,SAA2D,KAAKA,oBAAhE,eACJ,KAAKA,oBADD,SACwB,KAAKA,oBAD7B,SACoD,KAAKA,oBADzD,eAEJ,KAAKA,oBAFD,SAEwB,KAAKA,oBAF7B,SAEoD,KAAKA,oBAFzD,eAGJ,KAAKA,oBAHD,SAGwB,KAAKA,oBAH7B,CAAZ;AAIA,UAAMqM,IAAI,GAAG,UAAG,KAAKrM,oBAAR,SAA+B,KAAKA,oBAApC,eACL,KAAKA,oBADA,SACuB,KAAKA,oBAD5B,SACmD,KAAKA,oBADxD,eAEL,KAAKA,oBAFA,SAEuB,KAAKA,oBAF5B,SAEmD,KAAKA,oBAFxD,eAGL,KAAKA,oBAHA,SAGuB,KAAKA,oBAH5B,SAGmD,KAAKA,oBAHxD,SAG+E,KAAKA,oBAHpF,eAIL,KAAKA,oBAJA,SAIuB,KAAKA,oBAJ5B,CAAb;;AAKA,UAAIqL,QAAQ,KAAK,GAAjB,EAAsB;AAClB,eAAOe,GAAP;AACH;;AACD,UAAM9G,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+H,QAAQ,CAAC/I,MAA7B,EAAqCgB,CAAC,EAAtC,EAA0C;AACtC,YAAI+H,QAAQ,CAAC/H,CAAD,CAAR,CAAYM,KAAZ,CAAkB,KAAlB,CAAJ,EAA8B;AAC1B0B,UAAAA,GAAG,CAACC,IAAJ,CAAS8F,QAAQ,CAAC/H,CAAD,CAAjB;AACH;AACJ;;AACD,UAAIgC,GAAG,CAAChD,MAAJ,IAAc,CAAlB,EAAqB;AACjB,eAAO8J,GAAG,CAAC3J,KAAJ,CAAU6C,GAAG,CAAChD,MAAd,EAAsB8J,GAAG,CAAC9J,MAA1B,CAAP;AACH;;AACD,UAAIgD,GAAG,CAAChD,MAAJ,GAAa,CAAb,IAAkBgD,GAAG,CAAChD,MAAJ,IAAc,CAApC,EAAuC;AACnC,eAAO8J,GAAG,CAAC3J,KAAJ,CAAU6C,GAAG,CAAChD,MAAJ,GAAa,CAAvB,EAA0B8J,GAAG,CAAC9J,MAA9B,CAAP;AACH;;AACD,UAAIgD,GAAG,CAAChD,MAAJ,GAAa,CAAb,IAAkBgD,GAAG,CAAChD,MAAJ,IAAc,CAApC,EAAuC;AACnC,eAAO8J,GAAG,CAAC3J,KAAJ,CAAU6C,GAAG,CAAChD,MAAJ,GAAa,CAAvB,EAA0B8J,GAAG,CAAC9J,MAA9B,CAAP;AACH;;AACD,UAAIgD,GAAG,CAAChD,MAAJ,GAAa,CAAb,IAAkBgD,GAAG,CAAChD,MAAJ,GAAa,EAAnC,EAAuC;AACnC,eAAO8J,GAAG,CAAC3J,KAAJ,CAAU6C,GAAG,CAAChD,MAAJ,GAAa,CAAvB,EAA0B8J,GAAG,CAAC9J,MAA9B,CAAP;AACH;;AACD,UAAIgD,GAAG,CAAChD,MAAJ,KAAe,EAAnB,EAAuB;AACnB,eAAO,EAAP;AACH;;AACD,UAAIgD,GAAG,CAAChD,MAAJ,KAAe,EAAnB,EAAuB;AACnB,YAAI+I,QAAQ,CAAC/I,MAAT,KAAoB,EAAxB,EAA4B;AACxB,iBAAO+J,IAAI,CAAC5J,KAAL,CAAW,EAAX,EAAe4J,IAAI,CAAC/J,MAApB,CAAP;AACH;;AACD,eAAO+J,IAAI,CAAC5J,KAAL,CAAW,EAAX,EAAe4J,IAAI,CAAC/J,MAApB,CAAP;AACH;;AACD,UAAIgD,GAAG,CAAChD,MAAJ,GAAa,EAAb,IAAmBgD,GAAG,CAAChD,MAAJ,IAAc,EAArC,EAAyC;AACrC,eAAO+J,IAAI,CAAC5J,KAAL,CAAW6C,GAAG,CAAChD,MAAJ,GAAa,CAAxB,EAA2B+J,IAAI,CAAC/J,MAAhC,CAAP;AACH;;AACD,aAAO,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBY,UAAlB,EAA8B;AAC1B,UAAI,KAAKkG,YAAL,IAAqB,KAAKC,WAA9B,EAA2C;AACvC,aAAKA,WAAL,GAAmB,KAAnB;AACA;AACH;;AACD,UAAIiD,KAAK,CAACC,OAAN,CAAc,KAAKtM,qBAAnB,CAAJ,EAA+C;AAC3C,aAAKqJ,QAAL,CAAc,KAAKkD,SAAL,CAAe,KAAKR,WAAL,CAAiB,KAAKC,aAAL,CAAmB,KAAKC,aAAL,CAAmBhJ,UAAnB,CAAnB,CAAjB,EAAqE,KAAKjD,qBAA1E,CAAf,CAAd;AACH,OAFD,MAGK,IAAI,KAAKA,qBAAT,EAAgC;AACjC,aAAKqJ,QAAL,CAAc,KAAKkD,SAAL,CAAe,KAAKC,aAAL,CAAmBvJ,UAAnB,CAAf,CAAd;AACH,OAFI,MAGA;AACD,aAAKoG,QAAL,CAAc,KAAK2C,aAAL,CAAmB/I,UAAnB,CAAd;AACH;AACJ;;;WACD,mBAAUqH,KAAV,EAAiB;AACb,UAAI,CAAC,KAAKvB,aAAN,IAAuBuB,KAAK,KAAK,EAArC,EAAyC;AACrC,eAAOA,KAAP;AACH;;AACD,UAAMmC,GAAG,GAAG5J,MAAM,CAACyH,KAAD,CAAlB;AACA,aAAOzH,MAAM,CAAC6J,KAAP,CAAaD,GAAb,IAAoBnC,KAApB,GAA4BmC,GAAnC;AACH;;;WACD,qBAAYnC,KAAZ,EAAmBqC,0BAAnB,EAA+C;AAC3C,aAAOrC,KAAK,GAAGA,KAAK,CAAC/H,OAAN,CAAc,KAAKqK,gBAAL,CAAsBD,0BAAtB,CAAd,EAAiE,EAAjE,CAAH,GAA0ErC,KAAtF;AACH;;;WACD,uBAAcA,KAAd,EAAqB;AACjB,UAAI,CAAC,KAAK7K,MAAV,EAAkB;AACd,eAAO6K,KAAP;AACH;;AACD,aAAOA,KAAK,GAAGA,KAAK,CAAC/H,OAAN,CAAc,KAAK9C,MAAnB,EAA2B,EAA3B,CAAH,GAAoC6K,KAAhD;AACH;;;WACD,uBAAcA,KAAd,EAAqB;AACjB,UAAI,CAAC,KAAK9K,MAAV,EAAkB;AACd,eAAO8K,KAAP;AACH;;AACD,aAAOA,KAAK,GAAGA,KAAK,CAAC/H,OAAN,CAAc,KAAK/C,MAAnB,EAA2B,EAA3B,CAAH,GAAoC8K,KAAhD;AACH;;;WACD,iCAAwB1F,MAAxB,EAAgC;AAC5B,aAAO,KAAKmH,WAAL,CAAiB,KAAKC,aAAL,CAAmB,KAAKC,aAAL,CAAmBrH,MAAnB,CAAnB,CAAjB,EAAiE,KAAKX,qBAAtE,CAAP;AACH;;;WACD,0BAAiB0I,0BAAjB,EAA6C;AACzC,aAAO,IAAIhM,MAAJ,CAAWgM,0BAA0B,CAAC9B,GAA3B,CAA+B,UAACb,IAAD;AAAA,2BAAeA,IAAf;AAAA,OAA/B,EAAsDtC,IAAtD,CAA2D,GAA3D,CAAX,EAA4E,IAA5E,CAAP;AACH;;;WACD,uBAAc9C,MAAd,EAAsB;AAClB,UAAIA,MAAM,KAAK,EAAf,EAAmB;AACf,eAAOA,MAAP;AACH;;AACD,UAAMiI,kBAAkB,GAAG,KAAKC,2BAAL,CAAiC,KAAKnL,cAAtC,CAA3B;;AACA,UAAIoL,cAAc,GAAG,KAAKC,uBAAL,CAA6BpI,MAA7B,CAArB;;AACA,UAAI,KAAKjF,aAAL,KAAuB,GAA3B,EAAgC;AAC5BoN,QAAAA,cAAc,GAAGA,cAAc,CAACxK,OAAf,CAAuB,KAAK5C,aAA5B,EAA2C,GAA3C,CAAjB;AACH;;AACD,UAAI,CAAC,KAAKoJ,aAAV,EAAyB;AACrB,eAAOgE,cAAP;AACH;;AACD,UAAIF,kBAAJ,EAAwB;AACpB,YAAIjI,MAAM,KAAK,KAAKjF,aAApB,EAAmC;AAC/B,iBAAO,IAAP;AACH;;AACD,eAAO,KAAKsN,eAAL,CAAqB,KAAKtL,cAA1B,EAA0CoL,cAA1C,CAAP;AACH,OALD,MAMK;AACD,eAAOlK,MAAM,CAACkK,cAAD,CAAb;AACH;AACJ,K,CACD;;;;WACA,qCAA4BG,aAA5B,EAA2C;AACvC,UAAMC,OAAO,GAAGD,aAAa,CAACvJ,KAAd,CAAoB,IAAIhD,MAAJ,wBAApB,CAAhB;AACA,aAAOwM,OAAO,GAAGtK,MAAM,CAACsK,OAAO,CAAC,CAAD,CAAR,CAAT,GAAwB,IAAtC;AACH;;;WACD,yBAAgBC,mBAAhB,EAAqCL,cAArC,EAAqD;AACjD,UAAIK,mBAAmB,CAAC1H,OAApB,CAA4B,GAA5B,IAAmC,CAAvC,EAA0C;AACtC,eAAO7C,MAAM,CAACkK,cAAD,CAAN,CAAuBM,OAAvB,CAA+B,CAA/B,CAAP;AACH;;AACD,aAAOxK,MAAM,CAACkK,cAAD,CAAb;AACH;;;;EAvVqBtL,kB;;AAyV1BkH,WAAW,CAACd,IAAZ,GAAmB,SAASyF,mBAAT,CAA6BvF,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIY,WAAV,EAAuBxJ,MAAM,CAAC6I,QAAP,CAAgB9I,QAAhB,CAAvB,EAAkDC,MAAM,CAAC6I,QAAP,CAAgB5I,MAAhB,CAAlD,EAA2ED,MAAM,CAAC6I,QAAP,CAAgB7I,MAAM,CAACZ,UAAvB,CAA3E,EAA+GY,MAAM,CAAC6I,QAAP,CAAgB7I,MAAM,CAACX,SAAvB,CAA/G,CAAP;AAA2J,CAAhN;;AACAmK,WAAW,CAACV,KAAZ,GAAoB,aAAc9I,MAAM,CAAC+I,kBAAP,CAA0B;AAAEC,EAAAA,KAAK,EAAEQ,WAAT;AAAsBP,EAAAA,OAAO,EAAEO,WAAW,CAACd;AAA3C,CAA1B,CAAlC;;AACAc,WAAW,CAACN,cAAZ,GAA6B;AAAA,SAAM,CAC/B;AAAEC,IAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,IAAAA,UAAU,EAAE,CAAC;AAAED,MAAAA,IAAI,EAAEhK,MAAR;AAAgBkK,MAAAA,IAAI,EAAE,CAACtJ,QAAD;AAAtB,KAAD;AAA/B,GAD+B,EAE/B;AAAEoJ,IAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,IAAAA,UAAU,EAAE,CAAC;AAAED,MAAAA,IAAI,EAAEhK,MAAR;AAAgBkK,MAAAA,IAAI,EAAE,CAACpJ,MAAD;AAAtB,KAAD;AAA/B,GAF+B,EAG/B;AAAEkJ,IAAAA,IAAI,EAAE/J;AAAR,GAH+B,EAI/B;AAAE+J,IAAAA,IAAI,EAAE9J;AAAR,GAJ+B,CAAN;AAAA,CAA7B;;AAMA,CAAC,YAAY;AAAE,GAAC,OAAOiK,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtJ,MAAM,CAACuJ,iBAAP,CAAyBC,WAAzB,EAAsC,CAAC;AACjGL,IAAAA,IAAI,EAAEjK;AAD2F,GAAD,CAAtC,EAE1D,YAAY;AAAE,WAAO,CAAC;AAAEiK,MAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,MAAAA,UAAU,EAAE,CAAC;AAC9CD,QAAAA,IAAI,EAAEhK,MADwC;AAE9CkK,QAAAA,IAAI,EAAE,CAACtJ,QAAD;AAFwC,OAAD;AAA/B,KAAD,EAGX;AAAEoJ,MAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,MAAAA,UAAU,EAAE,CAAC;AAClCD,QAAAA,IAAI,EAAEhK,MAD4B;AAElCkK,QAAAA,IAAI,EAAE,CAACpJ,MAAD;AAF4B,OAAD;AAA/B,KAHW,EAMX;AAAEkJ,MAAAA,IAAI,EAAEnJ,MAAM,CAACZ;AAAf,KANW,EAMkB;AAAE+J,MAAAA,IAAI,EAAEnJ,MAAM,CAACX;AAAf,KANlB,CAAP;AAMuD,GARX,EAQa,IARb,CAAnD;AAQwE,CARvF,I,CAUA;AACA;;;IACM+O,a;AACF,yBAAY3E,QAAZ,EAAsB4E,YAAtB,EAAoC9L,OAApC,EAA6C;AAAA;;AACzC,SAAKkH,QAAL,GAAgBA,QAAhB;AACA,SAAK4E,YAAL,GAAoBA,YAApB;AACA,SAAK9L,OAAL,GAAeA,OAAf;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKpB,iBAAL,GAAyB,EAAzB;AACA,SAAKE,QAAL,GAAgB,EAAhB;AACA,SAAKhB,MAAL,GAAc,EAAd;AACA,SAAKD,MAAL,GAAc,EAAd;AACA,SAAKE,iBAAL,GAAyB,GAAzB;AACA,SAAKC,aAAL,GAAqB,GAArB;AACA,SAAKK,qBAAL,GAA6B,IAA7B;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKH,aAAL,GAAqB,IAArB;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACA,SAAKI,mBAAL,GAA2B,IAA3B;AACA,SAAKN,YAAL,GAAoB,IAApB;AACA,SAAKD,eAAL,GAAuB,IAAvB;AACA,SAAKU,UAAL,GAAkB,IAAlB;AACA,SAAKF,cAAL,GAAsB,IAAtB;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACA,SAAKG,gBAAL,GAAwB,IAAxB;AACA,SAAKiN,UAAL,GAAkB,EAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA,SAAKC,WAAL,GAAmB,KAAnB;;AACA,SAAKvE,QAAL,GAAgB,UAACC,CAAD,EAAO,CAAG,CAA1B;;AACA,SAAKuE,OAAL,GAAe,YAAM,CAAG,CAAxB;AACH;;;;WACD,qBAAYC,OAAZ,EAAqB;AACjB,UAAQnM,cAAR,GAA4SmM,OAA5S,CAAQnM,cAAR;AAAA,UAAwBpB,iBAAxB,GAA4SuN,OAA5S,CAAwBvN,iBAAxB;AAAA,UAA2CE,QAA3C,GAA4SqN,OAA5S,CAA2CrN,QAA3C;AAAA,UAAqDhB,MAArD,GAA4SqO,OAA5S,CAAqDrO,MAArD;AAAA,UAA6DD,MAA7D,GAA4SsO,OAA5S,CAA6DtO,MAA7D;AAAA,UAAqEE,iBAArE,GAA4SoO,OAA5S,CAAqEpO,iBAArE;AAAA,UAAwFC,aAAxF,GAA4SmO,OAA5S,CAAwFnO,aAAxF;AAAA,UAAuGK,qBAAvG,GAA4S8N,OAA5S,CAAuG9N,qBAAvG;AAAA,UAA8HC,WAA9H,GAA4S6N,OAA5S,CAA8H7N,WAA9H;AAAA,UAA2IH,aAA3I,GAA4SgO,OAA5S,CAA2IhO,aAA3I;AAAA,UAA0JC,oBAA1J,GAA4S+N,OAA5S,CAA0J/N,oBAA1J;AAAA,UAAgLI,mBAAhL,GAA4S2N,OAA5S,CAAgL3N,mBAAhL;AAAA,UAAqMN,YAArM,GAA4SiO,OAA5S,CAAqMjO,YAArM;AAAA,UAAmND,eAAnN,GAA4SkO,OAA5S,CAAmNlO,eAAnN;AAAA,UAAoOU,UAApO,GAA4SwN,OAA5S,CAAoOxN,UAApO;AAAA,UAAgPF,cAAhP,GAA4S0N,OAA5S,CAAgP1N,cAAhP;AAAA,UAAgQC,oBAAhQ,GAA4SyN,OAA5S,CAAgQzN,oBAAhQ;AAAA,UAAsRG,gBAAtR,GAA4SsN,OAA5S,CAAsRtN,gBAAtR;;AACA,UAAImB,cAAJ,EAAoB;AAChB,YAAIA,cAAc,CAACoM,YAAf,KAAgCpM,cAAc,CAACqM,aAA/C,IAAgE,CAACrM,cAAc,CAACsM,WAApF,EAAiG;AAC7F,eAAKT,YAAL,CAAkBpE,WAAlB,GAAgC,IAAhC;AACH;;AACD,aAAKqE,UAAL,GAAkB9L,cAAc,CAACoM,YAAf,IAA+B,EAAjD;;AACA,YAAIpM,cAAc,CAACoM,YAAf,IAA+BpM,cAAc,CAACoM,YAAf,CAA4B5L,KAA5B,CAAkC,IAAlC,EAAwCE,MAAxC,GAAiD,CAApF,EAAuF;AACnF,eAAKsL,oBAAL,GAA4BhM,cAAc,CAACoM,YAAf,CAA4B5L,KAA5B,CAAkC,IAAlC,EAAwC+L,IAAxC,CAA6C,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC/E,mBAAOD,CAAC,CAAC9L,MAAF,GAAW+L,CAAC,CAAC/L,MAApB;AACH,WAF2B,CAA5B;AAGA,eAAKoL,UAAL,GAAkB,KAAKE,oBAAL,CAA0B,CAA1B,CAAlB;AACA,eAAKhM,cAAL,GAAsB,KAAKgM,oBAAL,CAA0B,CAA1B,CAAtB;AACA,eAAKH,YAAL,CAAkB7L,cAAlB,GAAmC,KAAKgM,oBAAL,CAA0B,CAA1B,CAAnC;AACH;AACJ;;AACD,UAAIpN,iBAAJ,EAAuB;AACnB,YAAI,CAACA,iBAAiB,CAACwN,YAAnB,IAAmC,CAAC1B,KAAK,CAACC,OAAN,CAAc/L,iBAAiB,CAACwN,YAAhC,CAAxC,EAAuF;AACnF;AACH,SAFD,MAGK;AACD,eAAKP,YAAL,CAAkBvJ,qBAAlB,GAA0C1D,iBAAiB,CAACwN,YAAlB,IAAkC,EAA5E;AACH;AACJ,OAvBgB,CAwBjB;;;AACA,UAAItN,QAAQ,IAAIA,QAAQ,CAACsN,YAAzB,EAAuC;AACnC,aAAKP,YAAL,CAAkBtJ,qBAAlB,GAA0CzD,QAAQ,CAACsN,YAAnD;AACH;;AACD,UAAItO,MAAJ,EAAY;AACR,aAAK+N,YAAL,CAAkB/N,MAAlB,GAA2BA,MAAM,CAACsO,YAAlC;AACH;;AACD,UAAIvO,MAAJ,EAAY;AACR,aAAKgO,YAAL,CAAkBhO,MAAlB,GAA2BA,MAAM,CAACuO,YAAlC;AACH;;AACD,UAAIrO,iBAAJ,EAAuB;AACnB,aAAK8N,YAAL,CAAkB9N,iBAAlB,GAAsCA,iBAAiB,CAACqO,YAAxD;AACH;;AACD,UAAIpO,aAAJ,EAAmB;AACf,aAAK6N,YAAL,CAAkB7N,aAAlB,GAAkCA,aAAa,CAACoO,YAAhD;AACH;;AACD,UAAI/N,qBAAJ,EAA2B;AACvB,aAAKwN,YAAL,CAAkBxN,qBAAlB,GAA0CA,qBAAqB,CAAC+N,YAAhE;AACH;;AACD,UAAI9N,WAAJ,EAAiB;AACb,aAAKuN,YAAL,CAAkBvN,WAAlB,GAAgCA,WAAW,CAAC8N,YAA5C;AACH;;AACD,UAAIjO,aAAJ,EAAmB;AACf,aAAK0N,YAAL,CAAkB1N,aAAlB,GAAkCA,aAAa,CAACiO,YAAhD;AACH;;AACD,UAAIhO,oBAAJ,EAA0B;AACtB,aAAKyN,YAAL,CAAkBzN,oBAAlB,GAAyCA,oBAAoB,CAACgO,YAA9D;AACH;;AACD,UAAI5N,mBAAJ,EAAyB;AACrB,aAAKqN,YAAL,CAAkBrN,mBAAlB,GAAwCA,mBAAmB,CAAC4N,YAA5D;AACH;;AACD,UAAIlO,YAAJ,EAAkB;AACd,aAAK2N,YAAL,CAAkB3N,YAAlB,GAAiCA,YAAY,CAACkO,YAA9C;AACH;;AACD,UAAInO,eAAJ,EAAqB;AACjB,aAAK4N,YAAL,CAAkB5N,eAAlB,GAAoCA,eAAe,CAACmO,YAApD;AACH;;AACD,UAAIzN,UAAJ,EAAgB;AACZ,aAAKkN,YAAL,CAAkBlN,UAAlB,GAA+BA,UAAU,CAACyN,YAA1C;AACH;;AACD,UAAI3N,cAAJ,EAAoB;AAChB,aAAKoN,YAAL,CAAkBpN,cAAlB,GAAmCA,cAAc,CAAC2N,YAAlD;AACH;;AACD,UAAI1N,oBAAJ,EAA0B;AACtB,aAAKmN,YAAL,CAAkBnN,oBAAlB,GAAyCA,oBAAoB,CAAC0N,YAA9D;;AACA,YAAI,KAAKP,YAAL,CAAkBnN,oBAAtB,EAA4C;AACxC,eAAKmN,YAAL,CAAkBvJ,qBAAlB,GAA0C,KAAKuJ,YAAL,CAAkBvJ,qBAAlB,CAAwCmB,MAAxC,CAA+C,UAACiJ,CAAD;AAAA,mBAAOA,CAAC,KAAK,GAAb;AAAA,WAA/C,CAA1C;AACH;AACJ;;AACD,UAAI7N,gBAAJ,EAAsB;AAClB,aAAKgN,YAAL,CAAkBhN,gBAAlB,GAAqCA,gBAAgB,CAACuN,YAAtD;AACH;;AACD,WAAKO,UAAL;AACH,K,CACD;;;;WACA,yBAAoB;AAAA;;AAAA,UAAThE,KAAS,SAATA,KAAS;;AAChB,UAAI,CAAC,KAAKkD,YAAL,CAAkBlN,UAAnB,IAAiC,CAAC,KAAKmN,UAA3C,EAAuD;AACnD,eAAO,IAAP;AACH;;AACD,UAAI,KAAKD,YAAL,CAAkBrI,OAAtB,EAA+B;AAC3B,eAAO,KAAKoJ,sBAAL,CAA4BjE,KAA5B,CAAP;AACH;;AACD,UAAI,KAAKkD,YAAL,CAAkBjI,YAAtB,EAAoC;AAChC,eAAO,KAAKgJ,sBAAL,CAA4BjE,KAA5B,CAAP;AACH;;AACD,UAAI,KAAKmD,UAAL,CAAgBjI,UAAhB,CAA2B,WAA3B,CAAJ,EAA6C;AACzC,eAAO,IAAP;AACH;;AACD,UAAIhE,iBAAiB,CAAC8B,QAAlB,CAA2B,KAAKmK,UAAhC,CAAJ,EAAiD;AAC7C,eAAO,IAAP;AACH;;AACD,UAAI,KAAKD,YAAL,CAAkB5N,eAAtB,EAAuC;AACnC,eAAO,IAAP;AACH;;AACD,UAAI2B,SAAS,CAAC+B,QAAV,CAAmB,KAAKmK,UAAxB,CAAJ,EAAyC;AACrC,eAAO,KAAKe,aAAL,CAAmBlE,KAAnB,CAAP;AACH;;AACD,UAAIA,KAAK,IAAIA,KAAK,CAACpF,QAAN,GAAiB7C,MAAjB,IAA2B,CAAxC,EAA2C;AACvC,YAAIoM,YAAY,GAAG,CAAnB;;AADuC,mCAE5BC,GAF4B;AAGnC,cAAI,OAAI,CAAClB,YAAL,CAAkBtJ,qBAAlB,CAAwCwK,GAAxC,EAA6C9N,QAA7C,IACA,OAAI,CAAC4M,YAAL,CAAkBtJ,qBAAlB,CAAwCwK,GAAxC,EAA6C9N,QAA7C,KAA0D,IAD9D,EACoE;AAChE,gBAAI,OAAI,CAAC6M,UAAL,CAAgB/H,OAAhB,CAAwBgJ,GAAxB,MAAiC,OAAI,CAACjB,UAAL,CAAgBkB,WAAhB,CAA4BD,GAA5B,CAArC,EAAuE;AACnE,kBAAME,GAAG,GAAG,OAAI,CAACnB,UAAL,CACPtL,KADO,CACD,EADC,EAEPiD,MAFO,CAEA,UAAC/B,CAAD;AAAA,uBAAOA,CAAC,KAAKqL,GAAb;AAAA,eAFA,EAGPhH,IAHO,CAGF,EAHE,CAAZ;;AAIA+G,cAAAA,YAAY,IAAIG,GAAG,CAACvM,MAApB;AACH,aAND,MAOK,IAAI,OAAI,CAACoL,UAAL,CAAgB/H,OAAhB,CAAwBgJ,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AAC1CD,cAAAA,YAAY;AACf;;AACD,gBAAI,OAAI,CAAChB,UAAL,CAAgB/H,OAAhB,CAAwBgJ,GAAxB,MAAiC,CAAC,CAAlC,IAAuCpE,KAAK,CAACpF,QAAN,GAAiB7C,MAAjB,IAA2B,OAAI,CAACoL,UAAL,CAAgB/H,OAAhB,CAAwBgJ,GAAxB,CAAtE,EAAoG;AAChG;AAAA,mBAAO;AAAP;AACH;;AACD,gBAAID,YAAY,KAAK,OAAI,CAAChB,UAAL,CAAgBpL,MAArC,EAA6C;AACzC;AAAA,mBAAO;AAAP;AACH;AACJ;AArBkC;;AAEvC,aAAK,IAAMqM,GAAX,IAAkB,KAAKlB,YAAL,CAAkBtJ,qBAApC,EAA2D;AAAA,2BAAhDwK,GAAgD;;AAAA;AAoB1D;;AACD,YAAI,KAAKjB,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,MAAiC,CAAjC,IACA4E,KAAK,CAACpF,QAAN,GAAiB7C,MAAjB,KAA4B,KAAKoL,UAAL,CAAgBpL,MAAhB,GAAyBQ,MAAM,CAAC,KAAK4K,UAAL,CAAgBtL,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,EAA8BA,KAA9B,CAAoC,GAApC,EAAyC,CAAzC,CAAD,CAA/B,GAA+E,CAD/G,EACkH;AAC9G,iBAAO,IAAP;AACH;;AACD,YAAI,KAAKsL,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,MAAiC,CAAjC,IAAsC,KAAK+H,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,MAAiC,CAA3E,EAA8E;AAC1E,iBAAO,IAAP;AACH,SAFD,MAGK,IAAK,KAAK+H,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,IAA+B,CAA/B,IAAoC4E,KAAK,CAACpF,QAAN,GAAiB7C,MAAjB,GAA0B,KAAKoL,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,CAA/D,IACJ,KAAK+H,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,IAA+B,CAA/B,IAAoC4E,KAAK,CAACpF,QAAN,GAAiB7C,MAAjB,GAA0B,KAAKoL,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,CAD1D,IAEL,KAAK+H,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,MAAiC,CAFhC,EAEmC;AACpC,iBAAO,KAAK6I,sBAAL,CAA4BjE,KAA5B,CAAP;AACH;;AACD,YAAI,KAAKmD,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAAlC,IAAuC,KAAK+H,UAAL,CAAgB/H,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAA7E,EAAgF;AAC5E,cAAMrD,MAAM,GAAG,KAAKmL,YAAL,CAAkBxN,qBAAlB,GACT,KAAKyN,UAAL,CAAgBpL,MAAhB,GAAyB,KAAKmL,YAAL,CAAkBqB,sBAAlB,CAAyC,KAAKpB,UAA9C,CAAzB,GAAqFgB,YAD5E,GAET,KAAKhB,UAAL,CAAgBpL,MAAhB,GAAyBoM,YAF/B;;AAGA,cAAInE,KAAK,CAACpF,QAAN,GAAiB7C,MAAjB,GAA0BA,MAA9B,EAAsC;AAClC,mBAAO,KAAKkM,sBAAL,CAA4BjE,KAA5B,CAAP;AACH;AACJ;AACJ;;AACD,aAAO,IAAP;AACH;;;WACD,mBAAU;AACN,WAAKsD,WAAL,GAAmB,IAAnB;AACH;;;WACD,iBAAQkB,CAAR,EAAW;AAAA;;AACP,UAAMC,EAAE,GAAGD,CAAC,CAACE,MAAb;AACA,WAAKC,WAAL,GAAmBF,EAAE,CAACzE,KAAtB;;AACA,WAAK4E,QAAL;;AACA,UAAI,CAAC,KAAKzB,UAAV,EAAsB;AAClB,aAAKpE,QAAL,CAAc0F,EAAE,CAACzE,KAAjB;AACA;AACH;;AACD,UAAM/F,QAAQ,GAAGwK,EAAE,CAACI,cAAH,KAAsB,CAAtB,GACXJ,EAAE,CAACI,cAAH,GAAoB,KAAK3B,YAAL,CAAkB/N,MAAlB,CAAyB4C,MADlC,GAEX0M,EAAE,CAACI,cAFT;AAGA,UAAIC,UAAU,GAAG,CAAjB;AACA,UAAItK,cAAc,GAAG,KAArB;;AACA,WAAK0I,YAAL,CAAkB6B,iBAAlB,CAAoC9K,QAApC,EAA8C,KAAKqJ,WAAnD,EAAgE,KAAK0B,KAAL,KAAe,WAAf,IAA8B,KAAKA,KAAL,KAAe,QAA7G,EAAuH,UAACvK,KAAD,EAAQwK,eAAR,EAA4B;AAC/I,QAAA,OAAI,CAAC3B,WAAL,GAAmB,KAAnB;AACAwB,QAAAA,UAAU,GAAGrK,KAAb;AACAD,QAAAA,cAAc,GAAGyK,eAAjB;AACH,OAJD,EAbO,CAkBP;;;AACA,UAAI,KAAK3G,QAAL,CAAc+B,aAAd,KAAgCoE,EAApC,EAAwC;AACpC;AACH;;AACD,WAAKrB,SAAL,GAAiB,KAAKA,SAAL,KAAmB,CAAnB,IAAwB,KAAKuB,WAAL,CAAiB5M,MAAjB,KAA4B,CAApD,GAAwD,IAAxD,GAA+D,KAAKqL,SAArF;AACA,UAAI8B,eAAe,GAAG,KAAK9B,SAAL,GAChB,KAAKuB,WAAL,CAAiB5M,MAAjB,GAA0BkC,QAA1B,GAAqC6K,UADrB,GAEhB7K,QAAQ,IAAI,KAAK+K,KAAL,KAAe,WAAf,IAA8B,CAACxK,cAA/B,GAAgD,CAAhD,GAAoDsK,UAAxD,CAFd;;AAGA,UAAII,eAAe,GAAG,KAAKC,qBAAL,EAAtB,EAAoD;AAChDD,QAAAA,eAAe,GAAG,KAAKC,qBAAL,EAAlB;AACH;;AACD,UAAID,eAAe,GAAG,CAAtB,EAAyB;AACrBA,QAAAA,eAAe,GAAG,CAAlB;AACH;;AACDT,MAAAA,EAAE,CAACW,iBAAH,CAAqBF,eAArB,EAAsCA,eAAtC;AACA,WAAK9B,SAAL,GAAiB,IAAjB;AACH;;;WACD,kBAAS;AACL,UAAI,KAAKD,UAAT,EAAqB;AACjB,aAAKD,YAAL,CAAkB5C,iBAAlB;AACH;;AACD,WAAKiD,OAAL;AACH;;;WACD,iBAAQiB,CAAR,EAAW;AACP,UAAI,CAAC,KAAKrB,UAAV,EAAsB;AAClB;AACH;;AACD,UAAMsB,EAAE,GAAGD,CAAC,CAACE,MAAb;AACA,UAAMW,QAAQ,GAAG,CAAjB;AACA,UAAMC,MAAM,GAAG,CAAf;;AACA,UAAIb,EAAE,KAAK,IAAP,IACAA,EAAE,CAACI,cAAH,KAAsB,IADtB,IAEAJ,EAAE,CAACI,cAAH,KAAsBJ,EAAE,CAACc,YAFzB,IAGAd,EAAE,CAACI,cAAH,GAAoB,KAAK3B,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAH7C,IAIA;AACAyM,MAAAA,CAAC,CAACgB,OAAF,KAAc,EALlB,EAKsB;AAClB,YAAI,KAAKtC,YAAL,CAAkB1N,aAAtB,EAAqC;AACjC;AACA,eAAK0N,YAAL,CAAkBxE,WAAlB,GAAgC,KAAKwE,YAAL,CAAkBjE,eAAlB,EAAhC;;AACA,cAAIwF,EAAE,CAACW,iBAAH,IAAwB,KAAKlC,YAAL,CAAkB/N,MAAlB,GAA2B,KAAK+N,YAAL,CAAkBxE,WAA7C,KAA6D+F,EAAE,CAACzE,KAA5F,EAAmG;AAC/F;AACAyE,YAAAA,EAAE,CAACgB,KAAH;AACAhB,YAAAA,EAAE,CAACW,iBAAH,CAAqBC,QAArB,EAA+BC,MAA/B;AACH,WAJD,MAKK;AACD;AACA,gBAAIb,EAAE,CAACI,cAAH,GAAoB,KAAK3B,YAAL,CAAkB5L,WAAlB,CAA8BS,MAAtD,EAA8D;AAC1D;AACA0M,cAAAA,EAAE,CAACW,iBAAH,CAAqB,KAAKlC,YAAL,CAAkB5L,WAAlB,CAA8BS,MAAnD,EAA2D,KAAKmL,YAAL,CAAkB5L,WAAlB,CAA8BS,MAAzF;AACH;AACJ;AACJ;AACJ;;AACD,UAAM2N,SAAS,GAAG,CAACjB,EAAE,CAACzE,KAAJ,IAAayE,EAAE,CAACzE,KAAH,KAAa,KAAKkD,YAAL,CAAkB/N,MAA5C,GACZ,KAAK+N,YAAL,CAAkB/N,MAAlB,GAA2B,KAAK+N,YAAL,CAAkBxE,WADjC,GAEZ+F,EAAE,CAACzE,KAFT;AAGA;;AACA,UAAIyE,EAAE,CAACzE,KAAH,KAAa0F,SAAjB,EAA4B;AACxBjB,QAAAA,EAAE,CAACzE,KAAH,GAAW0F,SAAX;AACH;AACD;;;AACA,UAAI,CAACjB,EAAE,CAACI,cAAH,IAAqBJ,EAAE,CAACc,YAAzB,KAA0C,KAAKrC,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAAvE,EAA+E;AAC3E0M,QAAAA,EAAE,CAACI,cAAH,GAAoB,KAAK3B,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAA7C;AACA;AACH;AACD;;;AACA,UAAI0M,EAAE,CAACc,YAAH,GAAkB,KAAKJ,qBAAL,EAAtB,EAAoD;AAChDV,QAAAA,EAAE,CAACc,YAAH,GAAkB,KAAKJ,qBAAL,EAAlB;AACH;AACJ,K,CACD;;;;WACA,mBAAUX,CAAV,EAAa;AACT,UAAI5L,EAAJ;;AACA,UAAI,CAAC,KAAKuK,UAAV,EAAsB;AAClB;AACH;;AACD,WAAK6B,KAAL,GAAaR,CAAC,CAACmB,IAAF,GAASnB,CAAC,CAACmB,IAAX,GAAkBnB,CAAC,CAACJ,GAAjC;AACA,UAAMK,EAAE,GAAGD,CAAC,CAACE,MAAb;AACA,WAAKC,WAAL,GAAmBF,EAAE,CAACzE,KAAtB;;AACA,WAAK4E,QAAL;;AACA,UAAIJ,CAAC,CAACgB,OAAF,KAAc,EAAlB,EAAsB;AAClBhB,QAAAA,CAAC,CAACoB,cAAF;AACH;;AACD,UAAIpB,CAAC,CAACgB,OAAF,KAAc,EAAd,IAAoBhB,CAAC,CAACgB,OAAF,KAAc,CAAlC,IAAuChB,CAAC,CAACgB,OAAF,KAAc,EAAzD,EAA6D;AACzD,YAAIhB,CAAC,CAACgB,OAAF,KAAc,CAAd,IAAmBf,EAAE,CAACzE,KAAH,CAASjI,MAAT,KAAoB,CAA3C,EAA8C;AAC1C0M,UAAAA,EAAE,CAACI,cAAH,GAAoBJ,EAAE,CAACc,YAAvB;AACH;;AACD,YAAIf,CAAC,CAACgB,OAAF,KAAc,CAAd,IAAmBf,EAAE,CAACI,cAAH,KAAsB,CAA7C,EAAgD;AAC5C;AACA,eAAK5O,iBAAL,GAAyB,CAAC,CAAC2C,EAAE,GAAG,KAAK3C,iBAAX,MAAkC,IAAlC,IAA0C2C,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACb,MAAvE,IACnB,KAAK9B,iBADc,GAEnB,KAAKmB,OAAL,CAAanB,iBAFnB;;AAGA,cAAI,KAAKd,MAAL,CAAY4C,MAAZ,GAAqB,CAArB,IAA0B0M,EAAE,CAACI,cAAH,IAAqB,KAAK1P,MAAL,CAAY4C,MAA/D,EAAuE;AACnE0M,YAAAA,EAAE,CAACW,iBAAH,CAAqB,KAAKjQ,MAAL,CAAY4C,MAAjC,EAAyC,KAAK5C,MAAL,CAAY4C,MAArD;AACH,WAFD,MAGK;AACD,gBAAI,KAAK4M,WAAL,CAAiB5M,MAAjB,KAA4B0M,EAAE,CAACI,cAA/B,IAAiDJ,EAAE,CAACI,cAAH,KAAsB,CAA3E,EAA8E;AAC1E,qBAAO,KAAK5O,iBAAL,CAAuB+C,QAAvB,CAAgC,KAAK2L,WAAL,CAAiBF,EAAE,CAACI,cAAH,GAAoB,CAArC,EAAwCjK,QAAxC,EAAhC,MACD,KAAKzF,MAAL,CAAY4C,MAAZ,IAAsB,CAAtB,IAA2B0M,EAAE,CAACI,cAAH,GAAoB,KAAK1P,MAAL,CAAY4C,MAA5D,IACG,KAAK5C,MAAL,CAAY4C,MAAZ,KAAuB,CAFxB,CAAP,EAEmC;AAC/B0M,gBAAAA,EAAE,CAACW,iBAAH,CAAqBX,EAAE,CAACI,cAAH,GAAoB,CAAzC,EAA4CJ,EAAE,CAACI,cAAH,GAAoB,CAAhE;AACH;AACJ;;AACD,iBAAKgB,wBAAL,CAA8BrB,CAAC,CAACgB,OAAhC,EAAyCf,EAAzC;AACH;AACJ;;AACD,aAAKoB,wBAAL,CAA8BrB,CAAC,CAACgB,OAAhC,EAAyCf,EAAzC;;AACA,YAAI,KAAKvB,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAAzB,IACA0M,EAAE,CAACI,cAAH,IAAqB,KAAK3B,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAD9C,IAEA0M,EAAE,CAACc,YAAH,IAAmB,KAAKrC,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAFhD,EAEwD;AACpDyM,UAAAA,CAAC,CAACoB,cAAF;AACH;;AACD,YAAME,WAAW,GAAGrB,EAAE,CAACI,cAAvB,CA7ByD,CA8BzD;;AACA,YAAIL,CAAC,CAACgB,OAAF,KAAc,CAAd,IACA,CAACf,EAAE,CAACsB,QADJ,IAEAD,WAAW,KAAK,CAFhB,IAGArB,EAAE,CAACc,YAAH,KAAoBd,EAAE,CAACzE,KAAH,CAASjI,MAH7B,IAIA0M,EAAE,CAACzE,KAAH,CAASjI,MAAT,KAAoB,CAJxB,EAI2B;AACvB,eAAKqL,SAAL,GAAiB,KAAKF,YAAL,CAAkB/N,MAAlB,GAA2B,KAAK+N,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAApD,GAA6D,CAA9E;;AACA,eAAKmL,YAAL,CAAkBlJ,SAAlB,CAA4B,KAAKkJ,YAAL,CAAkB/N,MAA9C,EAAsD,KAAK+N,YAAL,CAAkB7L,cAAxE,EAAwF,KAAK+L,SAA7F;AACH;AACJ;;AACD,UAAI,CAAC,CAAC,KAAKlO,MAAP,IACA,KAAKA,MAAL,CAAY6C,MAAZ,GAAqB,CADrB,IAEA,KAAK4M,WAAL,CAAiB5M,MAAjB,GAA0B,KAAK7C,MAAL,CAAY6C,MAAtC,GAA+C0M,EAAE,CAACI,cAFtD,EAEsE;AAClEJ,QAAAA,EAAE,CAACW,iBAAH,CAAqB,KAAKT,WAAL,CAAiB5M,MAAjB,GAA0B,KAAK7C,MAAL,CAAY6C,MAA3D,EAAmE,KAAK4M,WAAL,CAAiB5M,MAApF;AACH,OAJD,MAKK,IAAKyM,CAAC,CAACgB,OAAF,KAAc,EAAd,IAAoBhB,CAAC,CAACwB,OAAF,KAAc,IAAnC,IAA4C;AAChDxB,MAAAA,CAAC,CAACgB,OAAF,KAAc,EAAd,IAAoBhB,CAAC,CAACyB,OAAF,KAAc,IADlC,CACwC;AADxC,QAEH;AACExB,QAAAA,EAAE,CAACW,iBAAH,CAAqB,CAArB,EAAwB,KAAKD,qBAAL,EAAxB;AACAX,QAAAA,CAAC,CAACoB,cAAF;AACH;;AACD,WAAK1C,YAAL,CAAkBvE,QAAlB,GAA6B8F,EAAE,CAACI,cAAhC;AACA,WAAK3B,YAAL,CAAkBtE,MAAlB,GAA2B6F,EAAE,CAACc,YAA9B;AACH;AACD;;;;WACA,oBAAW5M,UAAX,EAAuB;AACnB,aAAOlE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,wCAAuB;AAAA;AAAA;AAAA;AAAA;AACnC,oBAAI,OAAOkE,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,KAAK,IAAjD,IAAyD,WAAWA,UAAxE,EAAoF;AAChF,sBAAI,aAAaA,UAAjB,EAA6B;AACzB,yBAAKuN,gBAAL,CAAsB1G,OAAO,CAAC7G,UAAU,CAACwN,OAAZ,CAA7B;AACH;;AACDxN,kBAAAA,UAAU,GAAGA,UAAU,CAACqH,KAAxB;AACH;;AACD,oBAAIrH,UAAU,KAAK/C,SAAnB,EAA8B;AAC1B+C,kBAAAA,UAAU,GAAG,EAAb;AACH;;AACD,oBAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAChCA,kBAAAA,UAAU,GAAGyN,MAAM,CAACzN,UAAD,CAAnB;AACAA,kBAAAA,UAAU,GAAG,KAAKtD,aAAL,KAAuB,GAAvB,GAA6BsD,UAAU,CAACV,OAAX,CAAmB,GAAnB,EAAwB,KAAK5C,aAA7B,CAA7B,GAA2EsD,UAAxF;AACA,uBAAKuK,YAAL,CAAkBzE,aAAlB,GAAkC,IAAlC;AACH;;AACD,qBAAKkG,WAAL,GAAmBhM,UAAnB;;AACA,qBAAKiM,QAAL;;AACA,oBAAKjM,UAAU,IAAI,KAAKuK,YAAL,CAAkB7L,cAAjC,IACC,KAAK6L,YAAL,CAAkB7L,cAAlB,KAAqC,KAAK6L,YAAL,CAAkB/N,MAAlB,IAA4B,KAAK+N,YAAL,CAAkB1N,aAAnF,CADL,EACyG;AACrG;AACA,uBAAK0N,YAAL,CAAkBrE,YAAlB,GAAiC,IAAjC;AACA,uBAAKqE,YAAL,CAAkBhC,mBAAlB,GAAwC,CACpC,OADoC,EAEpC,KAAKgC,YAAL,CAAkBlJ,SAAlB,CAA4BrB,UAA5B,EAAwC,KAAKuK,YAAL,CAAkB7L,cAA1D,CAFoC,CAAxC,CAHqG,CAOrG;;AACA,uBAAK6L,YAAL,CAAkBrE,YAAlB,GAAiC,KAAjC;AACH,iBAVD,MAWK;AACD,uBAAKqE,YAAL,CAAkBhC,mBAAlB,GAAwC,CAAC,OAAD,EAAUvI,UAAV,CAAxC;AACH;;AACD,qBAAKgM,WAAL,GAAmBhM,UAAnB;;AA/BmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB,EAAhB;AAiCH;;;WACD,0BAAiB0N,EAAjB,EAAqB;AACjB,WAAKtH,QAAL,GAAgBsH,EAAhB;AACA,WAAKnD,YAAL,CAAkBnE,QAAlB,GAA6B,KAAKA,QAAlC;AACH;;;WACD,2BAAkBsH,EAAlB,EAAsB;AAClB,WAAK9C,OAAL,GAAe8C,EAAf;AACH;;;WACD,kCAAyBb,OAAzB,EAAkCf,EAAlC,EAAsC;AAClC,UAAIe,OAAO,KAAK,EAAZ,IAAkB,KAAKtQ,MAAL,CAAY6C,MAAZ,GAAqB,CAA3C,EAA8C;AAC1C,YAAI,KAAK4M,WAAL,CAAiB5M,MAAjB,GAA0B,KAAK7C,MAAL,CAAY6C,MAAtC,IAAgD0M,EAAE,CAACI,cAAvD,EAAuE;AACnEJ,UAAAA,EAAE,CAACW,iBAAH,CAAqB,KAAKT,WAAL,CAAiB5M,MAAjB,GAA0B,KAAK7C,MAAL,CAAY6C,MAA3D,EAAmE,KAAK4M,WAAL,CAAiB5M,MAApF;AACH;AACJ;;AACD,UAAIyN,OAAO,KAAK,CAAhB,EAAmB;AACf,YAAI,KAAKtQ,MAAL,CAAY6C,MAAZ,GAAqB,CAArB,IAA0B,KAAK4M,WAAL,CAAiB5M,MAAjB,GAA0B,KAAK7C,MAAL,CAAY6C,MAAtC,GAA+C0M,EAAE,CAACI,cAAhF,EAAgG;AAC5FJ,UAAAA,EAAE,CAACW,iBAAH,CAAqB,KAAKT,WAAL,CAAiB5M,MAAjB,GAA0B,KAAK7C,MAAL,CAAY6C,MAA3D,EAAmE,KAAK4M,WAAL,CAAiB5M,MAApF;AACH;;AACD,YAAI,KAAK7C,MAAL,CAAY6C,MAAZ,KAAuB,CAAvB,IAA4B,KAAK4M,WAAL,CAAiB5M,MAAjB,KAA4B0M,EAAE,CAACI,cAA/D,EAA+E;AAC3EJ,UAAAA,EAAE,CAACW,iBAAH,CAAqBX,EAAE,CAACI,cAAH,GAAoB,CAAzC,EAA4CJ,EAAE,CAACI,cAAH,GAAoB,CAAhE;AACH;AACJ;AACJ;AACD;;;;WACA,0BAAiByB,UAAjB,EAA6B;AACzB,WAAKpD,YAAL,CAAkBhC,mBAAlB,GAAwC,CAAC,UAAD,EAAaoF,UAAb,CAAxC;AACH;;;WACD,+BAAsBC,OAAtB,EAA+B;AAAA;;AAC3B,aAASA,OAAO,CAAClN,KAAR,CAAc,UAAd,KACLkN,OAAO,CAAC1O,KAAR,CAAc,EAAd,EAAkB2O,MAAlB,CAAyB,UAACC,KAAD,EAAQC,OAAR,EAAiBjG,KAAjB,EAA2B;AAChD,QAAA,OAAI,CAACkG,MAAL,GAAcD,OAAO,KAAK,GAAZ,GAAkBjG,KAAlB,GAA0B,OAAI,CAACkG,MAA7C;;AACA,YAAID,OAAO,KAAK,GAAhB,EAAqB;AACjB,iBAAO,OAAI,CAACxD,YAAL,CAAkBzG,gBAAlB,CAAmCiK,OAAnC,IAA8CD,KAAK,GAAGC,OAAtD,GAAgED,KAAvE;AACH;;AACD,QAAA,OAAI,CAACG,IAAL,GAAYnG,KAAZ;AACA,YAAMoG,YAAY,GAAGtO,MAAM,CAACgO,OAAO,CAACrO,KAAR,CAAc,OAAI,CAACyO,MAAL,GAAc,CAA5B,EAA+B,OAAI,CAACC,IAApC,CAAD,CAA3B;AACA,YAAME,WAAW,GAAG,IAAI/E,KAAJ,CAAU8E,YAAY,GAAG,CAAzB,EAA4BzJ,IAA5B,CAAiCmJ,OAAO,CAAC,OAAI,CAACI,MAAL,GAAc,CAAf,CAAxC,CAApB;AACA,eAAOF,KAAK,GAAGK,WAAf;AACH,OATD,EASG,EATH,CADI,IAWJP,OAXJ;AAYH,K,CACD;;;;WACA,sBAAa;AACT,WAAKrD,YAAL,CAAkB7L,cAAlB,GAAmC,KAAK0P,qBAAL,CAA2B,KAAK5D,UAAL,IAAmB,EAA9C,CAAnC;AACA,WAAKD,YAAL,CAAkBhC,mBAAlB,GAAwC,CACpC,OADoC,EAEpC,KAAKgC,YAAL,CAAkBlJ,SAAlB,CAA4B,KAAK2K,WAAjC,EAA8C,KAAKzB,YAAL,CAAkB7L,cAAhE,CAFoC,CAAxC;AAIH;;;WACD,uBAAc2I,KAAd,EAAqB;AACjB,UAAMgH,UAAU,GAAG,KAAK7D,UAAL,CAAgBtL,KAAhB,CAAsB,EAAtB,EAA0BiD,MAA1B,CAAiC,UAAC9D,CAAD;AAAA,eAAOA,CAAC,KAAK,GAAb;AAAA,OAAjC,EAAmDe,MAAtE;;AACA,UAAI,CAACiI,KAAL,EAAY;AACR,eAAO,IAAP,CADQ,CACK;AAChB;;AACD,UAAK,CAACA,KAAK,CAACA,KAAK,CAACjI,MAAN,GAAe,CAAhB,CAAN,KAA6B,CAA7B,IAAkCiI,KAAK,CAACjI,MAAN,GAAeiP,UAAlD,IAAiEhH,KAAK,CAACjI,MAAN,IAAgBiP,UAAU,GAAG,CAAlG,EAAqG;AACjG,eAAO,KAAK/C,sBAAL,CAA4BjE,KAA5B,CAAP;AACH;;AACD,aAAO,IAAP;AACH;;;WACD,iCAAwB;AACpB,aAAQ,KAAKkD,YAAL,CAAkB5L,WAAlB,CAA8BS,MAA9B,IAAwC,KAAKmL,YAAL,CAAkB5L,WAAlB,CAA8BS,MAA9B,GAAuC,KAAKmL,YAAL,CAAkB/N,MAAlB,CAAyB4C,MAAhH;AACH;;;WACD,gCAAuBT,WAAvB,EAAoC;AAChC,aAAO;AACHwC,QAAAA,IAAI,EAAE;AACFmN,UAAAA,YAAY,EAAE,KAAK9D,UADjB;AAEF7L,UAAAA,WAAW,EAAXA;AAFE;AADH,OAAP;AAMH;;;WACD,oBAAW;AAAA;;AACP,UAAI,KAAK+L,oBAAL,CAA0BtL,MAA1B,GAAmC,CAAvC,EAA0C;AACtC,aAAKsL,oBAAL,CAA0B6D,IAA1B,CAA+B,UAACpN,IAAD,EAAU;AACrC,cAAIlB,EAAJ,EAAQC,EAAR;;AACA,cAAMT,IAAI,GAAG,CAAC,CAACQ,EAAE,GAAG,OAAI,CAACsK,YAAL,CAAkBiE,UAAlB,CAA6B,OAAI,CAACxC,WAAlC,CAAN,MAA0D,IAA1D,IAAkE/L,EAAE,KAAK,KAAK,CAA9E,GAAkF,KAAK,CAAvF,GAA2FA,EAAE,CAACb,MAA/F,MAA2G,CAACc,EAAE,GAAG,OAAI,CAACqK,YAAL,CAAkBiE,UAAlB,CAA6BrN,IAA7B,CAAN,MAA8C,IAA9C,IAAsDjB,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACd,MAA7L,CAAb;;AACA,cAAI,OAAI,CAAC4M,WAAL,IAAoBvM,IAAxB,EAA8B;AAC1B,YAAA,OAAI,CAAC+K,UAAL,GAAkBrJ,IAAlB;AACA,YAAA,OAAI,CAACzC,cAAL,GAAsByC,IAAtB;AACA,YAAA,OAAI,CAACoJ,YAAL,CAAkB7L,cAAlB,GAAmCyC,IAAnC;AACA,mBAAO1B,IAAP;AACH,WALD,MAMK;AACD,YAAA,OAAI,CAAC+K,UAAL,GAAkB,OAAI,CAACE,oBAAL,CAA0B,OAAI,CAACA,oBAAL,CAA0BtL,MAA1B,GAAmC,CAA7D,CAAlB;AACA,YAAA,OAAI,CAACV,cAAL,GAAsB,OAAI,CAACgM,oBAAL,CAA0B,OAAI,CAACA,oBAAL,CAA0BtL,MAA1B,GAAmC,CAA7D,CAAtB;AACA,YAAA,OAAI,CAACmL,YAAL,CAAkB7L,cAAlB,GAAmC,OAAI,CAACgM,oBAAL,CAA0B,OAAI,CAACA,oBAAL,CAA0BtL,MAA1B,GAAmC,CAA7D,CAAnC;AACH;AACJ,SAdD;AAeH;AACJ;;;;;;AAELkL,aAAa,CAAC1F,IAAd,GAAqB,SAAS6J,qBAAT,CAA+B3J,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIwF,aAAV,EAAyBpO,MAAM,CAACwS,iBAAP,CAAyBzS,QAAzB,CAAzB,EAA6DC,MAAM,CAACwS,iBAAP,CAAyBhJ,WAAzB,CAA7D,EAAoGxJ,MAAM,CAACwS,iBAAP,CAAyBvS,MAAzB,CAApG,CAAP;AAA+I,CAAxM;;AACAmO,aAAa,CAACqE,IAAd,GAAqB,aAAczS,MAAM,CAAC0S,iBAAP,CAAyB;AAAEvJ,EAAAA,IAAI,EAAEiF,aAAR;AAAuBuE,EAAAA,SAAS,EAAE,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB,EAAlB,CAAD,EAAwB,CAAC,UAAD,EAAa,MAAb,EAAqB,EAArB,CAAxB,CAAlC;AAAqFC,EAAAA,YAAY,EAAE,SAASC,0BAAT,CAAoCC,EAApC,EAAwCC,GAAxC,EAA6C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAClN9S,MAAAA,MAAM,CAACgT,UAAP,CAAkB,OAAlB,EAA2B,SAASC,sCAAT,GAAkD;AAAE,eAAOF,GAAG,CAACG,OAAJ,EAAP;AAAuB,OAAtG,EAAwG,OAAxG,EAAiH,SAASC,sCAAT,CAAgDC,MAAhD,EAAwD;AAAE,eAAOL,GAAG,CAACM,OAAJ,CAAYD,MAAZ,CAAP;AAA6B,OAAxM,EAA0M,MAA1M,EAAkN,SAASE,qCAAT,GAAiD;AAAE,eAAOP,GAAG,CAACQ,MAAJ,EAAP;AAAsB,OAA3R,EAA6R,OAA7R,EAAsS,SAASC,sCAAT,CAAgDJ,MAAhD,EAAwD;AAAE,eAAOL,GAAG,CAACU,OAAJ,CAAYL,MAAZ,CAAP;AAA6B,OAA7X,EAA+X,SAA/X,EAA0Y,SAASM,wCAAT,CAAkDN,MAAlD,EAA0D;AAAE,eAAOL,GAAG,CAACY,SAAJ,CAAcP,MAAd,CAAP;AAA+B,OAAre;AACH;AAAE,GAFqD;AAEnDQ,EAAAA,MAAM,EAAE;AAAEpR,IAAAA,cAAc,EAAE,CAAC,MAAD,EAAS,gBAAT,CAAlB;AAA8CpB,IAAAA,iBAAiB,EAAE,mBAAjE;AAAsFE,IAAAA,QAAQ,EAAE,UAAhG;AAA4GhB,IAAAA,MAAM,EAAE,QAApH;AAA8HD,IAAAA,MAAM,EAAE,QAAtI;AAAgJE,IAAAA,iBAAiB,EAAE,mBAAnK;AAAwLC,IAAAA,aAAa,EAAE,eAAvM;AAAwNK,IAAAA,qBAAqB,EAAE,uBAA/O;AAAwQC,IAAAA,WAAW,EAAE,aAArR;AAAoSH,IAAAA,aAAa,EAAE,eAAnT;AAAoUC,IAAAA,oBAAoB,EAAE,sBAA1V;AAAkXI,IAAAA,mBAAmB,EAAE,qBAAvY;AAA8ZN,IAAAA,YAAY,EAAE,cAA5a;AAA4bD,IAAAA,eAAe,EAAE,iBAA7c;AAAgeU,IAAAA,UAAU,EAAE,YAA5e;AAA0fF,IAAAA,cAAc,EAAE,gBAA1gB;AAA4hBC,IAAAA,oBAAoB,EAAE,sBAAljB;AAA0kBG,IAAAA,gBAAgB,EAAE;AAA5lB,GAF2C;AAEukBwS,EAAAA,QAAQ,EAAE,CAAC7T,MAAM,CAAC8T,kBAAP,CAA0B,CAC5pB;AACIC,IAAAA,OAAO,EAAElU,iBADb;AAEImU,IAAAA,WAAW,EAAEzU,UAAU,CAAC;AAAA,aAAM6O,aAAN;AAAA,KAAD,CAF3B;AAGI1I,IAAAA,KAAK,EAAE;AAHX,GAD4pB,EAM5pB;AACIqO,IAAAA,OAAO,EAAEjU,aADb;AAEIkU,IAAAA,WAAW,EAAEzU,UAAU,CAAC;AAAA,aAAM6O,aAAN;AAAA,KAAD,CAF3B;AAGI1I,IAAAA,KAAK,EAAE;AAHX,GAN4pB,EAW5pB8D,WAX4pB,CAA1B,CAAD,EAYjoBxJ,MAAM,CAACiU,oBAZ0nB;AAFjlB,CAAzB,CAAnC;;AAeA7F,aAAa,CAAClF,cAAd,GAA+B;AAAA,SAAM,CACjC;AAAEC,IAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,IAAAA,UAAU,EAAE,CAAC;AAAED,MAAAA,IAAI,EAAEhK,MAAR;AAAgBkK,MAAAA,IAAI,EAAE,CAACtJ,QAAD;AAAtB,KAAD;AAA/B,GADiC,EAEjC;AAAEoJ,IAAAA,IAAI,EAAEK;AAAR,GAFiC,EAGjC;AAAEL,IAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,IAAAA,UAAU,EAAE,CAAC;AAAED,MAAAA,IAAI,EAAEhK,MAAR;AAAgBkK,MAAAA,IAAI,EAAE,CAACpJ,MAAD;AAAtB,KAAD;AAA/B,GAHiC,CAAN;AAAA,CAA/B;;AAKAmO,aAAa,CAAC8F,cAAd,GAA+B;AAC3B1R,EAAAA,cAAc,EAAE,CAAC;AAAE2G,IAAAA,IAAI,EAAE3J,KAAR;AAAe6J,IAAAA,IAAI,EAAE,CAAC,MAAD;AAArB,GAAD,CADW;AAE3BjI,EAAAA,iBAAiB,EAAE,CAAC;AAAE+H,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAFQ;AAG3B8B,EAAAA,QAAQ,EAAE,CAAC;AAAE6H,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAHiB;AAI3Bc,EAAAA,MAAM,EAAE,CAAC;AAAE6I,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAJmB;AAK3Ba,EAAAA,MAAM,EAAE,CAAC;AAAE8I,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CALmB;AAM3Be,EAAAA,iBAAiB,EAAE,CAAC;AAAE4I,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CANQ;AAO3BgB,EAAAA,aAAa,EAAE,CAAC;AAAE2I,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAPY;AAQ3BqB,EAAAA,qBAAqB,EAAE,CAAC;AAAEsI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CARI;AAS3BsB,EAAAA,WAAW,EAAE,CAAC;AAAEqI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CATc;AAU3BmB,EAAAA,aAAa,EAAE,CAAC;AAAEwI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAVY;AAW3BoB,EAAAA,oBAAoB,EAAE,CAAC;AAAEuI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAXK;AAY3BwB,EAAAA,mBAAmB,EAAE,CAAC;AAAEmI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAZM;AAa3BkB,EAAAA,YAAY,EAAE,CAAC;AAAEyI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAba;AAc3BiB,EAAAA,eAAe,EAAE,CAAC;AAAE0I,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAdU;AAe3B2B,EAAAA,UAAU,EAAE,CAAC;AAAEgI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAfe;AAgB3ByB,EAAAA,cAAc,EAAE,CAAC;AAAEkI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAhBW;AAiB3B0B,EAAAA,oBAAoB,EAAE,CAAC;AAAEiI,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAjBK;AAkB3B6B,EAAAA,gBAAgB,EAAE,CAAC;AAAE8H,IAAAA,IAAI,EAAE3J;AAAR,GAAD,CAlBS;AAmB3B0T,EAAAA,OAAO,EAAE,CAAC;AAAE/J,IAAAA,IAAI,EAAE1J,YAAR;AAAsB4J,IAAAA,IAAI,EAAE,CAAC,OAAD;AAA5B,GAAD,CAnBkB;AAoB3BgK,EAAAA,OAAO,EAAE,CAAC;AAAElK,IAAAA,IAAI,EAAE1J,YAAR;AAAsB4J,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAA5B,GAAD,CApBkB;AAqB3BkK,EAAAA,MAAM,EAAE,CAAC;AAAEpK,IAAAA,IAAI,EAAE1J,YAAR;AAAsB4J,IAAAA,IAAI,EAAE,CAAC,MAAD;AAA5B,GAAD,CArBmB;AAsB3BoK,EAAAA,OAAO,EAAE,CAAC;AAAEtK,IAAAA,IAAI,EAAE1J,YAAR;AAAsB4J,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAA5B,GAAD,CAtBkB;AAuB3BsK,EAAAA,SAAS,EAAE,CAAC;AAAExK,IAAAA,IAAI,EAAE1J,YAAR;AAAsB4J,IAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,CAAC,QAAD,CAAZ;AAA5B,GAAD;AAvBgB,CAA/B;;AAyBA,CAAC,YAAY;AAAE,GAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtJ,MAAM,CAACuJ,iBAAP,CAAyB6E,aAAzB,EAAwC,CAAC;AACnGjF,IAAAA,IAAI,EAAE7J,SAD6F;AAEnG+J,IAAAA,IAAI,EAAE,CAAC;AACC8K,MAAAA,QAAQ,EAAE,6BADX;AAECC,MAAAA,SAAS,EAAE,CACP;AACIL,QAAAA,OAAO,EAAElU,iBADb;AAEImU,QAAAA,WAAW,EAAEzU,UAAU,CAAC;AAAA,iBAAM6O,aAAN;AAAA,SAAD,CAF3B;AAGI1I,QAAAA,KAAK,EAAE;AAHX,OADO,EAMP;AACIqO,QAAAA,OAAO,EAAEjU,aADb;AAEIkU,QAAAA,WAAW,EAAEzU,UAAU,CAAC;AAAA,iBAAM6O,aAAN;AAAA,SAAD,CAF3B;AAGI1I,QAAAA,KAAK,EAAE;AAHX,OANO,EAWP8D,WAXO;AAFZ,KAAD;AAF6F,GAAD,CAAxC,EAkB1D,YAAY;AAAE,WAAO,CAAC;AAAEL,MAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,MAAAA,UAAU,EAAE,CAAC;AAC9CD,QAAAA,IAAI,EAAEhK,MADwC;AAE9CkK,QAAAA,IAAI,EAAE,CAACtJ,QAAD;AAFwC,OAAD;AAA/B,KAAD,EAGX;AAAEoJ,MAAAA,IAAI,EAAEK;AAAR,KAHW,EAGY;AAAEL,MAAAA,IAAI,EAAEpI,SAAR;AAAmBqI,MAAAA,UAAU,EAAE,CAAC;AACzDD,QAAAA,IAAI,EAAEhK,MADmD;AAEzDkK,QAAAA,IAAI,EAAE,CAACpJ,MAAD;AAFmD,OAAD;AAA/B,KAHZ,CAAP;AAMF,GAxB8C,EAwB5C;AAAEuC,IAAAA,cAAc,EAAE,CAAC;AAC7B2G,MAAAA,IAAI,EAAE3J,KADuB;AAE7B6J,MAAAA,IAAI,EAAE,CAAC,MAAD;AAFuB,KAAD,CAAlB;AAGVjI,IAAAA,iBAAiB,EAAE,CAAC;AACpB+H,MAAAA,IAAI,EAAE3J;AADc,KAAD,CAHT;AAKV8B,IAAAA,QAAQ,EAAE,CAAC;AACX6H,MAAAA,IAAI,EAAE3J;AADK,KAAD,CALA;AAOVc,IAAAA,MAAM,EAAE,CAAC;AACT6I,MAAAA,IAAI,EAAE3J;AADG,KAAD,CAPE;AASVa,IAAAA,MAAM,EAAE,CAAC;AACT8I,MAAAA,IAAI,EAAE3J;AADG,KAAD,CATE;AAWVe,IAAAA,iBAAiB,EAAE,CAAC;AACpB4I,MAAAA,IAAI,EAAE3J;AADc,KAAD,CAXT;AAaVgB,IAAAA,aAAa,EAAE,CAAC;AAChB2I,MAAAA,IAAI,EAAE3J;AADU,KAAD,CAbL;AAeVqB,IAAAA,qBAAqB,EAAE,CAAC;AACxBsI,MAAAA,IAAI,EAAE3J;AADkB,KAAD,CAfb;AAiBVsB,IAAAA,WAAW,EAAE,CAAC;AACdqI,MAAAA,IAAI,EAAE3J;AADQ,KAAD,CAjBH;AAmBVmB,IAAAA,aAAa,EAAE,CAAC;AAChBwI,MAAAA,IAAI,EAAE3J;AADU,KAAD,CAnBL;AAqBVoB,IAAAA,oBAAoB,EAAE,CAAC;AACvBuI,MAAAA,IAAI,EAAE3J;AADiB,KAAD,CArBZ;AAuBVwB,IAAAA,mBAAmB,EAAE,CAAC;AACtBmI,MAAAA,IAAI,EAAE3J;AADgB,KAAD,CAvBX;AAyBVkB,IAAAA,YAAY,EAAE,CAAC;AACfyI,MAAAA,IAAI,EAAE3J;AADS,KAAD,CAzBJ;AA2BViB,IAAAA,eAAe,EAAE,CAAC;AAClB0I,MAAAA,IAAI,EAAE3J;AADY,KAAD,CA3BP;AA6BV2B,IAAAA,UAAU,EAAE,CAAC;AACbgI,MAAAA,IAAI,EAAE3J;AADO,KAAD,CA7BF;AA+BVyB,IAAAA,cAAc,EAAE,CAAC;AACjBkI,MAAAA,IAAI,EAAE3J;AADW,KAAD,CA/BN;AAiCV0B,IAAAA,oBAAoB,EAAE,CAAC;AACvBiI,MAAAA,IAAI,EAAE3J;AADiB,KAAD,CAjCZ;AAmCV6B,IAAAA,gBAAgB,EAAE,CAAC;AACnB8H,MAAAA,IAAI,EAAE3J;AADa,KAAD,CAnCR;AAqCV0T,IAAAA,OAAO,EAAE,CAAC;AACV/J,MAAAA,IAAI,EAAE1J,YADI;AAEV4J,MAAAA,IAAI,EAAE,CAAC,OAAD;AAFI,KAAD,CArCC;AAwCVgK,IAAAA,OAAO,EAAE,CAAC;AACVlK,MAAAA,IAAI,EAAE1J,YADI;AAEV4J,MAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAFI,KAAD,CAxCC;AA2CVkK,IAAAA,MAAM,EAAE,CAAC;AACTpK,MAAAA,IAAI,EAAE1J,YADG;AAET4J,MAAAA,IAAI,EAAE,CAAC,MAAD;AAFG,KAAD,CA3CE;AA8CVoK,IAAAA,OAAO,EAAE,CAAC;AACVtK,MAAAA,IAAI,EAAE1J,YADI;AAEV4J,MAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAFI,KAAD,CA9CC;AAkDlB;AACAsK,IAAAA,SAAS,EAAE,CAAC;AACJxK,MAAAA,IAAI,EAAE1J,YADF;AAEJ4J,MAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,CAAC,QAAD,CAAZ;AAFF,KAAD;AAnDO,GAxB4C,CAAnD;AA8EC,CA9EhB;;IAgFMgL,Q;AACF,oBAAYhG,YAAZ,EAA0B;AAAA;;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACH;;;;WACD,mBAAUlD,KAAV,EAAiBlG,IAAjB,EAAiD;AAAA,UAA1B1E,iBAA0B,uEAAN,IAAM;;AAC7C,UAAI,CAAC4K,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACrC,eAAO,EAAP;AACH;;AACD,UAAI5K,iBAAJ,EAAuB;AACnB,aAAK8N,YAAL,CAAkB9N,iBAAlB,GAAsCA,iBAAtC;AACH;;AACD,UAAI,OAAO0E,IAAP,KAAgB,QAApB,EAA8B;AAC1B,eAAO,KAAKoJ,YAAL,CAAkBlJ,SAAlB,WAA+BgG,KAA/B,GAAwClG,IAAxC,CAAP;AACH;;AACD,aAAO,KAAKoJ,YAAL,CAAkBiG,oBAAlB,WAA0CnJ,KAA1C,GAAmDlG,IAAnD,CAAP;AACH;;;;;;AAELoP,QAAQ,CAAC3L,IAAT,GAAgB,SAAS6L,gBAAT,CAA0B3L,CAA1B,EAA6B;AAAE,SAAO,KAAKA,CAAC,IAAIyL,QAAV,EAAoBrU,MAAM,CAACwS,iBAAP,CAAyBlQ,kBAAzB,EAA6C,EAA7C,CAApB,CAAP;AAA+E,CAA9H;;AACA+R,QAAQ,CAACG,KAAT,GAAiB,aAAcxU,MAAM,CAACyU,YAAP,CAAoB;AAAEnI,EAAAA,IAAI,EAAE,MAAR;AAAgBnD,EAAAA,IAAI,EAAEkL,QAAtB;AAAgCK,EAAAA,IAAI,EAAE;AAAtC,CAApB,CAA/B;;AACAL,QAAQ,CAACnL,cAAT,GAA0B;AAAA,SAAM,CAC5B;AAAEC,IAAAA,IAAI,EAAE7G;AAAR,GAD4B,CAAN;AAAA,CAA1B;;AAGA,CAAC,YAAY;AAAE,GAAC,OAAOgH,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtJ,MAAM,CAACuJ,iBAAP,CAAyB8K,QAAzB,EAAmC,CAAC;AAC9FlL,IAAAA,IAAI,EAAEzJ,IADwF;AAE9F2J,IAAAA,IAAI,EAAE,CAAC;AACCiD,MAAAA,IAAI,EAAE,MADP;AAECoI,MAAAA,IAAI,EAAE;AAFP,KAAD;AAFwF,GAAD,CAAnC,EAM1D,YAAY;AAAE,WAAO,CAAC;AAAEvL,MAAAA,IAAI,EAAE7G;AAAR,KAAD,CAAP;AAAwC,GANI,EAMF,IANE,CAAnD;AAMyD,CANxE;;IAQMqS,a;;;;;;;WACF,iBAAeC,WAAf,EAA4B;AACxB,aAAO;AACHC,QAAAA,QAAQ,EAAEF,aADP;AAEHP,QAAAA,SAAS,EAAE,CACP;AACIL,UAAAA,OAAO,EAAE7T,UADb;AAEI4U,UAAAA,QAAQ,EAAEF;AAFd,SADO,EAKP;AACIb,UAAAA,OAAO,EAAE5T,cADb;AAEI2U,UAAAA,QAAQ,EAAE1U;AAFd,SALO,EASP;AACI2T,UAAAA,OAAO,EAAE9T,MADb;AAEI8U,UAAAA,UAAU,EAAEC,cAFhB;AAGIC,UAAAA,IAAI,EAAE,CAAC9U,cAAD,EAAiBD,UAAjB;AAHV,SATO,EAcPoC,kBAdO;AAFR,OAAP;AAmBH;;;WACD,oBAAkB;AACd,aAAO;AACHuS,QAAAA,QAAQ,EAAEF;AADP,OAAP;AAGH;;;;;;AAELA,aAAa,CAACjM,IAAd,GAAqB,SAASwM,qBAAT,CAA+BtM,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI+L,aAAV,GAAP;AAAoC,CAA7F;;AACAA,aAAa,CAACQ,IAAd,GAAqB,aAAcnV,MAAM,CAACoV,gBAAP,CAAwB;AAAEjM,EAAAA,IAAI,EAAEwL;AAAR,CAAxB,CAAnC;AACAA,aAAa,CAACU,IAAd,GAAqB,aAAcrV,MAAM,CAACsV,gBAAP,CAAwB,EAAxB,CAAnC;;AACA,CAAC,YAAY;AAAE,GAAC,OAAOhM,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtJ,MAAM,CAACuJ,iBAAP,CAAyBoL,aAAzB,EAAwC,CAAC;AACnGxL,IAAAA,IAAI,EAAExJ,QAD6F;AAEnG0J,IAAAA,IAAI,EAAE,CAAC;AACCkM,MAAAA,OAAO,EAAE,CAACnH,aAAD,EAAgBiG,QAAhB,CADV;AAECmB,MAAAA,YAAY,EAAE,CAACpH,aAAD,EAAgBiG,QAAhB;AAFf,KAAD;AAF6F,GAAD,CAAxC,EAM1D,IAN0D,EAMpD,IANoD,CAAnD;AAMO,CANtB;;AAOA,CAAC,YAAY;AAAE,GAAC,OAAOoB,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDzV,MAAM,CAAC0V,kBAAP,CAA0Bf,aAA1B,EAAyC;AAAEa,IAAAA,YAAY,EAAE,CAACpH,aAAD,EAAgBiG,QAAhB,CAAhB;AAA2CkB,IAAAA,OAAO,EAAE,CAACnH,aAAD,EAAgBiG,QAAhB;AAApD,GAAzC,CAAnD;AAA+K,CAA9L;AACA;AACA;AACA;;;AACA,SAASW,cAAT,CAAwBW,UAAxB,EAAoCf,WAApC,EAAiD;AAC7C,SAAOA,WAAW,YAAYgB,QAAvB,GAAkCC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,CAAd,EAA6Cf,WAAW,EAAxD,CAAlC,GAAgGiB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,CAAd,EAA6Cf,WAA7C,CAAvG;AACH;;AAED,IAAMmB,cAAc,GAAG,OAAOC,UAAP,KAAsB,WAAtB,GACjBA,UADiB,GAEjB,OAAOC,MAAP,KAAkB,WAAlB,GACIA,MADJ,GAEI,OAAOC,MAAP,KAAkB,WAAlB,GACIA,MADJ,GAEI,OAAOC,IAAP,KAAgB,WAAhB,GACIA,IADJ,GAEI,EARlB;;AASA,CAAC,YAAY;AACT,MAAI,CAACJ,cAAc,CAACK,aAApB,EAAmC;AAC/BL,IAAAA,cAAc,CAACK,aAAf,GAA+B,UAAUC,UAAV,EAAsBC,KAAtB,EAA6B,CAAG,CAA/D;AACH;AACJ,CAJD;AAMA;AACA;AACA;;;AAEA,SAASnW,cAAT,EAAyBmC,kBAAzB,EAA6C8L,aAA7C,EAA4DiG,QAA5D,EAAsE7K,WAAtE,EAAmFtJ,UAAnF,EAA+FyU,aAA/F,EAA8GK,cAA9G,EAA8H/U,MAA9H,EAAsIG,aAAtI,EAAqJgC,SAArJ,EAAgKC,iBAAhK","sourcesContent":["import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nconst config = new InjectionToken('config');\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: '.',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass MaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChar, precision) => {\n            const x = str.split(decimalChar);\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = x[0];\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            var _a, _b, _c;\n            for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n                const substr = this.suffix.substr(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n                if (inputValue.includes(substr) &&\n                    (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, (_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    const diff = precisionMatch[0].length - 1 - precision;\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((i) => i === '.').length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i].match('\\\\d')) {\n                arr.push(inputValue[i]);\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n            if (arr.length > 11) {\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            inputValue =\n                inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker && !backspaced\n                    ? inputValue.slice(1, inputValue.length)\n                    : inputValue;\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n            const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'\n                .replace(thousandSeperatorCharEscaped, '')\n                .replace(decimalMarkerEscaped, '');\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // tslint:disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00') {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            return (i.match('^-?\\\\d') ||\n                i.match('\\\\s') ||\n                i === '.' ||\n                i === ',' ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n}\nMaskApplierService.ɵfac = function MaskApplierService_Factory(t) { return new (t || MaskApplierService)(ɵngcc0.ɵɵinject(config)); };\nMaskApplierService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MaskApplierService, factory: MaskApplierService.ɵfac });\nMaskApplierService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskApplierService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [config]\n            }] }]; }, null); })();\n\nclass MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this.onChange = (_) => { };\n    }\n    // tslint:disable-next-line:cyclomatic-complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue = '';\n        if (this.hiddenInput && !this.writingValue) {\n            let actualResult = this.actualValue.split('');\n            // tslint:disable no-unused-expression\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            // tslint:enable no-unused-expression\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(''))\n                    : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item) => item !== this.decimalMarker);\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position = 0, justPasted, backspaced, cb = () => { }) {\n        const formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index]] &&\n                this.maskAvailablePatterns[maskExpression[index]].symbol) {\n                return this.maskAvailablePatterns[maskExpression[index]].symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split('')\n            .filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n            (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]));\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef.nativeElement;\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask.split('').filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || this.maskChanged) {\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        let separatorValue = this._retrieveSeparatorValue(result);\n        if (this.decimalMarker !== '.') {\n            separatorValue = separatorValue.replace(this.decimalMarker, '.');\n        }\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.ɵfac = function MaskService_Factory(t) { return new (t || MaskService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(config), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };\nMaskService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MaskService, factory: MaskService.ɵfac });\nMaskService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [config]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, null); })();\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\nclass MaskDirective {\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        this.onChange = (_) => { };\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            this._maskValue = maskExpression.currentValue || '';\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._maskValue = this._maskExpressionArray[0];\n                this.maskExpression = this._maskExpressionArray[0];\n                this._maskService.maskExpression = this._maskExpressionArray[0];\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        this._applyMask();\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onFocus(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = !el.value || el.value === this._maskService.prefix\n            ? this._maskService.prefix + this._maskService.maskIsShown\n            : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown(e) {\n        var _a;\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length)\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, this.prefix.length);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) &&\n                            ((this.prefix.length >= 1 && el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n                        }\n                    }\n                    this.suffixCheckOnPressDelete(e.keyCode, el);\n                }\n            }\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey === true) || // Ctrl+ A\n            (e.keyCode === 65 && e.metaKey === true) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    writeValue(inputValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n                if ('disable' in inputValue) {\n                    this.setDisabledState(Boolean(inputValue.disable));\n                }\n                inputValue = inputValue.value;\n            }\n            if (inputValue === undefined) {\n                inputValue = '';\n            }\n            if (typeof inputValue === 'number') {\n                inputValue = String(inputValue);\n                inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                this._maskService.isNumberValue = true;\n            }\n            this._inputValue = inputValue;\n            this._setMask();\n            if ((inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n                this._maskService.writingValue = true;\n                this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ];\n                // Let the service know we've finished writing value\n                this._maskService.writingValue = false;\n            }\n            else {\n                this._maskService.formElementProperty = ['value', inputValue];\n            }\n            this._inputValue = inputValue;\n        });\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    suffixCheckOnPressDelete(keyCode, el) {\n        if (keyCode === 46 && this.suffix.length > 0) {\n            if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n        }\n        if (keyCode === 8) {\n            if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n            }\n        }\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce((accum, currval, index) => {\n                this._start = currval === '{' ? index : this._start;\n                if (currval !== '}') {\n                    return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // tslint:disable-next-line:no-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue.split('').filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) || value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                var _a, _b;\n                const test = ((_a = this._maskService.removeMask(this._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                }\n            });\n        }\n    }\n}\nMaskDirective.ɵfac = function MaskDirective_Factory(t) { return new (t || MaskDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MaskService), ɵngcc0.ɵɵdirectiveInject(config)); };\nMaskDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MaskDirective, selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]], hostBindings: function MaskDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() { return ctx.onPaste(); })(\"input\", function MaskDirective_input_HostBindingHandler($event) { return ctx.onInput($event); })(\"blur\", function MaskDirective_blur_HostBindingHandler() { return ctx.onBlur(); })(\"click\", function MaskDirective_click_HostBindingHandler($event) { return ctx.onFocus($event); })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });\n    } }, inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MaskDirective),\n                multi: true\n            },\n            {\n                provide: NG_VALIDATORS,\n                useExisting: forwardRef(() => MaskDirective),\n                multi: true\n            },\n            MaskService,\n        ]), ɵngcc0.ɵɵNgOnChangesFeature] });\nMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: MaskService },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\nMaskDirective.propDecorators = {\n    maskExpression: [{ type: Input, args: ['mask',] }],\n    specialCharacters: [{ type: Input }],\n    patterns: [{ type: Input }],\n    prefix: [{ type: Input }],\n    suffix: [{ type: Input }],\n    thousandSeparator: [{ type: Input }],\n    decimalMarker: [{ type: Input }],\n    dropSpecialCharacters: [{ type: Input }],\n    hiddenInput: [{ type: Input }],\n    showMaskTyped: [{ type: Input }],\n    placeHolderCharacter: [{ type: Input }],\n    shownMaskExpression: [{ type: Input }],\n    showTemplate: [{ type: Input }],\n    clearIfNotMatch: [{ type: Input }],\n    validation: [{ type: Input }],\n    separatorLimit: [{ type: Input }],\n    allowNegativeNumbers: [{ type: Input }],\n    leadZeroDateTime: [{ type: Input }],\n    onPaste: [{ type: HostListener, args: ['paste',] }],\n    onInput: [{ type: HostListener, args: ['input', ['$event'],] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    onFocus: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'input[mask], textarea[mask]',\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MaskDirective),\n                        multi: true\n                    },\n                    {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef(() => MaskDirective),\n                        multi: true\n                    },\n                    MaskService,\n                ]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MaskService }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [config]\n            }] }]; }, { maskExpression: [{\n            type: Input,\n            args: ['mask']\n        }], specialCharacters: [{\n            type: Input\n        }], patterns: [{\n            type: Input\n        }], prefix: [{\n            type: Input\n        }], suffix: [{\n            type: Input\n        }], thousandSeparator: [{\n            type: Input\n        }], decimalMarker: [{\n            type: Input\n        }], dropSpecialCharacters: [{\n            type: Input\n        }], hiddenInput: [{\n            type: Input\n        }], showMaskTyped: [{\n            type: Input\n        }], placeHolderCharacter: [{\n            type: Input\n        }], shownMaskExpression: [{\n            type: Input\n        }], showTemplate: [{\n            type: Input\n        }], clearIfNotMatch: [{\n            type: Input\n        }], validation: [{\n            type: Input\n        }], separatorLimit: [{\n            type: Input\n        }], allowNegativeNumbers: [{\n            type: Input\n        }], leadZeroDateTime: [{\n            type: Input\n        }], onPaste: [{\n            type: HostListener,\n            args: ['paste']\n        }], onInput: [{\n            type: HostListener,\n            args: ['input', ['$event']]\n        }], onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }], onFocus: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], \n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown: [{\n            type: HostListener,\n            args: ['keydown', ['$event']]\n        }] }); })();\n\nclass MaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.ɵfac = function MaskPipe_Factory(t) { return new (t || MaskPipe)(ɵngcc0.ɵɵdirectiveInject(MaskApplierService, 16)); };\nMaskPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"mask\", type: MaskPipe, pure: true });\nMaskPipe.ctorParameters = () => [\n    { type: MaskApplierService }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'mask',\n                pure: true\n            }]\n    }], function () { return [{ type: MaskApplierService }]; }, null); })();\n\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) { return new (t || NgxMaskModule)(); };\nNgxMaskModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxMaskModule });\nNgxMaskModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMaskModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MaskDirective, MaskPipe],\n                declarations: [MaskDirective, MaskPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMaskModule, { declarations: [MaskDirective, MaskPipe], exports: [MaskDirective, MaskPipe] }); })();\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n\n"]},"metadata":{},"sourceType":"module"}