{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport dropEmptyRows from './dropEmptyRows';\nimport dropEmptyColumns from './dropEmptyColumns';\nexport default function getData(sheet, options) {\n  var dimensions = sheet.dimensions,\n      cells = sheet.cells; // If the sheet is empty.\n\n  if (cells.length === 0) {\n    return [];\n  }\n\n  var _dimensions = _slicedToArray(dimensions, 2),\n      leftTop = _dimensions[0],\n      rightBottom = _dimensions[1]; // Don't discard empty rows or columns at the start.\n  // https://github.com/catamphetamine/read-excel-file/issues/102\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\n\n\n  var colsCount = rightBottom.column;\n  var rowsCount = rightBottom.row; // Initialize spreadsheet data structure.\n\n  var data = new Array(rowsCount);\n  var i = 0;\n\n  while (i < rowsCount) {\n    data[i] = new Array(colsCount);\n    var j = 0;\n\n    while (j < colsCount) {\n      data[i][j] = null;\n      j++;\n    }\n\n    i++;\n  } // Fill in spreadsheet data structure.\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\n  //  maybe that's not correct, this piece code was initially copy-pasted\n  //  from some other library that used `XPath`)\n\n\n  for (var _iterator = _createForOfIteratorHelperLoose(cells), _step; !(_step = _iterator()).done;) {\n    var cell = _step.value; // Don't discard empty rows or columns at the start.\n    // https://github.com/catamphetamine/read-excel-file/issues/102\n    // const rowIndex = cell.row - leftTop.row\n    // const columnIndex = cell.column - leftTop.column\n\n    var rowIndex = cell.row - 1;\n    var columnIndex = cell.column - 1;\n    data[rowIndex][columnIndex] = cell.value;\n  } // Fill in the row map.\n\n\n  var rowMap = options.rowMap;\n\n  if (rowMap) {\n    var _i2 = 0;\n\n    while (_i2 < data.length) {\n      rowMap[_i2] = _i2;\n      _i2++;\n    }\n  } // Drop empty columns or rows.\n\n\n  data = dropEmptyRows(dropEmptyColumns(data, {\n    onlyTrimAtTheEnd: true\n  }), {\n    onlyTrimAtTheEnd: true,\n    rowMap: rowMap\n  }); // Optionally transform data before applying `schema`.\n\n  if (options.transformData) {\n    data = options.transformData(data); // data = options.transformData(data, {\n    //   dropEmptyRowsAndColumns(data) {\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\n    //   }\n    // })\n  }\n\n  return data;\n}","map":{"version":3,"sources":["C:/Users/NESRINE/Desktop/f/fgs/node_modules/read-excel-file/modules/read/getData.js"],"names":["_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","len","arr2","_i","_arr","_n","_d","_s","_e","push","err","dropEmptyRows","dropEmptyColumns","getData","sheet","options","dimensions","cells","_dimensions","leftTop","rightBottom","colsCount","column","rowsCount","row","data","j","_iterator","_step","cell","rowIndex","columnIndex","rowMap","_i2","onlyTrimAtTheEnd","transformData"],"mappings":"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","sourcesContent":["function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport dropEmptyRows from './dropEmptyRows';\nimport dropEmptyColumns from './dropEmptyColumns';\nexport default function getData(sheet, options) {\n  var dimensions = sheet.dimensions,\n      cells = sheet.cells; // If the sheet is empty.\n\n  if (cells.length === 0) {\n    return [];\n  }\n\n  var _dimensions = _slicedToArray(dimensions, 2),\n      leftTop = _dimensions[0],\n      rightBottom = _dimensions[1]; // Don't discard empty rows or columns at the start.\n  // https://github.com/catamphetamine/read-excel-file/issues/102\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\n\n\n  var colsCount = rightBottom.column;\n  var rowsCount = rightBottom.row; // Initialize spreadsheet data structure.\n\n  var data = new Array(rowsCount);\n  var i = 0;\n\n  while (i < rowsCount) {\n    data[i] = new Array(colsCount);\n    var j = 0;\n\n    while (j < colsCount) {\n      data[i][j] = null;\n      j++;\n    }\n\n    i++;\n  } // Fill in spreadsheet data structure.\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\n  //  maybe that's not correct, this piece code was initially copy-pasted\n  //  from some other library that used `XPath`)\n\n\n  for (var _iterator = _createForOfIteratorHelperLoose(cells), _step; !(_step = _iterator()).done;) {\n    var cell = _step.value;\n    // Don't discard empty rows or columns at the start.\n    // https://github.com/catamphetamine/read-excel-file/issues/102\n    // const rowIndex = cell.row - leftTop.row\n    // const columnIndex = cell.column - leftTop.column\n    var rowIndex = cell.row - 1;\n    var columnIndex = cell.column - 1;\n    data[rowIndex][columnIndex] = cell.value;\n  } // Fill in the row map.\n\n\n  var rowMap = options.rowMap;\n\n  if (rowMap) {\n    var _i2 = 0;\n\n    while (_i2 < data.length) {\n      rowMap[_i2] = _i2;\n      _i2++;\n    }\n  } // Drop empty columns or rows.\n\n\n  data = dropEmptyRows(dropEmptyColumns(data, {\n    onlyTrimAtTheEnd: true\n  }), {\n    onlyTrimAtTheEnd: true,\n    rowMap: rowMap\n  }); // Optionally transform data before applying `schema`.\n\n  if (options.transformData) {\n    data = options.transformData(data); // data = options.transformData(data, {\n    //   dropEmptyRowsAndColumns(data) {\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\n    //   }\n    // })\n  }\n\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}