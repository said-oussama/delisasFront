{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parseDate from '../parseDate';\nimport Integer, { isInteger } from '../../types/Integer';\nimport URL, { isURL } from '../../types/URL';\nimport Email, { isEmail } from '../../types/Email';\nvar DEFAULT_OPTIONS = {\n  isColumnOriented: false\n};\n/**\r\n * Convert 2D array to nested objects.\r\n * If row oriented data, row 0 is dotted key names.\r\n * Column oriented data is transposed.\r\n * @param {any[][]} data - An array of rows, each row being an array of cells.\r\n * @param {object} schema\r\n * @return {object[]}\r\n */\n\nexport default function (data, schema, options) {\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  var _options = options,\n      isColumnOriented = _options.isColumnOriented,\n      rowMap = _options.rowMap;\n  validateSchema(schema);\n\n  if (isColumnOriented) {\n    data = transpose(data);\n  }\n\n  var columns = data[0];\n  var results = [];\n  var errors = [];\n\n  for (var i = 1; i < data.length; i++) {\n    var result = read(schema, data[i], i - 1, columns, errors, options);\n\n    if (result) {\n      results.push(result);\n    }\n  } // Correct error rows.\n\n\n  if (rowMap) {\n    for (var _iterator = _createForOfIteratorHelperLoose(errors), _step; !(_step = _iterator()).done;) {\n      var error = _step.value; // Convert the `row` index in `data` to the\n      // actual `row` index in the spreadsheet.\n      // The `1` compensates for the header row.\n\n      error.row = rowMap[error.row] + 1;\n    }\n  }\n\n  return {\n    rows: results,\n    errors: errors\n  };\n}\n\nfunction read(schema, row, rowIndex, columns, errors, options) {\n  var object = {};\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var schemaEntry = schema[key];\n    var isNestedSchema = _typeof(schemaEntry.type) === 'object' && !Array.isArray(schemaEntry.type);\n    var rawValue = row[columns.indexOf(key)];\n\n    if (rawValue === undefined) {\n      rawValue = null;\n    }\n\n    var value = void 0;\n    var error = void 0;\n\n    if (isNestedSchema) {\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options);\n    } else {\n      if (rawValue === null) {\n        value = null;\n      } else if (Array.isArray(schemaEntry.type)) {\n        var notEmpty = false;\n        var array = parseArray(rawValue).map(function (_value) {\n          var result = parseValue(_value, schemaEntry, options);\n\n          if (result.error) {\n            value = _value;\n            error = result.error;\n          }\n\n          if (result.value !== null) {\n            notEmpty = true;\n          }\n\n          return result.value;\n        });\n\n        if (!error) {\n          value = notEmpty ? array : null;\n        }\n      } else {\n        var result = parseValue(rawValue, schemaEntry, options);\n        error = result.error;\n        value = error ? rawValue : result.value;\n      }\n    }\n\n    if (!error && value === null && schemaEntry.required) {\n      error = 'required';\n    }\n\n    if (error) {\n      error = {\n        error: error,\n        row: rowIndex + 1,\n        column: key,\n        value: value\n      };\n\n      if (schemaEntry.type) {\n        error.type = schemaEntry.type;\n      }\n\n      errors.push(error);\n    } else if (value !== null) {\n      object[schemaEntry.prop] = value;\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(schema); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n\n  if (Object.keys(object).length > 0) {\n    return object;\n  }\n\n  return null;\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {object} schemaEntry\r\n * @return {{ value: any, error: string }}\r\n */\n\n\nexport function parseValue(value, schemaEntry, options) {\n  if (value === null) {\n    return {\n      value: null\n    };\n  }\n\n  var result;\n\n  if (schemaEntry.parse) {\n    result = parseCustomValue(value, schemaEntry.parse);\n  } else if (schemaEntry.type) {\n    result = parseValueOfType(value, // Supports parsing array types.\n    // See `parseArray()` function for more details.\n    // Example `type`: String[]\n    // Input: 'Barack Obama, \"String, with, colons\", Donald Trump'\n    // Output: ['Barack Obama', 'String, with, colons', 'Donald Trump']\n    Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type, options);\n  } else {\n    result = {\n      value: value\n    }; // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\n  } // If errored then return the error.\n\n\n  if (result.error) {\n    return result;\n  }\n\n  if (result.value !== null) {\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\n      return {\n        error: 'invalid'\n      };\n    }\n\n    if (schemaEntry.validate) {\n      try {\n        schemaEntry.validate(result.value);\n      } catch (error) {\n        return {\n          error: error.message\n        };\n      }\n    }\n  }\n\n  return result;\n}\n/**\r\n * Converts textual value to a custom value using supplied `.parse()`.\r\n * @param  {any} value\r\n * @param  {function} parse\r\n * @return {{ value: any, error: string }}\r\n */\n\nfunction parseCustomValue(value, parse) {\n  try {\n    value = parse(value);\n\n    if (value === undefined) {\n      return {\n        value: null\n      };\n    }\n\n    return {\n      value: value\n    };\n  } catch (error) {\n    return {\n      error: error.message\n    };\n  }\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {} type\r\n * @return {{ value: (string|number|Date|boolean), error: string }}\r\n */\n\n\nfunction parseValueOfType(value, type, options) {\n  switch (type) {\n    case String:\n      if (typeof value === 'string') {\n        return {\n          value: value\n        };\n      } // The global `isFinite()` function filters out:\n      // * NaN\n      // * -Infinity\n      // * Infinity\n      // All other values pass (including non-numbers).\n\n\n      if (typeof value === 'number') {\n        if (isFinite(value)) {\n          return {\n            value: String(value)\n          };\n        }\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Number:\n    case Integer:\n      // Convert strings to numbers.\n      // Just an additional feature.\n      // Won't happen when called from `readXlsx()`.\n      if (typeof value === 'string') {\n        var stringifiedValue = value;\n        value = parseFloat(value);\n\n        if (String(value) !== stringifiedValue) {\n          return {\n            error: 'invalid'\n          };\n        }\n      } else if (typeof value !== 'number') {\n        return {\n          error: 'invalid'\n        };\n      } // The global `isFinite()` function filters out:\n      // * NaN\n      // * -Infinity\n      // * Infinity\n      // All other values pass (including non-numbers).\n      // At this point, `value` can only be a number.\n\n\n      if (!isFinite(value)) {\n        return {\n          error: 'invalid'\n        };\n      }\n\n      if (type === Integer && !isInteger(value)) {\n        return {\n          error: 'invalid'\n        };\n      }\n\n      return {\n        value: value\n      };\n\n    case URL:\n      if (typeof value === 'string') {\n        if (isURL(value)) {\n          return {\n            value: value\n          };\n        }\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Email:\n      if (typeof value === 'string') {\n        if (isEmail(value)) {\n          return {\n            value: value\n          };\n        }\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Date:\n      // XLSX has no specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      if (value instanceof Date) {\n        return {\n          value: value\n        };\n      }\n\n      if (typeof value === 'number') {\n        if (!isFinite(value)) {\n          return {\n            error: 'invalid'\n          };\n        }\n\n        value = parseInt(value);\n        var date = parseDate(value, options.properties);\n\n        if (!date) {\n          return {\n            error: 'invalid'\n          };\n        }\n\n        return {\n          value: date\n        };\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Boolean:\n      if (typeof value === 'boolean') {\n        return {\n          value: value\n        };\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    default:\n      if (typeof type === 'function') {\n        return parseCustomValue(value, type);\n      }\n\n      throw new Error(\"Unknown schema type: \".concat(type && type.name || type));\n  }\n}\n\nexport function getBlock(string, endCharacter, startIndex) {\n  var i = 0;\n  var substring = '';\n  var character;\n\n  while (startIndex + i < string.length) {\n    var _character = string[startIndex + i];\n\n    if (_character === endCharacter) {\n      return [substring, i];\n    } else if (_character === '\"') {\n      var block = getBlock(string, '\"', startIndex + i + 1);\n      substring += block[0];\n      i += '\"'.length + block[1] + '\"'.length;\n    } else {\n      substring += _character;\n      i++;\n    }\n  }\n\n  return [substring, i];\n}\n/**\r\n * Parses a string of comma-separated substrings into an array of substrings.\r\n * (the `export` is just for tests)\r\n * @param  {string} string — A string of comma-separated substrings.\r\n * @return {string[]} An array of substrings.\r\n */\n\nexport function parseArray(string) {\n  var blocks = [];\n  var index = 0;\n\n  while (index < string.length) {\n    var _getBlock = getBlock(string, ',', index),\n        _getBlock2 = _slicedToArray(_getBlock, 2),\n        substring = _getBlock2[0],\n        length = _getBlock2[1];\n\n    index += length + ','.length;\n    blocks.push(substring.trim());\n  }\n\n  return blocks;\n} // Transpose a 2D array.\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\n\nvar transpose = function transpose(array) {\n  return array[0].map(function (_, i) {\n    return array.map(function (row) {\n      return row[i];\n    });\n  });\n};\n\nfunction validateSchema(schema) {\n  for (var _i2 = 0, _Object$keys2 = Object.keys(schema); _i2 < _Object$keys2.length; _i2++) {\n    var key = _Object$keys2[_i2];\n    var entry = schema[key];\n\n    if (!entry.prop) {\n      throw new Error(\"\\\"prop\\\" not defined for schema entry \\\"\".concat(key, \"\\\".\"));\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/fgs/front/fgs/node_modules/read-excel-file/modules/read/schema/convertToJson.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","Symbol","iterator","_arr","_n","_d","_s","_e","call","next","done","push","value","length","err","Array","isArray","_typeof","obj","constructor","prototype","_createForOfIteratorHelperLoose","o","allowArrayLike","it","bind","minLen","_arrayLikeToArray","n","Object","toString","slice","name","from","test","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","configurable","writable","parseDate","Integer","isInteger","URL","isURL","Email","isEmail","DEFAULT_OPTIONS","isColumnOriented","data","schema","options","_options","rowMap","validateSchema","transpose","columns","results","errors","result","read","_iterator","_step","error","row","rows","rowIndex","_loop","_Object$keys","schemaEntry","isNestedSchema","type","rawValue","indexOf","undefined","notEmpty","array","parseArray","map","_value","parseValue","required","column","prop","parse","parseCustomValue","parseValueOfType","oneOf","validate","message","String","isFinite","Number","stringifiedValue","parseFloat","Date","parseInt","date","properties","Boolean","Error","concat","getBlock","string","endCharacter","startIndex","substring","character","_character","block","blocks","index","_getBlock","_getBlock2","trim","_","_i2","_Object$keys2","entry"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseDate from '../parseDate';\nimport Integer, { isInteger } from '../../types/Integer';\nimport URL, { isURL } from '../../types/URL';\nimport Email, { isEmail } from '../../types/Email';\nvar DEFAULT_OPTIONS = {\n  isColumnOriented: false\n};\n/**\r\n * Convert 2D array to nested objects.\r\n * If row oriented data, row 0 is dotted key names.\r\n * Column oriented data is transposed.\r\n * @param {any[][]} data - An array of rows, each row being an array of cells.\r\n * @param {object} schema\r\n * @return {object[]}\r\n */\n\nexport default function (data, schema, options) {\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  var _options = options,\n      isColumnOriented = _options.isColumnOriented,\n      rowMap = _options.rowMap;\n  validateSchema(schema);\n\n  if (isColumnOriented) {\n    data = transpose(data);\n  }\n\n  var columns = data[0];\n  var results = [];\n  var errors = [];\n\n  for (var i = 1; i < data.length; i++) {\n    var result = read(schema, data[i], i - 1, columns, errors, options);\n\n    if (result) {\n      results.push(result);\n    }\n  } // Correct error rows.\n\n\n  if (rowMap) {\n    for (var _iterator = _createForOfIteratorHelperLoose(errors), _step; !(_step = _iterator()).done;) {\n      var error = _step.value;\n      // Convert the `row` index in `data` to the\n      // actual `row` index in the spreadsheet.\n      // The `1` compensates for the header row.\n      error.row = rowMap[error.row] + 1;\n    }\n  }\n\n  return {\n    rows: results,\n    errors: errors\n  };\n}\n\nfunction read(schema, row, rowIndex, columns, errors, options) {\n  var object = {};\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var schemaEntry = schema[key];\n    var isNestedSchema = _typeof(schemaEntry.type) === 'object' && !Array.isArray(schemaEntry.type);\n    var rawValue = row[columns.indexOf(key)];\n\n    if (rawValue === undefined) {\n      rawValue = null;\n    }\n\n    var value = void 0;\n    var error = void 0;\n\n    if (isNestedSchema) {\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options);\n    } else {\n      if (rawValue === null) {\n        value = null;\n      } else if (Array.isArray(schemaEntry.type)) {\n        var notEmpty = false;\n        var array = parseArray(rawValue).map(function (_value) {\n          var result = parseValue(_value, schemaEntry, options);\n\n          if (result.error) {\n            value = _value;\n            error = result.error;\n          }\n\n          if (result.value !== null) {\n            notEmpty = true;\n          }\n\n          return result.value;\n        });\n\n        if (!error) {\n          value = notEmpty ? array : null;\n        }\n      } else {\n        var result = parseValue(rawValue, schemaEntry, options);\n        error = result.error;\n        value = error ? rawValue : result.value;\n      }\n    }\n\n    if (!error && value === null && schemaEntry.required) {\n      error = 'required';\n    }\n\n    if (error) {\n      error = {\n        error: error,\n        row: rowIndex + 1,\n        column: key,\n        value: value\n      };\n\n      if (schemaEntry.type) {\n        error.type = schemaEntry.type;\n      }\n\n      errors.push(error);\n    } else if (value !== null) {\n      object[schemaEntry.prop] = value;\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(schema); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n\n  if (Object.keys(object).length > 0) {\n    return object;\n  }\n\n  return null;\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {object} schemaEntry\r\n * @return {{ value: any, error: string }}\r\n */\n\n\nexport function parseValue(value, schemaEntry, options) {\n  if (value === null) {\n    return {\n      value: null\n    };\n  }\n\n  var result;\n\n  if (schemaEntry.parse) {\n    result = parseCustomValue(value, schemaEntry.parse);\n  } else if (schemaEntry.type) {\n    result = parseValueOfType(value, // Supports parsing array types.\n    // See `parseArray()` function for more details.\n    // Example `type`: String[]\n    // Input: 'Barack Obama, \"String, with, colons\", Donald Trump'\n    // Output: ['Barack Obama', 'String, with, colons', 'Donald Trump']\n    Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type, options);\n  } else {\n    result = {\n      value: value\n    }; // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\n  } // If errored then return the error.\n\n\n  if (result.error) {\n    return result;\n  }\n\n  if (result.value !== null) {\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\n      return {\n        error: 'invalid'\n      };\n    }\n\n    if (schemaEntry.validate) {\n      try {\n        schemaEntry.validate(result.value);\n      } catch (error) {\n        return {\n          error: error.message\n        };\n      }\n    }\n  }\n\n  return result;\n}\n/**\r\n * Converts textual value to a custom value using supplied `.parse()`.\r\n * @param  {any} value\r\n * @param  {function} parse\r\n * @return {{ value: any, error: string }}\r\n */\n\nfunction parseCustomValue(value, parse) {\n  try {\n    value = parse(value);\n\n    if (value === undefined) {\n      return {\n        value: null\n      };\n    }\n\n    return {\n      value: value\n    };\n  } catch (error) {\n    return {\n      error: error.message\n    };\n  }\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {} type\r\n * @return {{ value: (string|number|Date|boolean), error: string }}\r\n */\n\n\nfunction parseValueOfType(value, type, options) {\n  switch (type) {\n    case String:\n      if (typeof value === 'string') {\n        return {\n          value: value\n        };\n      } // The global `isFinite()` function filters out:\n      // * NaN\n      // * -Infinity\n      // * Infinity\n      // All other values pass (including non-numbers).\n\n\n      if (typeof value === 'number') {\n        if (isFinite(value)) {\n          return {\n            value: String(value)\n          };\n        }\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Number:\n    case Integer:\n      // Convert strings to numbers.\n      // Just an additional feature.\n      // Won't happen when called from `readXlsx()`.\n      if (typeof value === 'string') {\n        var stringifiedValue = value;\n        value = parseFloat(value);\n\n        if (String(value) !== stringifiedValue) {\n          return {\n            error: 'invalid'\n          };\n        }\n      } else if (typeof value !== 'number') {\n        return {\n          error: 'invalid'\n        };\n      } // The global `isFinite()` function filters out:\n      // * NaN\n      // * -Infinity\n      // * Infinity\n      // All other values pass (including non-numbers).\n      // At this point, `value` can only be a number.\n\n\n      if (!isFinite(value)) {\n        return {\n          error: 'invalid'\n        };\n      }\n\n      if (type === Integer && !isInteger(value)) {\n        return {\n          error: 'invalid'\n        };\n      }\n\n      return {\n        value: value\n      };\n\n    case URL:\n      if (typeof value === 'string') {\n        if (isURL(value)) {\n          return {\n            value: value\n          };\n        }\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Email:\n      if (typeof value === 'string') {\n        if (isEmail(value)) {\n          return {\n            value: value\n          };\n        }\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Date:\n      // XLSX has no specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      if (value instanceof Date) {\n        return {\n          value: value\n        };\n      }\n\n      if (typeof value === 'number') {\n        if (!isFinite(value)) {\n          return {\n            error: 'invalid'\n          };\n        }\n\n        value = parseInt(value);\n        var date = parseDate(value, options.properties);\n\n        if (!date) {\n          return {\n            error: 'invalid'\n          };\n        }\n\n        return {\n          value: date\n        };\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    case Boolean:\n      if (typeof value === 'boolean') {\n        return {\n          value: value\n        };\n      }\n\n      return {\n        error: 'invalid'\n      };\n\n    default:\n      if (typeof type === 'function') {\n        return parseCustomValue(value, type);\n      }\n\n      throw new Error(\"Unknown schema type: \".concat(type && type.name || type));\n  }\n}\n\nexport function getBlock(string, endCharacter, startIndex) {\n  var i = 0;\n  var substring = '';\n  var character;\n\n  while (startIndex + i < string.length) {\n    var _character = string[startIndex + i];\n\n    if (_character === endCharacter) {\n      return [substring, i];\n    } else if (_character === '\"') {\n      var block = getBlock(string, '\"', startIndex + i + 1);\n      substring += block[0];\n      i += '\"'.length + block[1] + '\"'.length;\n    } else {\n      substring += _character;\n      i++;\n    }\n  }\n\n  return [substring, i];\n}\n/**\r\n * Parses a string of comma-separated substrings into an array of substrings.\r\n * (the `export` is just for tests)\r\n * @param  {string} string — A string of comma-separated substrings.\r\n * @return {string[]} An array of substrings.\r\n */\n\nexport function parseArray(string) {\n  var blocks = [];\n  var index = 0;\n\n  while (index < string.length) {\n    var _getBlock = getBlock(string, ',', index),\n        _getBlock2 = _slicedToArray(_getBlock, 2),\n        substring = _getBlock2[0],\n        length = _getBlock2[1];\n\n    index += length + ','.length;\n    blocks.push(substring.trim());\n  }\n\n  return blocks;\n} // Transpose a 2D array.\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\n\nvar transpose = function transpose(array) {\n  return array[0].map(function (_, i) {\n    return array.map(function (row) {\n      return row[i];\n    });\n  });\n};\n\nfunction validateSchema(schema) {\n  for (var _i2 = 0, _Object$keys2 = Object.keys(schema); _i2 < _Object$keys2.length; _i2++) {\n    var key = _Object$keys2[_i2];\n    var entry = schema[key];\n\n    if (!entry.prop) {\n      throw new Error(\"\\\"prop\\\" not defined for schema entry \\\"\".concat(key, \"\\\".\"));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}