{"ast":null,"code":"import _slicedToArray from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@babel/runtime/regenerator\";\nimport { __decorate, __param, __awaiter } from 'tslib';\nimport { InjectionToken, Inject, Injectable, EventEmitter, Input, Output, Component, ChangeDetectionStrategy, ViewContainerRef, ComponentFactoryResolver, HostListener, Directive, ɵɵdefineInjectable, Injector, ApplicationRef, TemplateRef, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction SwalPortalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nvar fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nvar dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nvar SweetAlert2LoaderService = /*#__PURE__*/function () {\n  // Using any because Angular metadata generator does not understand a pure TS type here\n  function SweetAlert2LoaderService(swalProvider) {\n    _classCallCheck(this, SweetAlert2LoaderService);\n\n    this.swalProvider = swalProvider;\n  }\n\n  _createClass(SweetAlert2LoaderService, [{\n    key: \"swal\",\n    get: function get() {\n      if (!this.swalPromiseCache) {\n        this.preloadSweetAlertLibrary();\n      }\n\n      return this.swalPromiseCache;\n    }\n  }, {\n    key: \"preloadSweetAlertLibrary\",\n    value: function preloadSweetAlertLibrary() {\n      if (this.swalPromiseCache) return;\n      var libPromise = isLoader(this.swalProvider) ? this.swalProvider() : Promise.resolve(this.swalProvider);\n      this.swalPromiseCache = libPromise.then(function (value) {\n        return isDefaultExport(value) ? value : value.default;\n      });\n\n      function isLoader(value) {\n        return typeof value === 'function' && value.version === undefined;\n      }\n\n      function isDefaultExport(value) {\n        return typeof value === 'function';\n      }\n    }\n  }]);\n\n  return SweetAlert2LoaderService;\n}();\n\nSweetAlert2LoaderService.ɵfac = function SweetAlert2LoaderService_Factory(t) {\n  return new (t || SweetAlert2LoaderService)(ɵngcc0.ɵɵinject(swalProviderToken));\n};\n\nSweetAlert2LoaderService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: SweetAlert2LoaderService,\n  factory: function factory(t) {\n    return SweetAlert2LoaderService.ɵfac(t);\n  }\n});\n\nSweetAlert2LoaderService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [swalProviderToken]\n    }]\n  }];\n};\n\nSweetAlert2LoaderService = __decorate([__param(0, Inject(swalProviderToken))], SweetAlert2LoaderService);\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy\n *     (but without \"on*\" prefix to respect community standards).\n *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the values they can/must return.\n */\n\nvar SwalComponent = /*#__PURE__*/function () {\n  function SwalComponent(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n    _classCallCheck(this, SwalComponent);\n\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n    this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n    /**\n     * Emits an event when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n\n    this.beforeOpen = new EventEmitter();\n    /**\n     * Emits an event when the modal is shown.\n     */\n\n    this.open = new EventEmitter();\n    /**\n     * Emits an event when the modal DOM is rendered.\n     */\n\n    this.render = new EventEmitter();\n    /**\n     * Emits an event when the modal will be closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n\n    this.close = new EventEmitter();\n    /**\n     * Emits an event after the modal had been closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n\n    this.afterClose = new EventEmitter();\n    /**\n     * Emits an event after the modal had been closed.\n     * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions\n     * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by\n     * another popup.\n     */\n\n    this.destroy = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n\n    this.cancel = new EventEmitter();\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n\n    this.touchedProps = new Set();\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n\n    this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n\n    this.isCurrentlyShown = false;\n  }\n  /**\n   * An object of SweetAlert2 native options, useful if:\n   *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n   *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n   *\n   * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n   *     previous properties you want to erase again.\n   *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n   *\n   * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n   */\n\n\n  _createClass(SwalComponent, [{\n    key: \"swalOptions\",\n    get:\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    function get() {\n      var _this = this;\n\n      //=> We will compute the options object based on the option keys that are known to have changed.\n      //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n      //   avoiding side effects.\n      return _toConsumableArray(this.touchedProps).reduce(function (obj, key) {\n        return Object.assign(Object.assign({}, obj), _defineProperty({}, key, _this[key]));\n      }, {});\n    },\n    set: function set(options) {\n      //=> Update properties\n      Object.assign(this, options); //=> Mark changed properties as touched\n\n      var touchedKeys = Object.keys(options);\n      touchedKeys.forEach(this.markTouched);\n    }\n  }, {\n    key: \"swalVisible\",\n    get: function get() {\n      return this.isCurrentlyShown;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    ,\n    set: function set(visible) {\n      visible ? this.fire() : this.dismiss();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      //=> Preload SweetAlert2 library in case this component is activated.\n      this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var fireOnInit = this.swalFireOnInit === undefined ? this.moduleLevelFireOnInit : this.swalFireOnInit;\n      fireOnInit && this.fire();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n      //   send it with the next fire() or update() calls.\n      Object.keys(changes) //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n      .filter(function (key) {\n        return !key.startsWith('swal');\n      }).forEach(this.markTouched); //=> Eventually trigger re-render if the modal is open.\n\n      void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n      var dismissOnDestroy = this.swalDismissOnDestroy === undefined ? this.moduleLevelDismissOnDestroy : this.swalDismissOnDestroy;\n      dismissOnDestroy && this.dismiss();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var swal, userOptions, options, result, composeHook;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                composeHook = function _composeHook(userHook, libHook) {\n                  return function () {\n                    return libHook.apply(void 0, arguments), userHook === null || userHook === void 0 ? void 0 : userHook.apply(void 0, arguments);\n                  };\n                };\n\n                _context.next = 3;\n                return this.sweetAlert2Loader.swal;\n\n              case 3:\n                swal = _context.sent;\n                userOptions = this.swalOptions; //=> Build the SweetAlert2 options\n\n                options = Object.assign(Object.assign({}, userOptions), {\n                  //=> Handle modal lifecycle events\n                  onBeforeOpen: composeHook(userOptions.onBeforeOpen, function (modalElement) {\n                    _this2.beforeOpen.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onOpen: composeHook(userOptions.onOpen, function (modalElement) {\n                    _this2.isCurrentlyShown = true;\n\n                    _this2.open.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onRender: composeHook(userOptions.onRender, function (modalElement) {\n                    _this2.render.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onClose: composeHook(userOptions.onClose, function (modalElement) {\n                    _this2.isCurrentlyShown = false;\n\n                    _this2.close.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onAfterClose: composeHook(userOptions.onAfterClose, function () {\n                    _this2.afterClose.emit();\n                  }),\n                  onDestroy: composeHook(userOptions.onDestroy, function () {\n                    _this2.destroy.emit();\n                  })\n                }); //=> Show the Swal! And wait for confirmation or dimissal.\n\n                _context.next = 8;\n                return swal.fire(options);\n\n              case 8:\n                result = _context.sent;\n\n                //=> Emit on (confirm) or (cancel)\n                if ('value' in result) {\n                  this.confirm.emit(result.value);\n                } else {\n                  this.cancel.emit(result.dismiss);\n                }\n\n                return _context.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).\n     *               If the argument is not passed, (dimiss) will emit `undefined`.\n     *               See {@link Swal.close}\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(result) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var swal;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.isCurrentlyShown) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.next = 4;\n                return this.sweetAlert2Loader.swal;\n\n              case 4:\n                swal = _context2.sent;\n                swal.close(result);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var swal, allOptions, updatableOptions;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (options) {\n                  this.swalOptions = options;\n                }\n\n                if (this.isCurrentlyShown) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                _context3.next = 5;\n                return this.sweetAlert2Loader.swal;\n\n              case 5:\n                swal = _context3.sent;\n                allOptions = this.swalOptions;\n                updatableOptions = Object.keys(allOptions).filter(swal.isUpdatableParameter).reduce(function (obj, key) {\n                  return Object.assign(Object.assign({}, obj), _defineProperty({}, key, allOptions[key]));\n                }, {});\n                swal.update(updatableOptions);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }]);\n\n  return SwalComponent;\n}();\n\nSwalComponent.ɵfac = function SwalComponent_Factory(t) {\n  return new (t || SwalComponent)(ɵngcc0.ɵɵdirectiveInject(SweetAlert2LoaderService), ɵngcc0.ɵɵdirectiveInject(fireOnInitToken), ɵngcc0.ɵɵdirectiveInject(dismissOnDestroyToken));\n};\n\nSwalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SwalComponent,\n  selectors: [[\"swal\"]],\n  inputs: {\n    swalOptions: \"swalOptions\",\n    swalVisible: \"swalVisible\",\n    title: \"title\",\n    titleText: \"titleText\",\n    text: \"text\",\n    html: \"html\",\n    footer: \"footer\",\n    icon: \"icon\",\n    iconHtml: \"iconHtml\",\n    backdrop: \"backdrop\",\n    toast: \"toast\",\n    target: \"target\",\n    input: \"input\",\n    width: \"width\",\n    padding: \"padding\",\n    background: \"background\",\n    position: \"position\",\n    grow: \"grow\",\n    showClass: \"showClass\",\n    hideClass: \"hideClass\",\n    customClass: \"customClass\",\n    timer: \"timer\",\n    timerProgressBar: \"timerProgressBar\",\n    animation: \"animation\",\n    heightAuto: \"heightAuto\",\n    allowOutsideClick: \"allowOutsideClick\",\n    allowEscapeKey: \"allowEscapeKey\",\n    allowEnterKey: \"allowEnterKey\",\n    stopKeydownPropagation: \"stopKeydownPropagation\",\n    keydownListenerCapture: \"keydownListenerCapture\",\n    showConfirmButton: \"showConfirmButton\",\n    showCancelButton: \"showCancelButton\",\n    confirmButtonText: \"confirmButtonText\",\n    cancelButtonText: \"cancelButtonText\",\n    confirmButtonColor: \"confirmButtonColor\",\n    cancelButtonColor: \"cancelButtonColor\",\n    confirmButtonAriaLabel: \"confirmButtonAriaLabel\",\n    cancelButtonAriaLabel: \"cancelButtonAriaLabel\",\n    buttonsStyling: \"buttonsStyling\",\n    reverseButtons: \"reverseButtons\",\n    focusConfirm: \"focusConfirm\",\n    focusCancel: \"focusCancel\",\n    showCloseButton: \"showCloseButton\",\n    closeButtonHtml: \"closeButtonHtml\",\n    closeButtonAriaLabel: \"closeButtonAriaLabel\",\n    showLoaderOnConfirm: \"showLoaderOnConfirm\",\n    preConfirm: \"preConfirm\",\n    imageUrl: \"imageUrl\",\n    imageWidth: \"imageWidth\",\n    imageHeight: \"imageHeight\",\n    imageAlt: \"imageAlt\",\n    inputPlaceholder: \"inputPlaceholder\",\n    inputValue: \"inputValue\",\n    inputOptions: \"inputOptions\",\n    inputAutoTrim: \"inputAutoTrim\",\n    inputAttributes: \"inputAttributes\",\n    inputValidator: \"inputValidator\",\n    validationMessage: \"validationMessage\",\n    progressSteps: \"progressSteps\",\n    currentProgressStep: \"currentProgressStep\",\n    progressStepsDistance: \"progressStepsDistance\",\n    scrollbarPadding: \"scrollbarPadding\",\n    swalFireOnInit: \"swalFireOnInit\",\n    swalDismissOnDestroy: \"swalDismissOnDestroy\"\n  },\n  outputs: {\n    beforeOpen: \"beforeOpen\",\n    open: \"open\",\n    render: \"render\",\n    close: \"close\",\n    afterClose: \"afterClose\",\n    destroy: \"destroy\",\n    confirm: \"confirm\",\n    cancel: \"cancel\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function SwalComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nSwalComponent.ctorParameters = function () {\n  return [{\n    type: SweetAlert2LoaderService\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [fireOnInitToken]\n    }]\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [dismissOnDestroyToken]\n    }]\n  }];\n};\n\n__decorate([Input()], SwalComponent.prototype, \"title\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"titleText\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"text\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"html\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"footer\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"icon\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"iconHtml\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"backdrop\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"toast\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"target\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"input\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"width\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"padding\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"background\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"position\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"grow\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showClass\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"hideClass\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"customClass\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"timer\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"timerProgressBar\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"animation\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"heightAuto\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"allowOutsideClick\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"allowEscapeKey\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"allowEnterKey\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"stopKeydownPropagation\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"keydownListenerCapture\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showConfirmButton\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showCancelButton\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"confirmButtonText\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"cancelButtonText\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"confirmButtonColor\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"cancelButtonColor\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"confirmButtonAriaLabel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"cancelButtonAriaLabel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"buttonsStyling\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"reverseButtons\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"focusConfirm\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"focusCancel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showCloseButton\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"closeButtonHtml\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"closeButtonAriaLabel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showLoaderOnConfirm\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"preConfirm\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageUrl\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageWidth\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageHeight\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageAlt\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputPlaceholder\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputValue\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputOptions\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputAutoTrim\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputAttributes\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputValidator\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"validationMessage\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"progressSteps\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"currentProgressStep\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"progressStepsDistance\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"scrollbarPadding\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"swalOptions\", null);\n\n__decorate([Input()], SwalComponent.prototype, \"swalFireOnInit\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"swalDismissOnDestroy\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"swalVisible\", null);\n\n__decorate([Output()], SwalComponent.prototype, \"beforeOpen\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"open\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"render\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"close\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"afterClose\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"destroy\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"confirm\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"cancel\", void 0);\n\nSwalComponent = __decorate([__param(1, Inject(fireOnInitToken)), __param(2, Inject(dismissOnDestroyToken))], SwalComponent);\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n\nvar SwalDirective = /*#__PURE__*/function () {\n  function SwalDirective(viewContainerRef, resolver) {\n    _classCallCheck(this, SwalDirective);\n\n    this.viewContainerRef = viewContainerRef;\n    this.resolver = resolver;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n\n    this.cancel = new EventEmitter();\n  }\n  /**\n   * SweetAlert2 options or a SwalComponent instance.\n   * See the class doc block for more informations.\n   */\n\n\n  _createClass(SwalDirective, [{\n    key: \"swal\",\n    set: function set(options) {\n      if (options instanceof SwalComponent) {\n        this.swalInstance = options;\n      } else if (isArrayOptions(options)) {\n        this.swalOptions = {};\n\n        var _options = _slicedToArray(options, 3);\n\n        this.swalOptions.title = _options[0];\n        this.swalOptions.text = _options[1];\n        this.swalOptions.icon = _options[2];\n      } else {\n        this.swalOptions = options;\n      }\n\n      function isArrayOptions(value) {\n        return Array.isArray(options);\n      }\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.swalInstance) {\n        var factory = this.resolver.resolveComponentFactory(SwalComponent);\n        this.swalRef = this.viewContainerRef.createComponent(factory);\n        this.swalInstance = this.swalRef.instance;\n      }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.swalRef) {\n        this.swalRef.destroy();\n      }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      if (!this.swalInstance) return;\n\n      if (this.swalOptions) {\n        this.swalInstance.swalOptions = this.swalOptions;\n      }\n\n      var swalClosed = new Subject();\n      this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(function (v) {\n        return _this3.confirm.emit(v);\n      });\n      this.swalInstance.cancel.asObservable().pipe(takeUntil(swalClosed)).subscribe(function (v) {\n        return _this3.cancel.emit(v);\n      });\n      this.swalInstance.fire().then(function () {\n        return swalClosed.next();\n      });\n    }\n  }]);\n\n  return SwalDirective;\n}();\n\nSwalDirective.ɵfac = function SwalDirective_Factory(t) {\n  return new (t || SwalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver));\n};\n\nSwalDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: SwalDirective,\n  selectors: [[\"\", \"swal\", \"\"]],\n  hostBindings: function SwalDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    swal: \"swal\"\n  },\n  outputs: {\n    confirm: \"confirm\",\n    cancel: \"cancel\"\n  }\n});\n\nSwalDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ComponentFactoryResolver\n  }];\n};\n\n__decorate([Input()], SwalDirective.prototype, \"swal\", null);\n\n__decorate([Output()], SwalDirective.prototype, \"confirm\", void 0);\n\n__decorate([Output()], SwalDirective.prototype, \"cancel\", void 0);\n\n__decorate([HostListener('click', ['$event'])], SwalDirective.prototype, \"onClick\", null);\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n\n\nvar SwalPortalTargets = /*#__PURE__*/_createClass(function SwalPortalTargets() {\n  _classCallCheck(this, SwalPortalTargets);\n\n  /**\n   * Targets the modal close button block contents.\n   */\n  this.closeButton = {\n    element: function element(swal) {\n      return swal.getCloseButton();\n    },\n    options: {\n      showCloseButton: true\n    }\n  };\n  /**\n   * Targets the modal title block contents.\n   */\n\n  this.title = {\n    element: function element(swal) {\n      return swal.getTitle();\n    },\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      title: ' '\n    }\n  };\n  /**\n   * Targets the modal text block contents (that is another block inside the first content block, so you can still\n   * use other modal features like Swal inputs, that are situated inside that parent content block).\n   */\n\n  this.content = {\n    element: function element(swal) {\n      return swal.getHtmlContainer();\n    },\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      text: ' '\n    }\n  };\n  /**\n   * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n   * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n   *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n   *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n   *     performance of everyone, for a relatively rare use case.\n   */\n\n  this.actions = {\n    element: function element(swal) {\n      return swal.getActions();\n    },\n    // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n    options: {\n      showConfirmButton: true\n    }\n  };\n  /**\n   * Targets the confirm button contents, replacing the text inside it (not the button itself)\n   */\n\n  this.confirmButton = {\n    element: function element(swal) {\n      return swal.getConfirmButton();\n    },\n    options: {\n      showConfirmButton: true\n    }\n  };\n  /**\n   * Targets the cancel button contents, replacing the text inside it (not the button itself)\n   */\n\n  this.cancelButton = {\n    element: function element(swal) {\n      return swal.getCancelButton();\n    },\n    options: {\n      showCancelButton: true\n    }\n  };\n  /**\n   * Targets the modal footer contents.\n   */\n\n  this.footer = {\n    element: function element(swal) {\n      return swal.getFooter();\n    },\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      footer: ' '\n    }\n  };\n});\n\nSwalPortalTargets.ɵfac = function SwalPortalTargets_Factory(t) {\n  return new (t || SwalPortalTargets)();\n};\n\nSwalPortalTargets.ɵprov = ɵɵdefineInjectable({\n  factory: function SwalPortalTargets_Factory() {\n    return new SwalPortalTargets();\n  },\n  token: SwalPortalTargets,\n  providedIn: \"root\"\n});\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n\nvar SwalPortalComponent = /*#__PURE__*/_createClass(function SwalPortalComponent() {\n  _classCallCheck(this, SwalPortalComponent);\n\n  this.template = null;\n});\n\nSwalPortalComponent.ɵfac = function SwalPortalComponent_Factory(t) {\n  return new (t || SwalPortalComponent)();\n};\n\nSwalPortalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SwalPortalComponent,\n  selectors: [[\"swal-portal\"]],\n  inputs: {\n    template: \"template\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngTemplateOutlet\"]],\n  template: function SwalPortalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, SwalPortalComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n    }\n  },\n  directives: [ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([Input()], SwalPortalComponent.prototype, \"template\", void 0);\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n\n\nvar SwalPortalDirective = /*#__PURE__*/function () {\n  function SwalPortalDirective(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n    _classCallCheck(this, SwalPortalDirective);\n\n    this.resolver = resolver;\n    this.injector = injector;\n    this.app = app;\n    this.templateRef = templateRef;\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.swalTargets = swalTargets;\n    this.swalComponent = swalComponent;\n    this.destroyed = new Subject();\n  }\n  /**\n   * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n   * that will receive the consumer's template.\n   */\n\n\n  _createClass(SwalPortalDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n      this.target = this.target || this.swalTargets.content; //=> Apply the options provided by the target definition\n\n      void this.swalComponent.update(this.target.options); //=> Subscribe to a few hooks frm the parent SwalComponent.\n\n      this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));\n      this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));\n      this.swalComponent.destroy.pipe(takeUntil(this.destroyed)).subscribe(this.destroyHook.bind(this));\n    }\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed.next();\n    }\n    /**\n     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link beforeOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n\n  }, {\n    key: \"renderHook\",\n    value: function renderHook() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var swal, targetEl;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                //=> Ensure the portal component is created\n                if (!this.portalComponentRef) {\n                  this.portalComponentRef = this.createPortalComponent();\n                } //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n                // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n                // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n                // the portal component is fully synchronous, causing no blinks in the modal contents.\n\n\n                _context4.next = 3;\n                return this.sweetAlert2Loader.swal;\n\n              case 3:\n                swal = _context4.sent;\n                //=> Find target element\n                targetEl = this.target.element(swal);\n\n                if (targetEl) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 7:\n                //=> Replace target's contents with our component\n                // https://jsperf.com/innerhtml-vs-removechild/15\n                while (targetEl.firstChild) {\n                  targetEl.removeChild(targetEl.firstChild);\n                }\n\n                targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n\n  }, {\n    key: \"beforeOpenHook\",\n    value: function beforeOpenHook() {\n      if (!this.portalComponentRef) return; //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n\n      this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n\n  }, {\n    key: \"destroyHook\",\n    value: function destroyHook() {\n      if (!this.portalComponentRef) return; //=> Detach the portal component from the app and destroy it\n\n      this.app.detachView(this.portalComponentRef.hostView);\n      this.portalComponentRef.destroy();\n      this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n\n  }, {\n    key: \"createPortalComponent\",\n    value: function createPortalComponent() {\n      //=> Create the SwalPortalComponent that will hold our content\n      var factory = this.resolver.resolveComponentFactory(SwalPortalComponent); // Yes, we do not use the third argument that would directly use the target as the component's view\n      // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n      // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n      // able to restore it at any moment, ie. after the modal has been re-rendered.\n\n      var componentRef = factory.create(this.injector, []); //=> Apply the consumer's template on the component\n\n      componentRef.instance.template = this.templateRef;\n      return componentRef;\n    }\n  }]);\n\n  return SwalPortalDirective;\n}();\n\nSwalPortalDirective.ɵfac = function SwalPortalDirective_Factory(t) {\n  return new (t || SwalPortalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(SweetAlert2LoaderService), ɵngcc0.ɵɵdirectiveInject(SwalPortalTargets), ɵngcc0.ɵɵdirectiveInject(SwalComponent, 1));\n};\n\nSwalPortalDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: SwalPortalDirective,\n  selectors: [[\"\", \"swalPortal\", \"\"]],\n  inputs: {\n    target: [\"swalPortal\", \"target\"]\n  }\n});\n\nSwalPortalDirective.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: Injector\n  }, {\n    type: ApplicationRef\n  }, {\n    type: TemplateRef\n  }, {\n    type: SweetAlert2LoaderService\n  }, {\n    type: SwalPortalTargets\n  }, {\n    type: SwalComponent,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\n__decorate([Input('swalPortal')], SwalPortalDirective.prototype, \"target\", void 0);\n\nSwalPortalDirective = __decorate([__param(6, Host())], SwalPortalDirective);\nvar SweetAlert2Module_1;\n\nfunction provideDefaultSwal() {\n  return import('sweetalert2');\n}\n\nvar SweetAlert2Module = SweetAlert2Module_1 = /*#__PURE__*/function () {\n  function SweetAlert2Module() {\n    _classCallCheck(this, SweetAlert2Module);\n  }\n\n  _createClass(SweetAlert2Module, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: SweetAlert2Module_1,\n        providers: [SweetAlert2LoaderService, {\n          provide: swalProviderToken,\n          useValue: options.provideSwal || provideDefaultSwal\n        }, {\n          provide: fireOnInitToken,\n          useValue: options.fireOnInit || false\n        }, {\n          provide: dismissOnDestroyToken,\n          useValue: options.dismissOnDestroy || true\n        }]\n      };\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: SweetAlert2Module_1,\n        providers: [].concat(_toConsumableArray(options.provideSwal ? [SweetAlert2LoaderService, {\n          provide: swalProviderToken,\n          useValue: options.provideSwal\n        }] : []), _toConsumableArray(options.fireOnInit !== undefined ? [{\n          provide: fireOnInitToken,\n          useValue: options.fireOnInit\n        }] : []), _toConsumableArray(options.dismissOnDestroy !== undefined ? [{\n          provide: dismissOnDestroyToken,\n          useValue: options.dismissOnDestroy\n        }] : []))\n      };\n    }\n  }]);\n\n  return SweetAlert2Module;\n}();\n\nSweetAlert2Module.ɵfac = function SweetAlert2Module_Factory(t) {\n  return new (t || SweetAlert2Module)();\n};\n\nSweetAlert2Module.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: SweetAlert2Module\n});\nSweetAlert2Module.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SweetAlert2LoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [swalProviderToken]\n      }]\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line:component-selector\n      selector: 'swal',\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: SweetAlert2LoaderService\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [fireOnInitToken]\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [dismissOnDestroyToken]\n      }]\n    }];\n  }, {\n    beforeOpen: [{\n      type: Output\n    }],\n    open: [{\n      type: Output\n    }],\n    render: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    afterClose: [{\n      type: Output\n    }],\n    destroy: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    swalOptions: [{\n      type: Input\n    }],\n    swalVisible: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    titleText: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    html: [{\n      type: Input\n    }],\n    footer: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    iconHtml: [{\n      type: Input\n    }],\n    backdrop: [{\n      type: Input\n    }],\n    toast: [{\n      type: Input\n    }],\n    target: [{\n      type: Input\n    }],\n    input: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    padding: [{\n      type: Input\n    }],\n    background: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    grow: [{\n      type: Input\n    }],\n    showClass: [{\n      type: Input\n    }],\n    hideClass: [{\n      type: Input\n    }],\n    customClass: [{\n      type: Input\n    }],\n    timer: [{\n      type: Input\n    }],\n    timerProgressBar: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }],\n    heightAuto: [{\n      type: Input\n    }],\n    allowOutsideClick: [{\n      type: Input\n    }],\n    allowEscapeKey: [{\n      type: Input\n    }],\n    allowEnterKey: [{\n      type: Input\n    }],\n    stopKeydownPropagation: [{\n      type: Input\n    }],\n    keydownListenerCapture: [{\n      type: Input\n    }],\n    showConfirmButton: [{\n      type: Input\n    }],\n    showCancelButton: [{\n      type: Input\n    }],\n    confirmButtonText: [{\n      type: Input\n    }],\n    cancelButtonText: [{\n      type: Input\n    }],\n    confirmButtonColor: [{\n      type: Input\n    }],\n    cancelButtonColor: [{\n      type: Input\n    }],\n    confirmButtonAriaLabel: [{\n      type: Input\n    }],\n    cancelButtonAriaLabel: [{\n      type: Input\n    }],\n    buttonsStyling: [{\n      type: Input\n    }],\n    reverseButtons: [{\n      type: Input\n    }],\n    focusConfirm: [{\n      type: Input\n    }],\n    focusCancel: [{\n      type: Input\n    }],\n    showCloseButton: [{\n      type: Input\n    }],\n    closeButtonHtml: [{\n      type: Input\n    }],\n    closeButtonAriaLabel: [{\n      type: Input\n    }],\n    showLoaderOnConfirm: [{\n      type: Input\n    }],\n    preConfirm: [{\n      type: Input\n    }],\n    imageUrl: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageAlt: [{\n      type: Input\n    }],\n    inputPlaceholder: [{\n      type: Input\n    }],\n    inputValue: [{\n      type: Input\n    }],\n    inputOptions: [{\n      type: Input\n    }],\n    inputAutoTrim: [{\n      type: Input\n    }],\n    inputAttributes: [{\n      type: Input\n    }],\n    inputValidator: [{\n      type: Input\n    }],\n    validationMessage: [{\n      type: Input\n    }],\n    progressSteps: [{\n      type: Input\n    }],\n    currentProgressStep: [{\n      type: Input\n    }],\n    progressStepsDistance: [{\n      type: Input\n    }],\n    scrollbarPadding: [{\n      type: Input\n    }],\n    swalFireOnInit: [{\n      type: Input\n    }],\n    swalDismissOnDestroy: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swal]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }];\n  }, {\n    confirm: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    swal: [{\n      type: Input\n    }],\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalTargets, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal-portal',\n      template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    template: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swalPortal]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: SweetAlert2LoaderService\n    }, {\n      type: SwalPortalTargets\n    }, {\n      type: SwalComponent,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    target: [{\n      type: Input,\n      args: ['swalPortal']\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SweetAlert2Module, [{\n    type: NgModule,\n    args: [{\n      declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent],\n      imports: [CommonModule],\n      exports: [SwalComponent, SwalPortalDirective, SwalDirective],\n      entryComponents: [SwalComponent, SwalPortalComponent]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SweetAlert2Module, {\n    declarations: function declarations() {\n      return [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [SwalComponent, SwalPortalDirective, SwalDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module, provideDefaultSwal as ɵa, swalProviderToken as ɵb, fireOnInitToken as ɵc, dismissOnDestroyToken as ɵd, SwalPortalComponent as ɵe };","map":{"version":3,"sources":["C:/Users/NESRINE/Desktop/pfe/fgs/front/fgs/node_modules/@sweetalert2/ngx-sweetalert2/__ivy_ngcc__/fesm2015/sweetalert2-ngx-sweetalert2.js"],"names":["__decorate","__param","__awaiter","InjectionToken","Inject","Injectable","EventEmitter","Input","Output","Component","ChangeDetectionStrategy","ViewContainerRef","ComponentFactoryResolver","HostListener","Directive","ɵɵdefineInjectable","Injector","ApplicationRef","TemplateRef","Host","NgModule","Subject","takeUntil","CommonModule","ɵngcc0","ɵngcc1","SwalPortalComponent_ng_container_0_Template","rf","ctx","ɵɵelementContainer","swalProviderToken","fireOnInitToken","dismissOnDestroyToken","SweetAlert2LoaderService","swalProvider","swalPromiseCache","preloadSweetAlertLibrary","libPromise","isLoader","Promise","resolve","then","value","isDefaultExport","default","version","undefined","ɵfac","SweetAlert2LoaderService_Factory","t","ɵɵinject","ɵprov","token","factory","ctorParameters","type","decorators","args","SwalComponent","sweetAlert2Loader","moduleLevelFireOnInit","moduleLevelDismissOnDestroy","beforeOpen","open","render","close","afterClose","destroy","confirm","cancel","touchedProps","Set","markTouched","add","bind","isCurrentlyShown","reduce","obj","key","Object","assign","options","touchedKeys","keys","forEach","visible","fire","dismiss","fireOnInit","swalFireOnInit","changes","filter","startsWith","update","dismissOnDestroy","swalDismissOnDestroy","composeHook","userHook","libHook","swal","userOptions","swalOptions","onBeforeOpen","modalElement","emit","onOpen","onRender","onClose","onAfterClose","onDestroy","result","allOptions","updatableOptions","isUpdatableParameter","SwalComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","swalVisible","title","titleText","text","html","footer","icon","iconHtml","backdrop","toast","target","input","width","padding","background","position","grow","showClass","hideClass","customClass","timer","timerProgressBar","animation","heightAuto","allowOutsideClick","allowEscapeKey","allowEnterKey","stopKeydownPropagation","keydownListenerCapture","showConfirmButton","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","confirmButtonAriaLabel","cancelButtonAriaLabel","buttonsStyling","reverseButtons","focusConfirm","focusCancel","showCloseButton","closeButtonHtml","closeButtonAriaLabel","showLoaderOnConfirm","preConfirm","imageUrl","imageWidth","imageHeight","imageAlt","inputPlaceholder","inputValue","inputOptions","inputAutoTrim","inputAttributes","inputValidator","validationMessage","progressSteps","currentProgressStep","progressStepsDistance","scrollbarPadding","outputs","features","ɵɵNgOnChangesFeature","decls","vars","template","SwalComponent_Template","encapsulation","changeDetection","Boolean","prototype","SwalDirective","viewContainerRef","resolver","swalInstance","isArrayOptions","Array","isArray","resolveComponentFactory","swalRef","createComponent","instance","event","preventDefault","stopImmediatePropagation","stopPropagation","swalClosed","asObservable","pipe","subscribe","v","next","SwalDirective_Factory","ɵdir","ɵɵdefineDirective","hostBindings","SwalDirective_HostBindings","ɵɵlistener","SwalDirective_click_HostBindingHandler","$event","onClick","SwalPortalTargets","closeButton","element","getCloseButton","getTitle","content","getHtmlContainer","actions","getActions","confirmButton","getConfirmButton","cancelButton","getCancelButton","getFooter","SwalPortalTargets_Factory","providedIn","SwalPortalComponent","SwalPortalComponent_Factory","consts","SwalPortalComponent_Template","ɵɵtemplate","ɵɵproperty","directives","NgTemplateOutlet","SwalPortalDirective","injector","app","templateRef","swalTargets","swalComponent","destroyed","renderHook","beforeOpenHook","destroyHook","portalComponentRef","createPortalComponent","targetEl","firstChild","removeChild","appendChild","location","nativeElement","attachView","hostView","detachView","componentRef","create","SwalPortalDirective_Factory","SweetAlert2Module_1","provideDefaultSwal","SweetAlert2Module","ngModule","providers","provide","useValue","provideSwal","SweetAlert2Module_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngDevMode","ɵsetClassMetadata","selector","OnPush","declarations","exports","entryComponents","ngJitMode","ɵɵsetNgModuleScope","ɵa","ɵb","ɵc","ɵd","ɵe"],"mappings":"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","sourcesContent":["import { __decorate, __param, __awaiter } from 'tslib';\nimport { InjectionToken, Inject, Injectable, EventEmitter, Input, Output, Component, ChangeDetectionStrategy, ViewContainerRef, ComponentFactoryResolver, HostListener, Directive, ɵɵdefineInjectable, Injector, ApplicationRef, TemplateRef, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction SwalPortalComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nlet SweetAlert2LoaderService = class SweetAlert2LoaderService {\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    constructor(swalProvider) {\n        this.swalProvider = swalProvider;\n    }\n    get swal() {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n        return this.swalPromiseCache;\n    }\n    preloadSweetAlertLibrary() {\n        if (this.swalPromiseCache)\n            return;\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n        function isLoader(value) {\n            return typeof value === 'function' && value.version === undefined;\n        }\n        function isDefaultExport(value) {\n            return typeof value === 'function';\n        }\n    }\n};\nSweetAlert2LoaderService.ɵfac = function SweetAlert2LoaderService_Factory(t) { return new (t || SweetAlert2LoaderService)(ɵngcc0.ɵɵinject(swalProviderToken)); };\nSweetAlert2LoaderService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SweetAlert2LoaderService, factory: function (t) { return SweetAlert2LoaderService.ɵfac(t); } });\nSweetAlert2LoaderService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [swalProviderToken,] }] }\n];\nSweetAlert2LoaderService = __decorate([ __param(0, Inject(swalProviderToken))\n], SweetAlert2LoaderService);\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy\n *     (but without \"on*\" prefix to respect community standards).\n *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the values they can/must return.\n */\nlet SwalComponent = class SwalComponent {\n    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n        /**\n         * Emits an event when the modal DOM element has been created.\n         * Useful to perform DOM mutations before the modal is shown.\n         */\n        this.beforeOpen = new EventEmitter();\n        /**\n         * Emits an event when the modal is shown.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Emits an event when the modal DOM is rendered.\n         */\n        this.render = new EventEmitter();\n        /**\n         * Emits an event when the modal will be closed.\n         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Emits an event after the modal had been closed.\n         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n         */\n        this.afterClose = new EventEmitter();\n        /**\n         * Emits an event after the modal had been closed.\n         * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions\n         * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by\n         * another popup.\n         */\n        this.destroy = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n         * The reason is `undefined` when {@link dismiss} is called.\n         *\n         * Example:\n         *     <swal (cancel)=\"handleCancel($event)\"></swal>\n         *\n         *     public handleCancel(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.cancel = new EventEmitter();\n        /**\n         * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n         * what options we have to send to {@link Swal.fire}.\n         */\n        this.touchedProps = new Set();\n        /**\n         * A function of signature `(propName: string): void` that adds a given property name to the list of\n         * touched properties, ie. {@link touchedProps}.\n         */\n        this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n        /**\n         * Is the SweetAlert2 modal represented by this component currently opened?\n         */\n        this.isCurrentlyShown = false;\n    }\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    set swalOptions(options) {\n        //=> Update properties\n        Object.assign(this, options);\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options);\n        touchedKeys.forEach(this.markTouched);\n    }\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    get swalOptions() {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce((obj, key) => (Object.assign(Object.assign({}, obj), { [key]: this[key] })), {});\n    }\n    set swalVisible(visible) {\n        visible ? this.fire() : this.dismiss();\n    }\n    get swalVisible() {\n        return this.isCurrentlyShown;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    ngOnInit() {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    ngAfterViewInit() {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n        fireOnInit && this.fire();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    ngOnChanges(changes) {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key) => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    ngOnDestroy() {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n        dismissOnDestroy && this.dismiss();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    fire() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const swal = yield this.sweetAlert2Loader.swal;\n            const userOptions = this.swalOptions;\n            //=> Build the SweetAlert2 options\n            const options = Object.assign(Object.assign({}, userOptions), { \n                //=> Handle modal lifecycle events\n                onBeforeOpen: composeHook(userOptions.onBeforeOpen, (modalElement) => {\n                    this.beforeOpen.emit({ modalElement });\n                }), onOpen: composeHook(userOptions.onOpen, (modalElement) => {\n                    this.isCurrentlyShown = true;\n                    this.open.emit({ modalElement });\n                }), onRender: composeHook(userOptions.onRender, (modalElement) => {\n                    this.render.emit({ modalElement });\n                }), onClose: composeHook(userOptions.onClose, (modalElement) => {\n                    this.isCurrentlyShown = false;\n                    this.close.emit({ modalElement });\n                }), onAfterClose: composeHook(userOptions.onAfterClose, () => {\n                    this.afterClose.emit();\n                }), onDestroy: composeHook(userOptions.onDestroy, () => {\n                    this.destroy.emit();\n                }) });\n            //=> Show the Swal! And wait for confirmation or dimissal.\n            const result = yield swal.fire(options);\n            //=> Emit on (confirm) or (cancel)\n            if ('value' in result) {\n                this.confirm.emit(result.value);\n            }\n            else {\n                this.cancel.emit(result.dismiss);\n            }\n            return result;\n            function composeHook(userHook, libHook) {\n                return (...args) => (libHook(...args), userHook === null || userHook === void 0 ? void 0 : userHook(...args));\n            }\n        });\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).\n     *               If the argument is not passed, (dimiss) will emit `undefined`.\n     *               See {@link Swal.close}\n     */\n    dismiss(result) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isCurrentlyShown)\n                return;\n            const swal = yield this.sweetAlert2Loader.swal;\n            swal.close(result);\n        });\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    update(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (options) {\n                this.swalOptions = options;\n            }\n            if (!this.isCurrentlyShown)\n                return;\n            const swal = yield this.sweetAlert2Loader.swal;\n            const allOptions = this.swalOptions;\n            const updatableOptions = Object.keys(allOptions)\n                .filter(swal.isUpdatableParameter)\n                .reduce((obj, key) => (Object.assign(Object.assign({}, obj), { [key]: allOptions[key] })), {});\n            swal.update(updatableOptions);\n        });\n    }\n};\nSwalComponent.ɵfac = function SwalComponent_Factory(t) { return new (t || SwalComponent)(ɵngcc0.ɵɵdirectiveInject(SweetAlert2LoaderService), ɵngcc0.ɵɵdirectiveInject(fireOnInitToken), ɵngcc0.ɵɵdirectiveInject(dismissOnDestroyToken)); };\nSwalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SwalComponent, selectors: [[\"swal\"]], inputs: { swalOptions: \"swalOptions\", swalVisible: \"swalVisible\", title: \"title\", titleText: \"titleText\", text: \"text\", html: \"html\", footer: \"footer\", icon: \"icon\", iconHtml: \"iconHtml\", backdrop: \"backdrop\", toast: \"toast\", target: \"target\", input: \"input\", width: \"width\", padding: \"padding\", background: \"background\", position: \"position\", grow: \"grow\", showClass: \"showClass\", hideClass: \"hideClass\", customClass: \"customClass\", timer: \"timer\", timerProgressBar: \"timerProgressBar\", animation: \"animation\", heightAuto: \"heightAuto\", allowOutsideClick: \"allowOutsideClick\", allowEscapeKey: \"allowEscapeKey\", allowEnterKey: \"allowEnterKey\", stopKeydownPropagation: \"stopKeydownPropagation\", keydownListenerCapture: \"keydownListenerCapture\", showConfirmButton: \"showConfirmButton\", showCancelButton: \"showCancelButton\", confirmButtonText: \"confirmButtonText\", cancelButtonText: \"cancelButtonText\", confirmButtonColor: \"confirmButtonColor\", cancelButtonColor: \"cancelButtonColor\", confirmButtonAriaLabel: \"confirmButtonAriaLabel\", cancelButtonAriaLabel: \"cancelButtonAriaLabel\", buttonsStyling: \"buttonsStyling\", reverseButtons: \"reverseButtons\", focusConfirm: \"focusConfirm\", focusCancel: \"focusCancel\", showCloseButton: \"showCloseButton\", closeButtonHtml: \"closeButtonHtml\", closeButtonAriaLabel: \"closeButtonAriaLabel\", showLoaderOnConfirm: \"showLoaderOnConfirm\", preConfirm: \"preConfirm\", imageUrl: \"imageUrl\", imageWidth: \"imageWidth\", imageHeight: \"imageHeight\", imageAlt: \"imageAlt\", inputPlaceholder: \"inputPlaceholder\", inputValue: \"inputValue\", inputOptions: \"inputOptions\", inputAutoTrim: \"inputAutoTrim\", inputAttributes: \"inputAttributes\", inputValidator: \"inputValidator\", validationMessage: \"validationMessage\", progressSteps: \"progressSteps\", currentProgressStep: \"currentProgressStep\", progressStepsDistance: \"progressStepsDistance\", scrollbarPadding: \"scrollbarPadding\", swalFireOnInit: \"swalFireOnInit\", swalDismissOnDestroy: \"swalDismissOnDestroy\" }, outputs: { beforeOpen: \"beforeOpen\", open: \"open\", render: \"render\", close: \"close\", afterClose: \"afterClose\", destroy: \"destroy\", confirm: \"confirm\", cancel: \"cancel\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function SwalComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });\nSwalComponent.ctorParameters = () => [\n    { type: SweetAlert2LoaderService },\n    { type: Boolean, decorators: [{ type: Inject, args: [fireOnInitToken,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [dismissOnDestroyToken,] }] }\n];\n__decorate([\n    Input()\n], SwalComponent.prototype, \"title\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"titleText\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"text\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"html\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"footer\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"icon\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"iconHtml\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"backdrop\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"toast\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"target\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"input\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"width\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"padding\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"background\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"position\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"grow\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"showClass\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"hideClass\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"customClass\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"timer\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"timerProgressBar\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"animation\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"heightAuto\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"allowOutsideClick\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"allowEscapeKey\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"allowEnterKey\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"stopKeydownPropagation\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"keydownListenerCapture\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"showConfirmButton\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"showCancelButton\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"confirmButtonText\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"cancelButtonText\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"confirmButtonColor\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"cancelButtonColor\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"confirmButtonAriaLabel\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"cancelButtonAriaLabel\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"buttonsStyling\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"reverseButtons\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"focusConfirm\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"focusCancel\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"showCloseButton\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"closeButtonHtml\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"closeButtonAriaLabel\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"showLoaderOnConfirm\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"preConfirm\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"imageUrl\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"imageWidth\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"imageHeight\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"imageAlt\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"inputPlaceholder\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"inputValue\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"inputOptions\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"inputAutoTrim\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"inputAttributes\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"inputValidator\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"validationMessage\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"progressSteps\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"currentProgressStep\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"progressStepsDistance\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"scrollbarPadding\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"swalOptions\", null);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"swalFireOnInit\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"swalDismissOnDestroy\", void 0);\n__decorate([\n    Input()\n], SwalComponent.prototype, \"swalVisible\", null);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"beforeOpen\", void 0);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"open\", void 0);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"render\", void 0);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"close\", void 0);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"afterClose\", void 0);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"destroy\", void 0);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"confirm\", void 0);\n__decorate([\n    Output()\n], SwalComponent.prototype, \"cancel\", void 0);\nSwalComponent = __decorate([ __param(1, Inject(fireOnInitToken)),\n    __param(2, Inject(dismissOnDestroyToken))\n], SwalComponent);\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nlet SwalDirective = class SwalDirective {\n    constructor(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n         * The reason is `undefined` when {@link dismiss} is called.\n         *\n         * Example:\n         *     <swal (cancel)=\"handleCancel($event)\"></swal>\n         *\n         *     public handleCancel(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.cancel = new EventEmitter();\n    }\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    set swal(options) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        }\n        else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        }\n        else {\n            this.swalOptions = options;\n        }\n        function isArrayOptions(value) {\n            return Array.isArray(options);\n        }\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    ngOnInit() {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    ngOnDestroy() {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        if (!this.swalInstance)\n            return;\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n        const swalClosed = new Subject();\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.cancel.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.cancel.emit(v));\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n};\nSwalDirective.ɵfac = function SwalDirective_Factory(t) { return new (t || SwalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };\nSwalDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SwalDirective, selectors: [[\"\", \"swal\", \"\"]], hostBindings: function SwalDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });\n    } }, inputs: { swal: \"swal\" }, outputs: { confirm: \"confirm\", cancel: \"cancel\" } });\nSwalDirective.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver }\n];\n__decorate([\n    Input()\n], SwalDirective.prototype, \"swal\", null);\n__decorate([\n    Output()\n], SwalDirective.prototype, \"confirm\", void 0);\n__decorate([\n    Output()\n], SwalDirective.prototype, \"cancel\", void 0);\n__decorate([\n    HostListener('click', ['$event'])\n], SwalDirective.prototype, \"onClick\", null);\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nlet SwalPortalTargets = class SwalPortalTargets {\n    constructor() {\n        /**\n         * Targets the modal close button block contents.\n         */\n        this.closeButton = {\n            element: swal => swal.getCloseButton(),\n            options: { showCloseButton: true }\n        };\n        /**\n         * Targets the modal title block contents.\n         */\n        this.title = {\n            element: swal => swal.getTitle(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { title: ' ' }\n        };\n        /**\n         * Targets the modal text block contents (that is another block inside the first content block, so you can still\n         * use other modal features like Swal inputs, that are situated inside that parent content block).\n         */\n        this.content = {\n            element: swal => swal.getHtmlContainer(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { text: ' ' }\n        };\n        /**\n         * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n         * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n         *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n         *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n         *     performance of everyone, for a relatively rare use case.\n         */\n        this.actions = {\n            element: swal => swal.getActions(),\n            // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the confirm button contents, replacing the text inside it (not the button itself)\n         */\n        this.confirmButton = {\n            element: swal => swal.getConfirmButton(),\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the cancel button contents, replacing the text inside it (not the button itself)\n         */\n        this.cancelButton = {\n            element: swal => swal.getCancelButton(),\n            options: { showCancelButton: true }\n        };\n        /**\n         * Targets the modal footer contents.\n         */\n        this.footer = {\n            element: swal => swal.getFooter(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { footer: ' ' }\n        };\n    }\n};\nSwalPortalTargets.ɵfac = function SwalPortalTargets_Factory(t) { return new (t || SwalPortalTargets)(); };\nSwalPortalTargets.ɵprov = ɵɵdefineInjectable({ factory: function SwalPortalTargets_Factory() { return new SwalPortalTargets(); }, token: SwalPortalTargets, providedIn: \"root\" });\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\nlet SwalPortalComponent = class SwalPortalComponent {\n    constructor() {\n        this.template = null;\n    }\n};\nSwalPortalComponent.ɵfac = function SwalPortalComponent_Factory(t) { return new (t || SwalPortalComponent)(); };\nSwalPortalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SwalPortalComponent, selectors: [[\"swal-portal\"]], inputs: { template: \"template\" }, decls: 1, vars: 1, consts: [[4, \"ngTemplateOutlet\"]], template: function SwalPortalComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, SwalPortalComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n    } }, directives: [ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\n__decorate([\n    Input()\n], SwalPortalComponent.prototype, \"template\", void 0);\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nlet SwalPortalDirective = class SwalPortalDirective {\n    constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n        this.templateRef = templateRef;\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.swalTargets = swalTargets;\n        this.swalComponent = swalComponent;\n        this.destroyed = new Subject();\n    }\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    ngOnInit() {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));\n        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));\n        this.swalComponent.destroy.pipe(takeUntil(this.destroyed)).subscribe(this.destroyHook.bind(this));\n    }\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    ngOnDestroy() {\n        this.destroyed.next();\n    }\n    /**\n     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link beforeOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    renderHook() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //=> Ensure the portal component is created\n            if (!this.portalComponentRef) {\n                this.portalComponentRef = this.createPortalComponent();\n            }\n            //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n            // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n            // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n            // the portal component is fully synchronous, causing no blinks in the modal contents.\n            const swal = yield this.sweetAlert2Loader.swal;\n            //=> Find target element\n            const targetEl = this.target.element(swal);\n            if (!targetEl)\n                return;\n            //=> Replace target's contents with our component\n            // https://jsperf.com/innerhtml-vs-removechild/15\n            while (targetEl.firstChild) {\n                targetEl.removeChild(targetEl.firstChild);\n            }\n            targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n        });\n    }\n    /**\n     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    beforeOpenHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    destroyHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    createPortalComponent() {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n        return componentRef;\n    }\n};\nSwalPortalDirective.ɵfac = function SwalPortalDirective_Factory(t) { return new (t || SwalPortalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(SweetAlert2LoaderService), ɵngcc0.ɵɵdirectiveInject(SwalPortalTargets), ɵngcc0.ɵɵdirectiveInject(SwalComponent, 1)); };\nSwalPortalDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SwalPortalDirective, selectors: [[\"\", \"swalPortal\", \"\"]], inputs: { target: [\"swalPortal\", \"target\"] } });\nSwalPortalDirective.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: Injector },\n    { type: ApplicationRef },\n    { type: TemplateRef },\n    { type: SweetAlert2LoaderService },\n    { type: SwalPortalTargets },\n    { type: SwalComponent, decorators: [{ type: Host }] }\n];\n__decorate([\n    Input('swalPortal')\n], SwalPortalDirective.prototype, \"target\", void 0);\nSwalPortalDirective = __decorate([ __param(6, Host())\n], SwalPortalDirective);\n\nvar SweetAlert2Module_1;\nfunction provideDefaultSwal() {\n    return import('sweetalert2');\n}\nlet SweetAlert2Module = SweetAlert2Module_1 = class SweetAlert2Module {\n    static forRoot(options = {}) {\n        return {\n            ngModule: SweetAlert2Module_1,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n    static forChild(options = {}) {\n        return {\n            ngModule: SweetAlert2Module_1,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n};\nSweetAlert2Module.ɵfac = function SweetAlert2Module_Factory(t) { return new (t || SweetAlert2Module)(); };\nSweetAlert2Module.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SweetAlert2Module });\nSweetAlert2Module.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SweetAlert2LoaderService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [swalProviderToken]\n            }] }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalComponent, [{\n        type: Component,\n        args: [{\n                // tslint:disable-next-line:component-selector\n                selector: 'swal',\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: SweetAlert2LoaderService }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [fireOnInitToken]\n            }] }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [dismissOnDestroyToken]\n            }] }]; }, { beforeOpen: [{\n            type: Output\n        }], open: [{\n            type: Output\n        }], render: [{\n            type: Output\n        }], close: [{\n            type: Output\n        }], afterClose: [{\n            type: Output\n        }], destroy: [{\n            type: Output\n        }], confirm: [{\n            type: Output\n        }], cancel: [{\n            type: Output\n        }], swalOptions: [{\n            type: Input\n        }], swalVisible: [{\n            type: Input\n        }], title: [{\n            type: Input\n        }], titleText: [{\n            type: Input\n        }], text: [{\n            type: Input\n        }], html: [{\n            type: Input\n        }], footer: [{\n            type: Input\n        }], icon: [{\n            type: Input\n        }], iconHtml: [{\n            type: Input\n        }], backdrop: [{\n            type: Input\n        }], toast: [{\n            type: Input\n        }], target: [{\n            type: Input\n        }], input: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], padding: [{\n            type: Input\n        }], background: [{\n            type: Input\n        }], position: [{\n            type: Input\n        }], grow: [{\n            type: Input\n        }], showClass: [{\n            type: Input\n        }], hideClass: [{\n            type: Input\n        }], customClass: [{\n            type: Input\n        }], timer: [{\n            type: Input\n        }], timerProgressBar: [{\n            type: Input\n        }], animation: [{\n            type: Input\n        }], heightAuto: [{\n            type: Input\n        }], allowOutsideClick: [{\n            type: Input\n        }], allowEscapeKey: [{\n            type: Input\n        }], allowEnterKey: [{\n            type: Input\n        }], stopKeydownPropagation: [{\n            type: Input\n        }], keydownListenerCapture: [{\n            type: Input\n        }], showConfirmButton: [{\n            type: Input\n        }], showCancelButton: [{\n            type: Input\n        }], confirmButtonText: [{\n            type: Input\n        }], cancelButtonText: [{\n            type: Input\n        }], confirmButtonColor: [{\n            type: Input\n        }], cancelButtonColor: [{\n            type: Input\n        }], confirmButtonAriaLabel: [{\n            type: Input\n        }], cancelButtonAriaLabel: [{\n            type: Input\n        }], buttonsStyling: [{\n            type: Input\n        }], reverseButtons: [{\n            type: Input\n        }], focusConfirm: [{\n            type: Input\n        }], focusCancel: [{\n            type: Input\n        }], showCloseButton: [{\n            type: Input\n        }], closeButtonHtml: [{\n            type: Input\n        }], closeButtonAriaLabel: [{\n            type: Input\n        }], showLoaderOnConfirm: [{\n            type: Input\n        }], preConfirm: [{\n            type: Input\n        }], imageUrl: [{\n            type: Input\n        }], imageWidth: [{\n            type: Input\n        }], imageHeight: [{\n            type: Input\n        }], imageAlt: [{\n            type: Input\n        }], inputPlaceholder: [{\n            type: Input\n        }], inputValue: [{\n            type: Input\n        }], inputOptions: [{\n            type: Input\n        }], inputAutoTrim: [{\n            type: Input\n        }], inputAttributes: [{\n            type: Input\n        }], inputValidator: [{\n            type: Input\n        }], validationMessage: [{\n            type: Input\n        }], progressSteps: [{\n            type: Input\n        }], currentProgressStep: [{\n            type: Input\n        }], progressStepsDistance: [{\n            type: Input\n        }], scrollbarPadding: [{\n            type: Input\n        }], swalFireOnInit: [{\n            type: Input\n        }], swalDismissOnDestroy: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[swal]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { confirm: [{\n            type: Output\n        }], cancel: [{\n            type: Output\n        }], swal: [{\n            type: Input\n        }], \n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalTargets, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalComponent, [{\n        type: Component,\n        args: [{\n                selector: 'swal-portal',\n                template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return []; }, { template: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[swalPortal]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.TemplateRef }, { type: SweetAlert2LoaderService }, { type: SwalPortalTargets }, { type: SwalComponent, decorators: [{\n                type: Host\n            }] }]; }, { target: [{\n            type: Input,\n            args: ['swalPortal']\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SweetAlert2Module, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    SwalComponent, SwalPortalDirective, SwalDirective\n                ],\n                entryComponents: [\n                    SwalComponent, SwalPortalComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SweetAlert2Module, { declarations: function () { return [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SwalComponent, SwalPortalDirective, SwalDirective]; } }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module, provideDefaultSwal as ɵa, swalProviderToken as ɵb, fireOnInitToken as ɵc, dismissOnDestroyToken as ɵd, SwalPortalComponent as ɵe };\n\n"]},"metadata":{},"sourceType":"module"}