{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/Desktop/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/Desktop/fgs/front/fgs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\nimport Shepherd from 'shepherd.js';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/dom.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Helper method to check if element is hidden, since we cannot use :visible without jQuery\n * @param {?} element The element to check for visibility\n * @return {?} true if element is hidden\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction elementIsHidden(element) {\n  return element.offsetWidth === 0 && element.offsetHeight === 0;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/buttons.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a button of the specified type, with the given classes and text\n *\n * @param {?} button\n * @return {?}\n */\n\n\nfunction makeButton(button) {\n  var classes = button.classes,\n      disabled = button.disabled,\n      label = button.label,\n      secondary = button.secondary,\n      type = button.type,\n      text = button.text;\n  /** @type {?} */\n\n  var builtInButtonTypes = ['back', 'cancel', 'next'];\n\n  if (!type) {\n    return button;\n  }\n\n  if (builtInButtonTypes.indexOf(type) === -1) {\n    throw new Error(\"'type' property must be one of 'back', 'cancel', or 'next'\");\n  }\n\n  return {\n    action: this[type].bind(this),\n    classes: classes,\n    disabled: disabled,\n    label: label,\n    secondary: secondary,\n    text: text\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/shepherd.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ShepherdService = /*#__PURE__*/function () {\n  function ShepherdService() {\n    _classCallCheck(this, ShepherdService);\n\n    this.confirmCancel = false;\n    this.confirmCancelMessage = null;\n    this.defaultStepOptions = {};\n    this.errorTitle = null;\n    this.isActive = false;\n    this.messageForUser = null;\n    this.modal = false;\n    this.requiredElements = [];\n    this.steps = [];\n    this.tourName = undefined;\n    this.tourObject = null;\n  }\n  /**\n   * Get the tour object and call back\n   * @return {?}\n   */\n\n\n  _createClass(ShepherdService, [{\n    key: \"back\",\n    value: function back() {\n      this.tourObject.back();\n    }\n    /**\n     * Cancel the tour\n     * @return {?}\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.tourObject.cancel();\n    }\n    /**\n     * Complete the tour\n     * @return {?}\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.tourObject.complete();\n    }\n    /**\n     * Hides the current step\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.tourObject.hide();\n    }\n    /**\n     * Advance the tour to the next step\n     * @return {?}\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.tourObject.next();\n    }\n    /**\n     * Show a specific step, by passing its id\n     * @param {?} id The id of the step you want to show\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show(id) {\n      this.tourObject.show(id);\n    }\n    /**\n     * Start the tour\n     * @return {?}\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.isActive = true;\n      this.tourObject.start();\n    }\n    /**\n     * This function is called when a tour is completed or cancelled to initiate cleanup.\n     * @param {?} completeOrCancel 'complete' or 'cancel'\n     * @return {?}\n     */\n\n  }, {\n    key: \"onTourFinish\",\n    value: function onTourFinish(completeOrCancel) {\n      this.isActive = false;\n    }\n    /**\n     * Take a set of steps and create a tour object based on the current configuration\n     * @param {?} steps An array of steps\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSteps\",\n    value: function addSteps(steps) {\n      var _this = this;\n\n      this._initialize();\n      /** @type {?} */\n\n\n      var tour = this.tourObject; // Return nothing if there are no steps\n\n      if (!steps || !Array.isArray(steps) || steps.length === 0) {\n        return;\n      }\n\n      if (!this.requiredElementsPresent()) {\n        tour.addStep({\n          buttons: [{\n            text: 'Exit',\n            action: tour.cancel\n          }],\n          id: 'error',\n          title: this.errorTitle,\n          text: [this.messageForUser]\n        });\n        return;\n      }\n\n      steps.forEach(\n      /**\n      * @param {?} step\n      * @return {?}\n      */\n      function (step) {\n        if (step.buttons) {\n          step.buttons = step.buttons.map(makeButton.bind(_this), _this);\n        }\n\n        tour.addStep(step);\n      });\n    }\n    /**\n     * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,\n     * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"requiredElementsPresent\",\n    value: function requiredElementsPresent() {\n      var _this2 = this;\n\n      /** @type {?} */\n      var allElementsPresent = true;\n      /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */\n\n      this.requiredElements.forEach(\n      /**\n      * @param {?} element\n      * @return {?}\n      */\n      function (element) {\n        /** @type {?} */\n        var selectedElement = document.querySelector(element.selector);\n\n        if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {\n          allElementsPresent = false;\n          _this2.errorTitle = element.title;\n          _this2.messageForUser = element.message;\n        }\n      });\n      return allElementsPresent;\n    }\n    /**\n     * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      /** @type {?} */\n      var tourObject = new Shepherd.Tour({\n        confirmCancel: this.confirmCancel,\n        confirmCancelMessage: this.confirmCancelMessage,\n        defaultStepOptions: this.defaultStepOptions,\n        tourName: this.tourName,\n        useModalOverlay: this.modal\n      });\n      tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));\n      tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));\n      this.tourObject = tourObject;\n    }\n  }]);\n\n  return ShepherdService;\n}();\n\nShepherdService.ɵfac = function ShepherdService_Factory(t) {\n  return new (t || ShepherdService)();\n};\n/** @nocollapse */\n\n\nShepherdService.ctorParameters = function () {\n  return [];\n};\n/** @nocollapse */\n\n\nShepherdService.ɵprov = ɵɵdefineInjectable({\n  factory: function ShepherdService_Factory() {\n    return new ShepherdService();\n  },\n  token: ShepherdService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShepherdService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  ShepherdService.prototype.confirmCancel;\n  /** @type {?} */\n\n  ShepherdService.prototype.confirmCancelMessage;\n  /** @type {?} */\n\n  ShepherdService.prototype.defaultStepOptions;\n  /** @type {?} */\n\n  ShepherdService.prototype.errorTitle;\n  /** @type {?} */\n\n  ShepherdService.prototype.isActive;\n  /** @type {?} */\n\n  ShepherdService.prototype.messageForUser;\n  /** @type {?} */\n\n  ShepherdService.prototype.modal;\n  /** @type {?} */\n\n  ShepherdService.prototype.requiredElements;\n  /** @type {?} */\n\n  ShepherdService.prototype.steps;\n  /** @type {?} */\n\n  ShepherdService.prototype.tourName;\n  /** @type {?} */\n\n  ShepherdService.prototype.tourObject;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-shepherd.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ShepherdService };","map":{"version":3,"sources":["C:/Users/user/Desktop/fgs/front/fgs/node_modules/angular-shepherd/__ivy_ngcc__/fesm2015/angular-shepherd.js"],"names":["Injectable","ɵɵdefineInjectable","Shepherd","ɵngcc0","elementIsHidden","element","offsetWidth","offsetHeight","makeButton","button","classes","disabled","label","secondary","type","text","builtInButtonTypes","indexOf","Error","action","bind","ShepherdService","confirmCancel","confirmCancelMessage","defaultStepOptions","errorTitle","isActive","messageForUser","modal","requiredElements","steps","tourName","undefined","tourObject","back","cancel","complete","hide","next","id","show","start","completeOrCancel","_initialize","tour","Array","isArray","length","requiredElementsPresent","addStep","buttons","title","forEach","step","map","allElementsPresent","selectedElement","document","querySelector","selector","message","Tour","useModalOverlay","on","onTourFinish","ɵfac","ShepherdService_Factory","t","ctorParameters","ɵprov","factory","token","providedIn","ngDevMode","ɵsetClassMetadata","args","prototype"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,kBAArB,QAA+C,eAA/C;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;;AACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAC9B,SAAOA,OAAO,CAACC,WAAR,KAAwB,CAAxB,IAA6BD,OAAO,CAACE,YAAR,KAAyB,CAA7D;AACH;AAED;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,MAAQC,OAAR,GAA4DD,MAA5D,CAAQC,OAAR;AAAA,MAAiBC,QAAjB,GAA4DF,MAA5D,CAAiBE,QAAjB;AAAA,MAA2BC,KAA3B,GAA4DH,MAA5D,CAA2BG,KAA3B;AAAA,MAAkCC,SAAlC,GAA4DJ,MAA5D,CAAkCI,SAAlC;AAAA,MAA6CC,IAA7C,GAA4DL,MAA5D,CAA6CK,IAA7C;AAAA,MAAmDC,IAAnD,GAA4DN,MAA5D,CAAmDM,IAAnD;AACA;;AACA,MAAMC,kBAAkB,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAA3B;;AACA,MAAI,CAACF,IAAL,EAAW;AACP,WAAOL,MAAP;AACH;;AACD,MAAIO,kBAAkB,CAACC,OAAnB,CAA2BH,IAA3B,MAAqC,CAAC,CAA1C,EAA6C;AACzC,UAAM,IAAII,KAAJ,8DAAN;AACH;;AACD,SAAO;AACHC,IAAAA,MAAM,EAAE,KAAKL,IAAL,EAAWM,IAAX,CAAgB,IAAhB,CADL;AAEHV,IAAAA,OAAO,EAAPA,OAFG;AAGHC,IAAAA,QAAQ,EAARA,QAHG;AAIHC,IAAAA,KAAK,EAALA,KAJG;AAKHC,IAAAA,SAAS,EAATA,SALG;AAMHE,IAAAA,IAAI,EAAJA;AANG,GAAP;AAQH;AAED;AACA;AACA;AACA;AACA;;;IACMM,e;AACF,6BAAc;AAAA;;AACV,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgBC,SAAhB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;;WACI,gBAAO;AACH,WAAKA,UAAL,CAAgBC,IAAhB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,kBAAS;AACL,WAAKD,UAAL,CAAgBE,MAAhB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,oBAAW;AACP,WAAKF,UAAL,CAAgBG,QAAhB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,gBAAO;AACH,WAAKH,UAAL,CAAgBI,IAAhB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,gBAAO;AACH,WAAKJ,UAAL,CAAgBK,IAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,cAAKC,EAAL,EAAS;AACL,WAAKN,UAAL,CAAgBO,IAAhB,CAAqBD,EAArB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,iBAAQ;AACJ,WAAKb,QAAL,GAAgB,IAAhB;AACA,WAAKO,UAAL,CAAgBQ,KAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,sBAAaC,gBAAb,EAA+B;AAC3B,WAAKhB,QAAL,GAAgB,KAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,kBAASI,KAAT,EAAgB;AAAA;;AACZ,WAAKa,WAAL;AACA;;;AACA,UAAMC,IAAI,GAAG,KAAKX,UAAlB,CAHY,CAIZ;;AACA,UAAI,CAACH,KAAD,IAAU,CAACe,KAAK,CAACC,OAAN,CAAchB,KAAd,CAAX,IAAmCA,KAAK,CAACiB,MAAN,KAAiB,CAAxD,EAA2D;AACvD;AACH;;AACD,UAAI,CAAC,KAAKC,uBAAL,EAAL,EAAqC;AACjCJ,QAAAA,IAAI,CAACK,OAAL,CAAa;AACTC,UAAAA,OAAO,EAAE,CAAC;AACFnC,YAAAA,IAAI,EAAE,MADJ;AAEFI,YAAAA,MAAM,EAAEyB,IAAI,CAACT;AAFX,WAAD,CADA;AAKTI,UAAAA,EAAE,EAAE,OALK;AAMTY,UAAAA,KAAK,EAAE,KAAK1B,UANH;AAOTV,UAAAA,IAAI,EAAE,CAAC,KAAKY,cAAN;AAPG,SAAb;AASA;AACH;;AACDG,MAAAA,KAAK,CAACsB,OAAN;AAAe;AACvB;AACA;AACA;AACQ,gBAACC,IAAD,EAAU;AACN,YAAIA,IAAI,CAACH,OAAT,EAAkB;AACdG,UAAAA,IAAI,CAACH,OAAL,GAAeG,IAAI,CAACH,OAAL,CAAaI,GAAb,CAAiB9C,UAAU,CAACY,IAAX,CAAgB,KAAhB,CAAjB,EAAwC,KAAxC,CAAf;AACH;;AACDwB,QAAAA,IAAI,CAACK,OAAL,CAAaI,IAAb;AACH,OATD;AAUH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,mCAA0B;AAAA;;AACtB;AACA,UAAIE,kBAAkB,GAAG,IAAzB;AACA;;AACA,WAAK1B,gBAAL,CAAsBuB,OAAtB;AAA+B;AACvC;AACA;AACA;AACQ,gBAAC/C,OAAD,EAAa;AACT;AACA,YAAMmD,eAAe,GAAGC,QAAQ,CAACC,aAAT,CAAuBrD,OAAO,CAACsD,QAA/B,CAAxB;;AACA,YAAIJ,kBAAkB,KAAK,CAACC,eAAD,IAAoBpD,eAAe,CAACoD,eAAD,CAAxC,CAAtB,EAAkF;AAC9ED,UAAAA,kBAAkB,GAAG,KAArB;AACA,UAAA,MAAI,CAAC9B,UAAL,GAAkBpB,OAAO,CAAC8C,KAA1B;AACA,UAAA,MAAI,CAACxB,cAAL,GAAsBtB,OAAO,CAACuD,OAA9B;AACH;AACJ,OAZD;AAaA,aAAOL,kBAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,uBAAc;AACV;AACA,UAAMtB,UAAU,GAAG,IAAI/B,QAAQ,CAAC2D,IAAb,CAAkB;AACjCvC,QAAAA,aAAa,EAAE,KAAKA,aADa;AAEjCC,QAAAA,oBAAoB,EAAE,KAAKA,oBAFM;AAGjCC,QAAAA,kBAAkB,EAAE,KAAKA,kBAHQ;AAIjCO,QAAAA,QAAQ,EAAE,KAAKA,QAJkB;AAKjC+B,QAAAA,eAAe,EAAE,KAAKlC;AALW,OAAlB,CAAnB;AAOAK,MAAAA,UAAU,CAAC8B,EAAX,CAAc,UAAd,EAA0B,KAAKC,YAAL,CAAkB5C,IAAlB,CAAuB,IAAvB,EAA6B,UAA7B,CAA1B;AACAa,MAAAA,UAAU,CAAC8B,EAAX,CAAc,QAAd,EAAwB,KAAKC,YAAL,CAAkB5C,IAAlB,CAAuB,IAAvB,EAA6B,QAA7B,CAAxB;AACA,WAAKa,UAAL,GAAkBA,UAAlB;AACH;;;;;;AAELZ,eAAe,CAAC4C,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAI9C,eAAV,GAAP;AAAsC,CAAnG;AACA;;;AACAA,eAAe,CAAC+C,cAAhB,GAAiC;AAAA,SAAM,EAAN;AAAA,CAAjC;AACA;;;AAAmB/C,eAAe,CAACgD,KAAhB,GAAwBpE,kBAAkB,CAAC;AAAEqE,EAAAA,OAAO,EAAE,SAASJ,uBAAT,GAAmC;AAAE,WAAO,IAAI7C,eAAJ,EAAP;AAA+B,GAA/E;AAAiFkD,EAAAA,KAAK,EAAElD,eAAxF;AAAyGmD,EAAAA,UAAU,EAAE;AAArH,CAAD,CAA1C;;AACnB,CAAC,YAAY;AAAE,GAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtE,MAAM,CAACuE,iBAAP,CAAyBrD,eAAzB,EAA0C,CAAC;AACrGP,IAAAA,IAAI,EAAEd,UAD+F;AAErG2E,IAAAA,IAAI,EAAE,CAAC;AACCH,MAAAA,UAAU,EAAE;AADb,KAAD;AAF+F,GAAD,CAA1C,EAK1D,YAAY;AAAE,WAAO,EAAP;AAAY,GALgC,EAK9B,IAL8B,CAAnD;AAK6B,CAL5C;;AAMA,IAAI,KAAJ,EAAW;AACP;AACAnD,EAAAA,eAAe,CAACuD,SAAhB,CAA0BtD,aAA1B;AACA;;AACAD,EAAAA,eAAe,CAACuD,SAAhB,CAA0BrD,oBAA1B;AACA;;AACAF,EAAAA,eAAe,CAACuD,SAAhB,CAA0BpD,kBAA1B;AACA;;AACAH,EAAAA,eAAe,CAACuD,SAAhB,CAA0BnD,UAA1B;AACA;;AACAJ,EAAAA,eAAe,CAACuD,SAAhB,CAA0BlD,QAA1B;AACA;;AACAL,EAAAA,eAAe,CAACuD,SAAhB,CAA0BjD,cAA1B;AACA;;AACAN,EAAAA,eAAe,CAACuD,SAAhB,CAA0BhD,KAA1B;AACA;;AACAP,EAAAA,eAAe,CAACuD,SAAhB,CAA0B/C,gBAA1B;AACA;;AACAR,EAAAA,eAAe,CAACuD,SAAhB,CAA0B9C,KAA1B;AACA;;AACAT,EAAAA,eAAe,CAACuD,SAAhB,CAA0B7C,QAA1B;AACA;;AACAV,EAAAA,eAAe,CAACuD,SAAhB,CAA0B3C,UAA1B;AACH;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA,SAASZ,eAAT","sourcesContent":["import { Injectable, ɵɵdefineInjectable } from '@angular/core';\nimport Shepherd from 'shepherd.js';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/dom.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper method to check if element is hidden, since we cannot use :visible without jQuery\n * @param {?} element The element to check for visibility\n * @return {?} true if element is hidden\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction elementIsHidden(element) {\n    return element.offsetWidth === 0 && element.offsetHeight === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/buttons.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a button of the specified type, with the given classes and text\n *\n * @param {?} button\n * @return {?}\n */\nfunction makeButton(button) {\n    const { classes, disabled, label, secondary, type, text } = button;\n    /** @type {?} */\n    const builtInButtonTypes = ['back', 'cancel', 'next'];\n    if (!type) {\n        return button;\n    }\n    if (builtInButtonTypes.indexOf(type) === -1) {\n        throw new Error(`'type' property must be one of 'back', 'cancel', or 'next'`);\n    }\n    return {\n        action: this[type].bind(this),\n        classes,\n        disabled,\n        label,\n        secondary,\n        text\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/shepherd.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ShepherdService {\n    constructor() {\n        this.confirmCancel = false;\n        this.confirmCancelMessage = null;\n        this.defaultStepOptions = {};\n        this.errorTitle = null;\n        this.isActive = false;\n        this.messageForUser = null;\n        this.modal = false;\n        this.requiredElements = [];\n        this.steps = [];\n        this.tourName = undefined;\n        this.tourObject = null;\n    }\n    /**\n     * Get the tour object and call back\n     * @return {?}\n     */\n    back() {\n        this.tourObject.back();\n    }\n    /**\n     * Cancel the tour\n     * @return {?}\n     */\n    cancel() {\n        this.tourObject.cancel();\n    }\n    /**\n     * Complete the tour\n     * @return {?}\n     */\n    complete() {\n        this.tourObject.complete();\n    }\n    /**\n     * Hides the current step\n     * @return {?}\n     */\n    hide() {\n        this.tourObject.hide();\n    }\n    /**\n     * Advance the tour to the next step\n     * @return {?}\n     */\n    next() {\n        this.tourObject.next();\n    }\n    /**\n     * Show a specific step, by passing its id\n     * @param {?} id The id of the step you want to show\n     * @return {?}\n     */\n    show(id) {\n        this.tourObject.show(id);\n    }\n    /**\n     * Start the tour\n     * @return {?}\n     */\n    start() {\n        this.isActive = true;\n        this.tourObject.start();\n    }\n    /**\n     * This function is called when a tour is completed or cancelled to initiate cleanup.\n     * @param {?} completeOrCancel 'complete' or 'cancel'\n     * @return {?}\n     */\n    onTourFinish(completeOrCancel) {\n        this.isActive = false;\n    }\n    /**\n     * Take a set of steps and create a tour object based on the current configuration\n     * @param {?} steps An array of steps\n     * @return {?}\n     */\n    addSteps(steps) {\n        this._initialize();\n        /** @type {?} */\n        const tour = this.tourObject;\n        // Return nothing if there are no steps\n        if (!steps || !Array.isArray(steps) || steps.length === 0) {\n            return;\n        }\n        if (!this.requiredElementsPresent()) {\n            tour.addStep({\n                buttons: [{\n                        text: 'Exit',\n                        action: tour.cancel\n                    }],\n                id: 'error',\n                title: this.errorTitle,\n                text: [this.messageForUser]\n            });\n            return;\n        }\n        steps.forEach((/**\n         * @param {?} step\n         * @return {?}\n         */\n        (step) => {\n            if (step.buttons) {\n                step.buttons = step.buttons.map(makeButton.bind(this), this);\n            }\n            tour.addStep(step);\n        }));\n    }\n    /**\n     * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,\n     * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.\n     * @private\n     * @return {?}\n     */\n    requiredElementsPresent() {\n        /** @type {?} */\n        let allElementsPresent = true;\n        /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */\n        this.requiredElements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        (element) => {\n            /** @type {?} */\n            const selectedElement = document.querySelector(element.selector);\n            if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {\n                allElementsPresent = false;\n                this.errorTitle = element.title;\n                this.messageForUser = element.message;\n            }\n        }));\n        return allElementsPresent;\n    }\n    /**\n     * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events\n     * @private\n     * @return {?}\n     */\n    _initialize() {\n        /** @type {?} */\n        const tourObject = new Shepherd.Tour({\n            confirmCancel: this.confirmCancel,\n            confirmCancelMessage: this.confirmCancelMessage,\n            defaultStepOptions: this.defaultStepOptions,\n            tourName: this.tourName,\n            useModalOverlay: this.modal\n        });\n        tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));\n        tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));\n        this.tourObject = tourObject;\n    }\n}\nShepherdService.ɵfac = function ShepherdService_Factory(t) { return new (t || ShepherdService)(); };\n/** @nocollapse */\nShepherdService.ctorParameters = () => [];\n/** @nocollapse */ ShepherdService.ɵprov = ɵɵdefineInjectable({ factory: function ShepherdService_Factory() { return new ShepherdService(); }, token: ShepherdService, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShepherdService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\nif (false) {\n    /** @type {?} */\n    ShepherdService.prototype.confirmCancel;\n    /** @type {?} */\n    ShepherdService.prototype.confirmCancelMessage;\n    /** @type {?} */\n    ShepherdService.prototype.defaultStepOptions;\n    /** @type {?} */\n    ShepherdService.prototype.errorTitle;\n    /** @type {?} */\n    ShepherdService.prototype.isActive;\n    /** @type {?} */\n    ShepherdService.prototype.messageForUser;\n    /** @type {?} */\n    ShepherdService.prototype.modal;\n    /** @type {?} */\n    ShepherdService.prototype.requiredElements;\n    /** @type {?} */\n    ShepherdService.prototype.steps;\n    /** @type {?} */\n    ShepherdService.prototype.tourName;\n    /** @type {?} */\n    ShepherdService.prototype.tourObject;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-shepherd.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ShepherdService };\n\n"]},"metadata":{},"sourceType":"module"}