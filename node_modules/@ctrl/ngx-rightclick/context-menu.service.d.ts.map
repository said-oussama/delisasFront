{"version":3,"file":"context-menu.service.d.ts","sources":["context-menu.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Overlay, OverlayRef, ScrollStrategyOptions } from '@angular/cdk/overlay';\nimport { Injector, EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nexport interface ActiveContextMenuSub {\n    id: number;\n    isTriggerHovered: BehaviorSubject<boolean>;\n    isMenuHovered: BehaviorSubject<boolean>;\n    submenu: boolean;\n}\nexport interface ActiveContextMenu extends ActiveContextMenuSub {\n    overlayRef: OverlayRef;\n    component: any;\n    menuClose: EventEmitter<void>;\n    menuAction: EventEmitter<any>;\n}\nexport declare class ContextMenuService {\n    private overlay;\n    private scrollStrategy;\n    private injector;\n    menus: ActiveContextMenu[];\n    id: number;\n    constructor(overlay: Overlay, scrollStrategy: ScrollStrategyOptions, injector: Injector);\n    /**\n     *\n     * @param $event triggering event\n     * @param menuComponent the component to be shown\n     * @param submenu is a menu within a menu\n     * @param level if submenu, what level\n     */\n    show($event: MouseEvent, menuComponent: any, context: any, menuClose: EventEmitter<any>, menuAction: EventEmitter<any>, submenu?: boolean, level?: number): ActiveContextMenu;\n    getCurrentLevel(): number;\n    closeAll(context?: any, idx?: number): void;\n    destroyMenu(menu: ActiveContextMenu, context?: any): void;\n    close(menu: ActiveContextMenu, menuIndex: number, context?: any): void;\n    checkOutsideClick($event: MouseEvent): void;\n    closeSubMenu(id: number): void;\n}\n"]}