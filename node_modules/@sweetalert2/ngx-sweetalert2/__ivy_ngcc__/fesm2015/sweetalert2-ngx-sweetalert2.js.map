{"version":3,"file":"sweetalert2-ngx-sweetalert2.js","sources":["@sweetalert2/ngx-sweetalert2/lib/di.ts","@sweetalert2/ngx-sweetalert2/lib/sweetalert2-loader.service.ts","@sweetalert2/ngx-sweetalert2/lib/swal.component.ts","@sweetalert2/ngx-sweetalert2/lib/swal.directive.ts","@sweetalert2/ngx-sweetalert2/lib/swal-portal-targets.service.ts","@sweetalert2/ngx-sweetalert2/lib/swal-portal.component.ts","@sweetalert2/ngx-sweetalert2/lib/swal-portal.directive.ts","@sweetalert2/ngx-sweetalert2/lib/sweetalert2.module.ts","@sweetalert2/ngx-sweetalert2/sweetalert2-ngx-sweetalert2.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport Swal from 'sweetalert2';\n\nexport const swalProviderToken = new InjectionToken<typeof Swal>('@sweetalert2/ngx-sweetalert2#swalProvider');\n\nexport const fireOnInitToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#fireOnInit');\n\nexport const dismissOnDestroyToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n","import { Inject, Injectable } from '@angular/core';\nimport SwalDefault, * as Swal from 'sweetalert2';\nimport { swalProviderToken } from './di';\n\nexport type SwalModule = typeof SwalDefault | typeof Swal;\n\nexport type SwalProvider = SwalModuleLoader | SwalModule;\n\nexport type SwalModuleLoader = () => Promise<SwalModule>;\n\n@Injectable()\nexport class SweetAlert2LoaderService {\n    private readonly swalProvider: SwalProvider;\n\n    private swalPromiseCache?: Promise<typeof SwalDefault>;\n\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    public constructor(@Inject(swalProviderToken) swalProvider: any) {\n        this.swalProvider = swalProvider;\n    }\n\n    public get swal(): Promise<typeof SwalDefault> {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n\n        return this.swalPromiseCache!;\n    }\n\n    public preloadSweetAlertLibrary(): void {\n        if (this.swalPromiseCache) return;\n\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n\n        function isLoader(value: SwalProvider): value is SwalModuleLoader {\n            return typeof value === 'function' && (value as any).version === undefined;\n        }\n\n        function isDefaultExport(value: SwalModule): value is typeof SwalDefault {\n            return typeof value === 'function';\n        }\n    }\n}\n","import {\n    AfterViewInit, ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, OnInit,\n    Output, SimpleChanges\n} from '@angular/core';\nimport Swal, { SweetAlertOptions, SweetAlertResult, SweetAlertUpdatableParameters } from 'sweetalert2';\nimport { dismissOnDestroyToken, fireOnInitToken } from './di';\nimport * as events from './swal-events';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy\n *     (but without \"on*\" prefix to respect community standards).\n *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the values they can/must return.\n */\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public icon: SweetAlertOptions['icon'];\n    @Input() public iconHtml: SweetAlertOptions['iconHtml'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public showClass: SweetAlertOptions['showClass'];\n    @Input() public hideClass: SweetAlertOptions['hideClass'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public timerProgressBar: SweetAlertOptions['timerProgressBar'];\n    /** @deprecated Use showClass and hideClass instead */\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public heightAuto: SweetAlertOptions['heightAuto'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public stopKeydownPropagation: SweetAlertOptions['stopKeydownPropagation'];\n    @Input() public keydownListenerCapture: SweetAlertOptions['keydownListenerCapture'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonHtml: SweetAlertOptions['closeButtonHtml'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public validationMessage: SweetAlertOptions['validationMessage'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n    @Input() public scrollbarPadding: SweetAlertOptions['scrollbarPadding'];\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input()\n    public set swalOptions(options: SweetAlertOptions) {\n        //=> Update properties\n        Object.assign(this, options);\n\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options) as Array<keyof SweetAlertOptions>;\n        touchedKeys.forEach(this.markTouched);\n    }\n\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    public get swalOptions(): SweetAlertOptions {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce<SweetAlertOptions>(\n            (obj, key) => ({ ...obj, [key]: this[key as keyof this] }),\n            {});\n    }\n\n    /**\n     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n     *\n     * Example:\n     *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n     */\n    @Input()\n    public swalFireOnInit?: boolean;\n\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n     */\n    @Input()\n    public swalDismissOnDestroy?: boolean;\n\n    @Input()\n    public set swalVisible(visible: boolean) {\n        visible ? this.fire() : this.dismiss();\n    }\n\n    public get swalVisible(): boolean {\n        return this.isCurrentlyShown;\n    }\n\n    /**\n     * Emits an event when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output()\n    public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an event when the modal is shown.\n     */\n    @Output()\n    public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits an event when the modal DOM is rendered.\n     */\n    @Output()\n    public readonly render = new EventEmitter<events.RenderEvent>();\n\n    /**\n     * Emits an event when the modal will be closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n    @Output()\n    public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits an event after the modal had been closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n    @Output()\n    public readonly afterClose = new EventEmitter<void>();\n\n    /**\n     * Emits an event after the modal had been closed.\n     * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions\n     * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by\n     * another popup.\n     */\n    @Output()\n    public readonly destroy = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output()\n    public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output()\n    public readonly cancel = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    private isCurrentlyShown = false;\n\n    public constructor(\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        @Inject(fireOnInitToken) private readonly moduleLevelFireOnInit: boolean,\n        @Inject(dismissOnDestroyToken) private readonly moduleLevelDismissOnDestroy: boolean) {\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    public ngOnInit(): void {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    public ngAfterViewInit(): void {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n\n        fireOnInit && this.fire();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key): key is keyof SweetAlertOptions => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    public ngOnDestroy(): void {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n\n        dismissOnDestroy && this.dismiss();\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public async fire(): Promise<SweetAlertResult> {\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const userOptions = this.swalOptions;\n\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with calculated options set for that specific swal\n            ...userOptions,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: composeHook(userOptions.onBeforeOpen, (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            }),\n            onOpen: composeHook(userOptions.onOpen, (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            }),\n            onRender: composeHook(userOptions.onRender, (modalElement) => {\n                this.render.emit({ modalElement });\n            }),\n            onClose: composeHook(userOptions.onClose, (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }),\n            onAfterClose: composeHook(userOptions.onAfterClose, () => {\n                this.afterClose.emit();\n            }),\n            onDestroy: composeHook(userOptions.onDestroy, () => {\n                this.destroy.emit();\n            })\n        };\n\n        //=> Show the Swal! And wait for confirmation or dimissal.\n        const result = await swal.fire(options);\n\n        //=> Emit on (confirm) or (cancel)\n        if ('value' in result) {\n            this.confirm.emit(result.value);\n        } else {\n            this.cancel.emit(result.dismiss);\n        }\n\n        return result;\n\n        function composeHook<T extends (...args: any[]) => void>(\n            userHook: T | undefined,\n            libHook: T): (...args: Parameters<T>) => void {\n\n            return (...args) => (libHook(...args), userHook?.(...args));\n        }\n    }\n\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).\n     *               If the argument is not passed, (dimiss) will emit `undefined`.\n     *               See {@link Swal.close}\n     */\n    public async dismiss(result?: SweetAlertResult): Promise<void> {\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n        swal.close(result);\n    }\n\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    public async update(options?: Pick<SweetAlertOptions, SweetAlertUpdatableParameters>): Promise<void> {\n        if (options) {\n            this.swalOptions = options;\n        }\n\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const allOptions = this.swalOptions;\n\n        const updatableOptions = Object.keys(allOptions)\n            .filter(swal.isUpdatableParameter)\n            .reduce<Pick<SweetAlertOptions, SweetAlertUpdatableParameters>>(\n                (obj, key) => ({ ...obj, [key]: allOptions[key] }),\n                {});\n\n        swal.update(updatableOptions);\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        } else {\n            this.swalOptions = options;\n        }\n\n        function isArrayOptions(value: any): value is SweetAlertArrayOptions {\n            return Array.isArray(options);\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef?: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance?: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions?: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (!this.swalInstance) return;\n\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n\n        const swalClosed = new Subject();\n\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.cancel.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n}\n","import { Injectable } from '@angular/core';\nimport Swal, { SweetAlertOptions } from 'sweetalert2';\n\nexport interface SwalPortalTarget {\n    options?: SweetAlertOptions;\n    element(swal: typeof Swal): HTMLElement | null;\n}\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n@Injectable({ providedIn: 'root' })\nexport class SwalPortalTargets {\n    /**\n     * Targets the modal close button block contents.\n     */\n    public readonly closeButton: SwalPortalTarget = {\n        element: swal => swal.getCloseButton(),\n        options: { showCloseButton: true }\n    };\n\n    /**\n     * Targets the modal title block contents.\n     */\n    public readonly title: SwalPortalTarget = {\n        element: swal => swal.getTitle(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { title: ' ' }\n    };\n\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    public readonly content: SwalPortalTarget = {\n        element: swal => swal.getHtmlContainer(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { text: ' ' }\n    };\n\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    public readonly actions: SwalPortalTarget = {\n        element: swal => swal.getActions(),\n        // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly confirmButton: SwalPortalTarget = {\n        element: swal => swal.getConfirmButton(),\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly cancelButton: SwalPortalTarget = {\n        element: swal => swal.getCancelButton(),\n        options: { showCancelButton: true }\n    };\n\n    /**\n     * Targets the modal footer contents.\n     */\n    public readonly footer: SwalPortalTarget = {\n        element: swal => swal.getFooter(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { footer: ' ' }\n    };\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n@Component({\n    selector: 'swal-portal',\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPortalComponent {\n    @Input() public template: TemplateRef<any> | null = null;\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SwalPortalTarget, SwalPortalTargets } from './swal-portal-targets.service';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalComponent } from './swal.component';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPortal]'\n})\nexport class SwalPortalDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input('swalPortal') public target?: SwalPortalTarget;\n\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     */\n    private portalComponentRef?: ComponentRef<SwalPortalComponent>;\n\n    private readonly destroyed = new Subject<void>();\n\n    public constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        private readonly swalTargets: SwalPortalTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));\n        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));\n        this.swalComponent.destroy.pipe(takeUntil(this.destroyed)).subscribe(this.destroyHook.bind(this));\n    }\n\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    public ngOnDestroy(): void {\n        this.destroyed.next();\n    }\n\n    /**\n     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link beforeOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    private async renderHook(): Promise<void> {\n        //=> Ensure the portal component is created\n        if (!this.portalComponentRef) {\n            this.portalComponentRef = this.createPortalComponent();\n        }\n\n        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n        // the portal component is fully synchronous, causing no blinks in the modal contents.\n        const swal = await this.sweetAlert2Loader.swal;\n\n        //=> Find target element\n        const targetEl = this.target!.element(swal);\n        if (!targetEl) return;\n\n        //=> Replace target's contents with our component\n        // https://jsperf.com/innerhtml-vs-removechild/15\n        while (targetEl.firstChild) {\n            targetEl.removeChild(targetEl.firstChild);\n        }\n\n        targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n\n    /**\n     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    private beforeOpenHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n\n    /**\n     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    private destroyHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    private createPortalComponent(): ComponentRef<SwalPortalComponent> {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n\n        return componentRef;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { dismissOnDestroyToken, fireOnInitToken, swalProviderToken } from './di';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalPortalDirective } from './swal-portal.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\nimport { SwalProvider, SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\nexport interface Sweetalert2ModuleConfig {\n    provideSwal?: SwalProvider;\n    fireOnInit?: boolean;\n    dismissOnDestroy?: boolean;\n}\n\nexport function provideDefaultSwal() {\n    return import('sweetalert2');\n}\n\n@NgModule({\n    declarations: [\n        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPortalDirective, SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPortalComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n\n    public static forChild(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {dismissOnDestroyToken as ɵd,fireOnInitToken as ɵc,swalProviderToken as ɵb} from './lib/di';\nexport {SwalPortalComponent as ɵe} from './lib/swal-portal.component';\nexport {provideDefaultSwal as ɵa} from './lib/sweetalert2.module';"]}